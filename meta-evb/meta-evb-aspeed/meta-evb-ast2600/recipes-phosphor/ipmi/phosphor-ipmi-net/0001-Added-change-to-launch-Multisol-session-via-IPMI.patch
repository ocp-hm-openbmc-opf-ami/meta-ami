From c0c27dcd991d8256a7912251e07ca03c22456afd Mon Sep 17 00:00:00 2001
From: pandiarajt <pandiarajt@ami.com>
Date: Mon, 22 Jan 2024 19:26:20 +0530
Subject: [PATCH 302/302] Added change to launch Multisol session via IPMI

---
 command/payload_cmds.cpp | 20 +++++++++++---------
 command/payload_cmds.hpp | 10 +++++++++-
 meson.build              |  1 +
 meson.options            |  7 +++++++
 sol/sol_manager.cpp      | 14 ++++++++++++++
 sol/sol_manager.hpp      |  2 +-
 6 files changed, 43 insertions(+), 11 deletions(-)

diff --git a/command/payload_cmds.cpp b/command/payload_cmds.cpp
index 60cedc6..1ddbace 100644
--- a/command/payload_cmds.cpp
+++ b/command/payload_cmds.cpp
@@ -47,8 +47,7 @@ std::vector<uint8_t> activatePayload(const std::vector<uint8_t>& inPayload,
         return outPayload;
     }
 
-    // Only one instance of SOL is currently supported.
-    if (request->payloadInstance != 1)
+    if (request->payloadInstance > MAX_PAYLOAD_INSTANCE )
     {
         response->completionCode = IPMI_CC_INVALID_FIELD_REQUEST;
         return outPayload;
@@ -138,8 +137,7 @@ std::vector<uint8_t>
         return outPayload;
     }
 
-    // Only one instance of SOL is supported
-    if (request->payloadInstance != 1)
+    if (request->payloadInstance > MAX_PAYLOAD_INSTANCE)
     {
         response->completionCode = IPMI_CC_INVALID_FIELD_REQUEST;
         return outPayload;
@@ -223,12 +221,17 @@ std::vector<uint8_t>
 
     response->completionCode = IPMI_CC_OK;
 
-    constexpr size_t maxSolPayloadInstances = 1;
-    response->capacity = maxSolPayloadInstances;
+    response->capacity = MAX_PAYLOAD_INSTANCE;
 
     // Currently we support only one SOL session
     response->instance1 = sol::Manager::get().isPayloadActive(1);
 
+#ifdef MULTI_SOL
+    response->instance2 = sol::Manager::get().isPayloadActive(2);
+    response->instance3 = sol::Manager::get().isPayloadActive(3);
+    response->instance4 = sol::Manager::get().isPayloadActive(4);
+#endif
+
     return outPayload;
 }
 
@@ -249,11 +252,10 @@ std::vector<uint8_t>
     auto response =
         reinterpret_cast<GetPayloadInfoResponse*>(outPayload.data());
 
-    // SOL is the payload currently supported for payload status & only one
-    // instance of SOL is supported.
+    // SOL is the payload currently supported for payload status
     if (static_cast<uint8_t>(message::PayloadType::SOL) !=
             request->payloadType ||
-        request->payloadInstance != 1)
+        request->payloadInstance > MAX_PAYLOAD_INSTANCE)
     {
         response->completionCode = IPMI_CC_INVALID_FIELD_REQUEST;
         return outPayload;
diff --git a/command/payload_cmds.hpp b/command/payload_cmds.hpp
index 470d693..198b3ca 100644
--- a/command/payload_cmds.hpp
+++ b/command/payload_cmds.hpp
@@ -1,9 +1,17 @@
 #pragma once
 
 #include "message_handler.hpp"
-
+#include "config.h"
 #include <vector>
 
+#ifdef MULTI_SOL
+#define MAX_PAYLOAD_INSTANCE 4
+#else
+#define MAX_PAYLOAD_INSTANCE 1
+#endif
+
+
+
 namespace sol
 {
 
diff --git a/meson.build b/meson.build
index 1a685ce..10501eb 100644
--- a/meson.build
+++ b/meson.build
@@ -13,6 +13,7 @@ project(
 conf_data = configuration_data()
 conf_data.set('RMCP_PING', get_option('rmcp_ping').enabled())
 conf_data.set('PAM_AUTHENTICATE', get_option('pam_authenticate').enabled())
+conf_data.set('MULTI_SOL', get_option('multi_sol').enabled())
 
 configure_file(output: 'config.h',
     configuration: conf_data
diff --git a/meson.options b/meson.options
index bad5e62..d94f32e 100644
--- a/meson.options
+++ b/meson.options
@@ -18,3 +18,10 @@ option(
     value: 'enabled',
     description : 'Enable Pam Authenticate'
 )
+
+option(
+    'multi_sol',
+    type : 'feature',
+    value: 'enabled' ,
+    description : 'Enable Multi SOL'
+)
diff --git a/sol/sol_manager.cpp b/sol/sol_manager.cpp
index 76e1a15..ef4d90a 100644
--- a/sol/sol_manager.cpp
+++ b/sol/sol_manager.cpp
@@ -24,6 +24,8 @@ constexpr const char* PROP_INTF = "org.freedesktop.DBus.Properties";
 namespace sol
 {
 
+uint8_t instance = 0; 
+
 std::unique_ptr<sdbusplus::bus::match_t> matchPtrSOL(nullptr);
 std::unique_ptr<sdbusplus::bus::match_t> solConfPropertiesSignal(nullptr);
 
@@ -31,6 +33,17 @@ void Manager::initConsoleSocket()
 {
     // explicit length constructor for NUL-prefixed abstract path
     std::string path(CONSOLE_SOCKET_PATH, CONSOLE_SOCKET_PATH_LEN);
+    if (instance > 1)
+    {
+            std::string CONSOLE_PATH_SUFFIX = std::string(".ttyS") + std::to_string(instance - 1);
+            path.append(CONSOLE_PATH_SUFFIX);
+    }
+    else
+    {
+	    std::string CONSOLE_PATH_SUFFIX = std::string(".default");
+	    path.append(CONSOLE_PATH_SUFFIX);
+    }
+
     boost::asio::local::stream_protocol::endpoint ep(path);
     consoleSocket =
         std::make_unique<boost::asio::local::stream_protocol::socket>(*io);
@@ -179,6 +192,7 @@ void Manager::updateSOLParameter(uint8_t channelNum)
 void Manager::startPayloadInstance(uint8_t payloadInstance,
                                    session::SessionID sessionID)
 {
+    instance = payloadInstance;
     if (payloadMap.empty())
     {
         try
diff --git a/sol/sol_manager.hpp b/sol/sol_manager.hpp
index dd857fe..33a537d 100644
--- a/sol/sol_manager.hpp
+++ b/sol/sol_manager.hpp
@@ -20,7 +20,7 @@ constexpr size_t MAX_PAYLOAD_SIZE = 255;
 constexpr uint8_t MAJOR_VERSION = 0x01;
 constexpr uint8_t MINOR_VERSION = 0x00;
 
-constexpr char CONSOLE_SOCKET_PATH[] = "\0obmc-console.default";
+constexpr char CONSOLE_SOCKET_PATH[] = "\0obmc-console";
 constexpr size_t CONSOLE_SOCKET_PATH_LEN = sizeof(CONSOLE_SOCKET_PATH) - 1;
 
 constexpr uint8_t accIntervalFactor = 5;
-- 
2.25.1

