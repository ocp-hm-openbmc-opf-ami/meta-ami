From b144cfea402b75119c263ef8de1bf32986bd2f31 Mon Sep 17 00:00:00 2001
From: Yaswanth <yaswanthsai@ami.com>
Date: Mon, 11 Sep 2023 13:14:18 +0530
Subject: [PATCH] Removed Multi PsysSupport

---
 cmake/config_defaults.hpp.in                  |  2 -
 include/config/config.hpp                     | 10 ---
 include/control/control.hpp                   |  9 +--
 .../proportional_capabilites_scalability.hpp  |  2 -
 include/devices_manager/devices_manager.hpp   | 17 ++--
 .../devices_manager/hwmon_file_provider.hpp   | 77 +------------------
 include/node_manager.hpp                      |  8 +-
 include/peci/peci_commands_gnr.hpp            | 36 +--------
 include/peci/peci_commands_if.hpp             |  2 -
 include/peci/peci_commands_off.hpp            |  6 --
 include/peci/peci_commands_spr.hpp            |  5 --
 include/peci/peci_types_gnr.hpp               | 13 ----
 include/utility/devices_configuration.hpp     |  2 +-
 provisioning.settings                         |  7 --
 14 files changed, 18 insertions(+), 178 deletions(-)

diff --git a/cmake/config_defaults.hpp.in b/cmake/config_defaults.hpp.in
index 985684d..3cae286 100644
--- a/cmake/config_defaults.hpp.in
+++ b/cmake/config_defaults.hpp.in
@@ -44,8 +44,6 @@ struct GeneralPresets
     uint8_t cpuTurboRatioLimit = @CPU_TURBO_RATIO_LIMIT@;
     std::string peciDevice = "@PECI_DEVICE@";
     uint32_t readingAvailabilityTimeoutSec = @READING_AVAILABILITY_TIMEOUT_SEC@;
-    bool useManualPsysTopology = @USE_MANUAL_PSYS_TOPOLOGY@;
-    std::set<uint8_t> psysTopology = @PSYS_TOPOLOGY@;
 };
 
 struct LoggerSettings
diff --git a/include/config/config.hpp b/include/config/config.hpp
index aacfd8e..447974c 100644
--- a/include/config/config.hpp
+++ b/include/config/config.hpp
@@ -53,8 +53,6 @@ void to_json(nlohmann::json& j, const GeneralPresets& data)
         {"CpuTurboRatioLimit", data.cpuTurboRatioLimit},
         {"PeciDevice", data.peciDevice},
         {"ReadingAvailabilityTimeoutSec", data.readingAvailabilityTimeoutSec},
-        {"UseManualPsysTopology", data.useManualPsysTopology},
-        {"PsysTopology", data.psysTopology},
     };
 }
 
@@ -299,14 +297,6 @@ class Config
                 std::ref(generalPresets.readingAvailabilityTimeoutSec),
                 getRangeValidator<uint32_t>(20, 300)),
 
-            std::make_tuple(kGeneralPresets, "UseManualPsysTopology",
-                            std::ref(generalPresets.useManualPsysTopology),
-                            doNotValidate),
-
-            std::make_tuple(kGeneralPresets, "PsysTopology",
-                            std::ref(generalPresets.psysTopology),
-                            doNotValidate),
-
             std::make_tuple(
                 kLoggerSettings, "LogLevel", std::ref(loggerSettings.logLevel),
                 [](const std::string& value) -> bool {
diff --git a/include/control/control.hpp b/include/control/control.hpp
index 3d1d89f..631a8da 100644
--- a/include/control/control.hpp
+++ b/include/control/control.hpp
@@ -149,11 +149,10 @@ class Control : public ControlIf, public RunnerIf
     void installBalancers()
     {
         // DcPlatform balancer
-        domainBalancers.emplace(
-            RaplDomainId::dcTotalPower,
-            std::make_unique<Balancer>(
-                devicesManager, KnobType::DcPlatformPower,
-                std::make_shared<ProportionalDcScalability>(devicesManager)));
+	domainBalancers.emplace(RaplDomainId::dcTotalPower,
+                                std::make_unique<Balancer>(
+                                    devicesManager, KnobType::DcPlatformPower,
+                                    std::make_shared<TotalPowerScalability>()));
 
         // Cpu balancer
         domainBalancers.emplace(
diff --git a/include/control/scalability/proportional_capabilites_scalability.hpp b/include/control/scalability/proportional_capabilites_scalability.hpp
index bdc4510..6ea05b1 100644
--- a/include/control/scalability/proportional_capabilites_scalability.hpp
+++ b/include/control/scalability/proportional_capabilites_scalability.hpp
@@ -96,6 +96,4 @@ using ProportionalPCieScalability =
     ProportionalCapabilitiesScalability<kMaxPcieNumber,
                                         ReadingType::pciePowerCapabilitiesMax>;
 
-using ProportionalDcScalability = ProportionalCapabilitiesScalability<
-    kMaxPlatformNumber, ReadingType::dcPlatformPowerCapabilitiesMaxCpu>;
 } // namespace nodemanager
diff --git a/include/devices_manager/devices_manager.hpp b/include/devices_manager/devices_manager.hpp
index 2b5e998..ac3e30e 100644
--- a/include/devices_manager/devices_manager.hpp
+++ b/include/devices_manager/devices_manager.hpp
@@ -95,18 +95,19 @@ class DevicesManager : public RunnerIf,
     DevicesManager& operator=(const DevicesManager&) = delete;
     DevicesManager(DevicesManager&&) = delete;
     DevicesManager& operator=(DevicesManager&&) = delete;
-    DevicesManager(std::shared_ptr<sdbusplus::asio::connection> busArg,
-                   const std::shared_ptr<SensorReadingsManagerIf>&
-                       sensorReadingsManagerArg,
-                   std::shared_ptr<HwmonFileProviderIf> hwmonFileProviderArg,
-                   std::shared_ptr<GpioProviderIf> gpioProviderArg,
-                   std::shared_ptr<PldmEntityProviderIf> pldmEntityProviderArg,
-                   std::shared_ptr<PeciProviderIf> peciProviderArg) :
+    DevicesManager(
+        std::shared_ptr<sdbusplus::asio::connection> busArg,
+        const std::shared_ptr<SensorReadingsManagerIf>&
+            sensorReadingsManagerArg,
+        std::shared_ptr<HwmonFileProviderIf> hwmonFileProviderArg,
+        std::shared_ptr<GpioProviderIf> gpioProviderArg,
+        std::shared_ptr<PldmEntityProviderIf> pldmEntityProviderArg) :
 
         bus(busArg),
         sensorReadingsManager(sensorReadingsManagerArg),
         hwmonFileProvider(hwmonFileProviderArg), gpioProvider(gpioProviderArg),
-        pldmEntityProvider(pldmEntityProviderArg), peciCommands(peciProviderArg)
+        pldmEntityProvider(pldmEntityProviderArg), 
+	peciCommands(std::make_shared<PeciProvider>(busArg))
     {
         installSensors();
         installReadings();
diff --git a/include/devices_manager/hwmon_file_provider.hpp b/include/devices_manager/hwmon_file_provider.hpp
index 7ccc313..67abe75 100644
--- a/include/devices_manager/hwmon_file_provider.hpp
+++ b/include/devices_manager/hwmon_file_provider.hpp
@@ -20,7 +20,6 @@
 #include "common_types.hpp"
 #include "flow_control.hpp"
 #include "knobs/knob.hpp"
-#include "peci_provider.hpp"
 #include "sensors/sensor_reading_type.hpp"
 #include "utility/devices_configuration.hpp"
 #include "utility/file_matcher.hpp"
@@ -49,7 +48,6 @@ static const unsigned kAddressPathIndex = 2;
 static const unsigned kHwmonNamePathIndex = 3;
 static const unsigned kFileNamePathIndex = 4;
 
-static const uint8_t kPlatformPowerDefaultIdx = 0;
 
 class HwmonFileProviderIf
 {
@@ -144,13 +142,12 @@ class HwmonFileProvider : public HwmonFileProviderIf
     HwmonFileProvider(
         std::shared_ptr<sdbusplus::asio::connection> busArg,
         const std::filesystem::path peciDevice,
-        std::shared_ptr<PeciProviderIf> peciProviderArg,
         const std::filesystem::path rootPathArg = "/sys/bus",
         const std::filesystem::path hwmonLinksDirPathArg = "/sys/class/hwmon",
         bool startDiscoveryTimer = true) :
         hwmonDiscoveryTimer(busArg->get_io_context()),
         hwmonDiscoveryTimeout(std::chrono::seconds(1)),
-        peciProvider(peciProviderArg), hwmonLinksDirPath(hwmonLinksDirPathArg)
+	hwmonLinksDirPath(hwmonLinksDirPathArg)
     {
         installConfigs(peciDevice, rootPathArg);
         if (startDiscoveryTimer)
@@ -198,7 +195,6 @@ class HwmonFileProvider : public HwmonFileProviderIf
     std::optional<
         std::future<std::tuple<std::optional<size_t>, DiscoveredPaths>>>
         future;
-    std::optional<std::future<std::set<uint8_t>>> futurePsysRoots;
 
   private:
     template <class T>
@@ -325,10 +321,6 @@ class HwmonFileProvider : public HwmonFileProviderIf
             {
                 if (auto idx = getDeviceIndex(hwmonDeviceType, bus, address))
                 {
-                    if (skipCurrentDevice(hwmonDeviceType, *idx))
-                    {
-                        continue;
-                    }
                     if (hwmonDeviceType == "psu")
                     {
                         if (!psuBusLastFound)
@@ -516,12 +508,6 @@ class HwmonFileProvider : public HwmonFileProviderIf
 
     void runFileDiscovery()
     {
-        if (!Config::getInstance().getGeneralPresets().useManualPsysTopology)
-        {
-            Logger::log<LogLevel::debug>("Discovering psys roots");
-            discoverPsysRoots();
-        }
-
         discoverFiles();
         hwmonDiscoveryTimer.expires_after(hwmonDiscoveryTimeout);
         hwmonDiscoveryTimer.async_wait([this](boost::system::error_code ec) {
@@ -538,73 +524,12 @@ class HwmonFileProvider : public HwmonFileProviderIf
         });
     }
 
-    void discoverPsysRoots()
-    {
-        if (futurePsysRoots)
-        {
-            if (futurePsysRoots->valid() &&
-                futurePsysRoots->wait_for(std::chrono::seconds(0)) ==
-                    std::future_status::ready)
-            {
-                std::set<uint8_t> psysRoots = futurePsysRoots->get();
-                if (!psysRoots.empty())
-                {
-                    platformPowerPsysIdx = psysRoots;
-                }
-            }
-        }
-        if (!futurePsysRoots || !futurePsysRoots->valid())
-        {
-            futurePsysRoots = std::move(std::async(
-                std::launch::async,
-                [peciIf = peciProvider->getIf()]() -> std::set<uint8_t> {
-                    std::set<uint8_t> psysRoots;
-                    for (DeviceIndex cpuIndex = 0; cpuIndex < kMaxCpuNumber;
-                         ++cpuIndex)
-                    {
-                        auto isRoot = peciIf->isCpuPsysRoot(cpuIndex);
-                        if (isRoot && *isRoot)
-                        {
-                            psysRoots.insert(cpuIndex);
-                        }
-                    }
-                    return psysRoots;
-                }));
-        }
-    }
-
-    bool skipCurrentDevice(std::string hwmonDeviceType, DeviceIndex idx)
-    {
-        if (hwmonDeviceType == "platformpower")
-        {
-            if (Config::getInstance().getGeneralPresets().useManualPsysTopology)
-            {
-                if (!Config::getInstance()
-                         .getGeneralPresets()
-                         .psysTopology.contains(idx))
-                {
-                    return true;
-                }
-            }
-            else
-            {
-                if (!platformPowerPsysIdx.contains(idx))
-                {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
     boost::asio::steady_timer hwmonDiscoveryTimer;
     std::chrono::seconds hwmonDiscoveryTimeout;
     ElementToPathMap<SensorReadingType> sensorsToHwmonMap;
     ElementToPathMap<KnobType> knobsToHwmonMap;
-    std::shared_ptr<PeciProviderIf> peciProvider;
     std::vector<FileMatcher<FileMatcherResults>> fileMatchers;
     std::optional<size_t> prevHash = std::nullopt;
     std::filesystem::path hwmonLinksDirPath;
-    std::set<uint8_t> platformPowerPsysIdx = {kPlatformPowerDefaultIdx};
 };
 } // namespace nodemanager
diff --git a/include/node_manager.hpp b/include/node_manager.hpp
index 310e607..6681e03 100644
--- a/include/node_manager.hpp
+++ b/include/node_manager.hpp
@@ -112,16 +112,13 @@ class NodeManager : public RunnerIf, DbusEnableIf
         smartSupervisor = std::make_unique<SmartSupervisor>(
             bus, objectServer, objectPath, sensorReadingsManager,
             kSmartParametersDirectory);
-        peciProvider = std::make_shared<PeciProvider>(bus);
         devicesManager = std::make_shared<DevicesManager>(
             bus, sensorReadingsManager,
             std::make_shared<HwmonFileProvider>(
                 bus,
                 std::filesystem::path{
-                    Config::getInstance().getGeneralPresets().peciDevice},
-                peciProvider),
-            gpioProvider, std::make_shared<PldmEntityProvider>(bus),
-            peciProvider);
+                    Config::getInstance().getGeneralPresets().peciDevice}),
+            gpioProvider, std::make_shared<PldmEntityProvider>(bus));
         statusMonitor = std::make_shared<StatusMonitor>(
             devicesManager, std::make_shared<StatusMonitorActions>());
         efficiencyControl = std::make_shared<EfficiencyControl>(devicesManager);
@@ -234,7 +231,6 @@ class NodeManager : public RunnerIf, DbusEnableIf
     std::shared_ptr<SensorReadingsManagerIf> sensorReadingsManager;
     std::unique_ptr<SmartSupervisor> smartSupervisor;
     std::shared_ptr<ThrottlingLogCollector> throttlingLogCollector;
-    std::shared_ptr<PeciProvider> peciProvider;
 
     std::shared_ptr<Budgeting> makeBudgeting()
     {
diff --git a/include/peci/peci_commands_gnr.hpp b/include/peci/peci_commands_gnr.hpp
index 35df642..754c770 100644
--- a/include/peci/peci_commands_gnr.hpp
+++ b/include/peci/peci_commands_gnr.hpp
@@ -41,7 +41,6 @@ static constexpr uint8_t kPeciAddrTypeMmioQ = 0x06;
 static constexpr uint8_t kDeviceBitMask = 0x1F;
 static constexpr uint8_t kDomainIdBitMask = 0x7F;
 static constexpr uint8_t kPcuDeviceToDomainIdShift = 3;
-static constexpr uint64_t platformDomainInfoOffset = 0x150;
 
 class PeciCommandsGnr : public PeciCommandsOff
 {
@@ -137,40 +136,7 @@ class PeciCommandsGnr : public PeciCommandsOff
 
         return false;
     }
-
-    std::optional<bool> isCpuPsysRoot(const DeviceIndex cpuIndex) const override
-    {
-        const auto it = tpmiCfg.find(cpuIndex);
-        if (it == tpmiCfg.cend())
-        {
-            return false;
-        }
-        TpmiCpuData cpuData = it->second;
-        if (!cpuData.features.contains(kTpmiRaplFeatureId))
-        {
-            return std::nullopt;
-        }
-
-        request::gnr::GetPlatformRaplDomainInfo req;
-        req.endpointConfigMmioHeader.setTpmi(cpuData);
-        req.endpointConfigMmioHeader.offset =
-            cpuData.features.at(kTpmiRaplFeatureId).offset;
-        req.endpointConfigMmioHeader.offset += platformDomainInfoOffset;
-        const auto res =
-            executePeciCmd<response::gnr::GetPlatformRaplDomainInfo>(
-                __func__, cpuIndex, req);
-        if (res)
-        {
-            if (res->isRoot)
-            {
-                return true;
-            }
-            return false;
-        }
-
-        return std::nullopt;
-    }
-
+ 
     bool setTurboRatio(const DeviceIndex cpuIndex, const uint8_t newRatioLimit,
                        const DieId dieId) const override
     {
diff --git a/include/peci/peci_commands_if.hpp b/include/peci/peci_commands_if.hpp
index a788aef..09c7da8 100644
--- a/include/peci/peci_commands_if.hpp
+++ b/include/peci/peci_commands_if.hpp
@@ -66,8 +66,6 @@ class PeciCommandsIf
     virtual bool setProchotResponsePower(
         const DeviceIndex cpuIndex,
         const uint16_t newProchotResponsePower) const = 0;
-    virtual std::optional<bool>
-        isCpuPsysRoot(const DeviceIndex cpuIndex) const = 0;
 };
 
 } // namespace nodemanager
diff --git a/include/peci/peci_commands_off.hpp b/include/peci/peci_commands_off.hpp
index a926d65..a6b6a11 100644
--- a/include/peci/peci_commands_off.hpp
+++ b/include/peci/peci_commands_off.hpp
@@ -143,12 +143,6 @@ class PeciCommandsOff : public PeciCommandsIf
         return false;
     }
 
-    virtual std::optional<bool>
-        isCpuPsysRoot(const DeviceIndex cpuIndex) const override
-    {
-        return false;
-    }
-
     virtual bool setProchotResponsePower(
         const DeviceIndex cpuIndex,
         const uint16_t newProchotResponsePower) const override
diff --git a/include/peci/peci_commands_spr.hpp b/include/peci/peci_commands_spr.hpp
index 950fcec..3569ecb 100644
--- a/include/peci/peci_commands_spr.hpp
+++ b/include/peci/peci_commands_spr.hpp
@@ -119,11 +119,6 @@ class PeciCommandsSpr : public PeciCommandsOff
         return std::vector<DieId>{0};
     }
 
-    std::optional<bool> isCpuPsysRoot(const DeviceIndex cpuIndex) const override
-    {
-        return cpuIndex % 2 == 0;
-    }
-
     std::optional<uint32_t>
         isTurboEnabled(const DeviceIndex cpuIndex) const override
     {
diff --git a/include/peci/peci_types_gnr.hpp b/include/peci/peci_types_gnr.hpp
index 0549a5c..ab33d04 100644
--- a/include/peci/peci_types_gnr.hpp
+++ b/include/peci/peci_types_gnr.hpp
@@ -74,13 +74,6 @@ struct SetProchotResponsePower
     uint8_t checksum;
 };
 
-struct GetPlatformRaplDomainInfo
-{
-    const PeciHeader peciHeader = RdEndpointConfigHeader;
-    EndpointConfigMmioHeader endpointConfigMmioHeader = {
-        EndpointConfigMmio64Header, 0, 0, 0, 0};
-};
-
 struct GetCpuC0Counter
 {
     PeciHeader peciHeader = RdPkgConfigHeader;
@@ -200,12 +193,6 @@ struct SetProchotResponsePower
     uint8_t compCode;
 };
 
-struct GetPlatformRaplDomainInfo
-{
-    uint8_t compCode;
-    uint64_t isRoot : 1, domainId : 3, reserved : 59, lock : 1;
-};
-
 struct GetCpuC0Counter
 {
     uint8_t compCode;
diff --git a/include/utility/devices_configuration.hpp b/include/utility/devices_configuration.hpp
index eab33eb..4bd8b1b 100644
--- a/include/utility/devices_configuration.hpp
+++ b/include/utility/devices_configuration.hpp
@@ -24,7 +24,7 @@
 namespace nodemanager
 {
 static constexpr const DeviceIndex kMaxBoardNumber = 4;
-static constexpr const DeviceIndex kMaxPlatformNumber = 8;
+static constexpr const DeviceIndex kMaxPlatformNumber = 1;
 static constexpr const DeviceIndex kMaxCpuNumber = 8;
 static constexpr const DeviceIndex kMaxPsuNumber = 12;
 static constexpr const DeviceIndex kMaxPsuNumberPerBoard = 3;
diff --git a/provisioning.settings b/provisioning.settings
index 539d026..89c7f55 100644
--- a/provisioning.settings
+++ b/provisioning.settings
@@ -105,13 +105,6 @@ set(PECI_DEVICE "/dev/peci-default")
 #Time after which NM recognizes lack of readings or sensors. After this timeout NM sends appropriate logs and resets corresponding statistics.
 set(READING_AVAILABILITY_TIMEOUT_SEC 20)
 
-#If NM should use PSYS topology defined in PSYS_TOPOLOGY or auto detect which CPU's are PSYS roots.
-set(USE_MANUAL_PSYS_TOPOLOGY false)
-
-#List of CPU ids that are PSYS roots. Used if USE_MANUAL_PSYS_TOPOLOGY set to true.
-set(PSYS_TOPOLOGY "{0}")
-
-
 #Logger-----------------------------------------------------------------
 #The message severity, accepted values are: debug, info, warning, error, critical.
 set(LOG_LEVEL "info")
-- 
2.34.1

