From 51973c53bdc08a872128e4f766e0d12ef624852f Mon Sep 17 00:00:00 2001
From: Yaswanth <yaswanthsai@ami.com>
Date: Mon, 31 Jul 2023 14:02:39 +0530
Subject: [PATCH] Add DCMI command handler support

---
 nm-ipmi-lib/include/nm_cc.hpp       |   3 +-
 nm-ipmi-lib/include/nm_commands.hpp |  12 +-
 nm-ipmi-lib/include/utility.hpp     |  87 ++++++-
 nm-ipmi-lib/src/nm_commands.cpp     | 341 ++++++++++++++++++++++++++++
 4 files changed, 440 insertions(+), 3 deletions(-)

diff --git a/nm-ipmi-lib/include/nm_cc.hpp b/nm-ipmi-lib/include/nm_cc.hpp
index ea2a8d1..a23559c 100644
--- a/nm-ipmi-lib/include/nm_cc.hpp
+++ b/nm-ipmi-lib/include/nm_cc.hpp
@@ -29,6 +29,7 @@ namespace nmipmi
 constexpr ipmi::Cc ccInvalidComponentIdentifier = 0x80; // Invalid Component
                                                         // Identifier
 constexpr ipmi::Cc ccInvalidPolicyId = 0x80;            // Invalid Policy Id
+constexpr ipmi::Cc ccPowerLimitNotSet = 0x80;           // Power Limit not set							
 constexpr ipmi::Cc ccCommandNotSupported =
     0x81; // Command not supported in the current configuration. Returned when
           // PSU is configured as the power reading source
@@ -63,4 +64,4 @@ constexpr ipmi::Cc ccPoliciesCannotBeCreated =
           // configuration e.g., attempt to create predictive power limiting
           // policy in DC power domain
 
-} // namespace nmipmi
\ No newline at end of file
+} // namespace nmipmi
diff --git a/nm-ipmi-lib/include/nm_commands.hpp b/nm-ipmi-lib/include/nm_commands.hpp
index 8f4ad4a..2abe778 100644
--- a/nm-ipmi-lib/include/nm_commands.hpp
+++ b/nm-ipmi-lib/include/nm_commands.hpp
@@ -46,6 +46,16 @@ static constexpr ipmi::Cmd cmdSetTotalPowerBudget = 0xD0;
 static constexpr ipmi::Cmd cmdGetTotalPowerBudget = 0xD1;
 static constexpr ipmi::Cmd cmdGetLimitingPolicyId = 0xF2;
 } // namespace general
+
+namespace DCMI
+{
+static constexpr ipmi::Cmd cmdGetDcmiCapabInfo = 0x01;
+static constexpr ipmi::Cmd cmdGetPowerReading = 0x02;
+static constexpr ipmi::Cmd cmdGetPowerLimit = 0x03;
+static constexpr ipmi::Cmd cmdSetPowerLimit = 0x04;
+static constexpr ipmi::Cmd cmdActivatePowerLimit = 0x05;
+} // namespace DCMI
+
 } // namespace intel
 
 //-------------------------------------------------------------------
@@ -127,4 +137,4 @@ static const boost::container::flat_map<
         {intel::general::cmdGetLimitingPolicyId, kGetLimitingPolicyIdErr},
 };
 
-} // namespace nmipmi
\ No newline at end of file
+} // namespace nmipmi
diff --git a/nm-ipmi-lib/include/utility.hpp b/nm-ipmi-lib/include/utility.hpp
index 46b3984..61f9fb3 100644
--- a/nm-ipmi-lib/include/utility.hpp
+++ b/nm-ipmi-lib/include/utility.hpp
@@ -54,6 +54,16 @@ using StatDomainEnergyResponse =
                   uint1_t,  // MeasurementState
                   uint1_t>;
 
+using StatDCMIResponse = ipmi::RspType<uint16_t, // Current Power
+                                       uint16_t, // Minimum Power
+                                       uint16_t, // Maximum Power
+                                       uint16_t, // Average Power
+                                       uint32_t, // IPMI Timestamp
+                                       uint32_t, // Statistic Reporting Period
+                                       uint6_t,  // Reserved
+                                       uint1_t,  // Power Reading State
+                                       uint1_t>; // Reserved
+
 using StatDomainResponse = ipmi::RspType<uint16_t, // Current Value
                                          uint16_t, // Minimum Value
                                          uint16_t, // Maximum Value
@@ -325,7 +335,18 @@ enum class StatsMode
     perPolicyTrigger = 0x12,
 };
 
-static const std::map<StatsMode, std::string> statModeToDBusMap = {
+enum class DCMIMode
+{
+    sysPower = 0x01,
+    enhancedSysPower = 0x02,
+};
+
+static const std::map<uint8_t, std::string> DCMIModeToDBusMap = {
+    {types::enum_cast<uint8_t>(DCMIMode::sysPower), "sysPower"},
+    {types::enum_cast<uint8_t>(DCMIMode::enhancedSysPower), "enhancedSysPower"},
+};
+
+/*static const std::map<StatsMode, std::string> statModeToDBusMap = {
     {StatsMode::power, "Power"},
     {StatsMode::inletTemp, "Inlet temperature"},
     {StatsMode::throttling, "Throttling"},
@@ -335,6 +356,21 @@ static const std::map<StatsMode, std::string> statModeToDBusMap = {
     {StatsMode::perPolicyPower, "Power"},
     {StatsMode::energyAccumulator, "Energy accumulator"},
     {StatsMode::perPolicyTrigger, "Trigger"},
+};*/
+
+static const std::map<uint5_t, std::string> statModeToDBusMap = {
+    {types::enum_cast<uint5_t>(StatsMode::power), "Power"},
+    {types::enum_cast<uint5_t>(StatsMode::inletTemp), "Inlet temperature"},
+    {types::enum_cast<uint5_t>(StatsMode::throttling), "Throttling"},
+    {types::enum_cast<uint5_t>(StatsMode::volumetricAirflow),
+     "Volumetric airflow"},
+    {types::enum_cast<uint5_t>(StatsMode::outletTemp), "Outlet temperature"},
+    {types::enum_cast<uint5_t>(StatsMode::chassisPower), "Chassis power"},
+    {types::enum_cast<uint5_t>(StatsMode::perPolicyPower), "Power"},
+    {types::enum_cast<uint5_t>(StatsMode::perPolicyTrigger), "Trigger"},
+    //{types::enum_cast<uint5_t>(StatsMode::perPolicyThrottling), "Throttling"},
+    {types::enum_cast<uint5_t>(StatsMode::energyAccumulator),
+     "Energy accumulator"},
 };
 
 void policyStateToBitFlags(const int state, uint1_t& operationalState,
@@ -419,6 +455,55 @@ ipmi::Cc verifyGetNmStatisticsParameters(uint5_t mode, uint3_t reserved1,
     return ipmi::ccSuccess;
 }
 
+StatDCMIResponse responseDCMIStat(ipmi::Context::ptr ctx,
+                                  const std::string& statType, uint4_t domainId)
+{
+    uint1_t administrativeState = 0;
+    uint1_t measurementState = 0;
+
+    NmService nmService(ctx);
+    // get enablement status
+    if (const std::optional<bool> domainEn =
+            nmService.isDomainEnabled(domainId))
+    {
+        administrativeState = (*domainEn) ? 1 : 0;
+    }
+    else
+    {
+        LOGGER_ERR << "Cannot get domain Enabled state";
+        return ipmi::responseUnspecifiedError();
+    };
+
+    // getting statistics
+    boost::system::error_code ec;
+    NmStatistics nmStatistics;
+    const AllStatisticsValues allStats =
+        ctx->bus->yield_method_call<AllStatisticsValues>(
+            ctx->yield, ec, nmService.getServiceName(),
+            nmService.getDomainPath(domainId), kStatisticsInterface,
+            "GetStatistics");
+    if (const ipmi::Cc cc = getCc(ctx->cmd, ec))
+    {
+        return ipmi::response(cc);
+    }
+
+    if (allStats.find(statType) == allStats.end())
+    {
+        return ipmi::response(ccInvalidMode);
+    }
+    if (!parseStatValuesMap(allStats, statType, nmStatistics, measurementState))
+    {
+        LOGGER_ERR << "Cannot parse statistics";
+        return ipmi::responseUnspecifiedError();
+    }
+
+    return ipmi::responseSuccess(nmStatistics.currentValue,
+                                 nmStatistics.minValue, nmStatistics.maxValue,
+                                 nmStatistics.avgValue, nmStatistics.timestamp,
+                                 nmStatistics.statReportingPeriod, uint1_t(0),
+                                 measurementState, uint1_t(0));
+}
+
 StatPolicyResponse responsePolicyStat(ipmi::Context::ptr ctx, StatsMode mode,
                                       uint4_t domainId, uint8_t policyId)
 {
diff --git a/nm-ipmi-lib/src/nm_commands.cpp b/nm-ipmi-lib/src/nm_commands.cpp
index 3e0be9d..a045e33 100644
--- a/nm-ipmi-lib/src/nm_commands.cpp
+++ b/nm-ipmi-lib/src/nm_commands.cpp
@@ -1184,6 +1184,331 @@ ipmi::RspType<uint8_t> // Policy ID
     return ipmi::response(ccNoPolicyIsCurrentlyLimiting);
 }
 
+/**
+ * @brief Get Power Reading
+ *
+ * @param mode - Statistic Mode
+ * @param averageTimePeriods - Supported Rolling Average Time Periods
+ *
+ * @returns IPMI response
+ **/
+
+ipmi::RspType<uint16_t, // Current Power
+              uint16_t, // Minimum Power
+              uint16_t, // Maximum Power
+              uint16_t, // Average Power
+              uint32_t, // IPMI Time Stamp
+              uint32_t, // Statistics Reporting Time Period
+              uint6_t,  // Reserved
+              uint1_t,  // Power Reading State
+              uint1_t>  // Reserved
+    getPowerReading(ipmi::Context::ptr ctx, uint8_t mode,
+                    uint8_t averageTimePeriods, uint8_t reserved)
+{
+    LOG_ENTRY;
+
+    uint8_t policyId = 64;
+    uint8_t domainId = 0;
+
+    const auto& modePair = DCMIModeToDBusMap.find(mode);
+    if (reserved != 0 || modePair == DCMIModeToDBusMap.cend() ||
+        (mode == 0x01 && averageTimePeriods != 0x00) || mode == 0x02)
+    {
+        return ipmi::responseInvalidFieldRequest();
+    }
+
+    boost::system::error_code ec;
+    NmService nmService(ctx);
+    ipmi::Cc cc = nmService.verifyDomainAndPolicyPresence(domainId, policyId);
+    // get stats from domain
+    if (cc == ccInvalidDomainId)
+    {
+        return ipmi::response(cc);
+    }
+
+    std::string statType = statModeToDBusMap.at(0x01);
+    return responseDCMIStat(ctx, statType, domainId);
+}
+
+ipmi::RspType<uint16_t, // reserved
+              uint8_t,  // Exception Actions
+              uint16_t, // Requested Power Limit
+              uint32_t, // Correction Time
+              uint16_t, // reserved
+              uint32_t> // Statistics Sampling Period
+    responseGetDCMIPolicy(ipmi::Context::ptr ctx, const uint4_t& domainId,
+                          const uint8_t& policyId)
+{
+    LOG_ENTRY;
+    uint1_t sendAlert = 0;
+    uint1_t shutdown = 0;
+    uint8_t action = 0;
+    uint16_t targetLimit = 0;
+    uint32_t correctionTimeLimit = 0;
+    uint32_t statReportingPeriod = 0;
+
+    NmService nmService(ctx);
+
+    ipmi::PropertyMap propMap;
+    boost::system::error_code ec;
+    ec = getAllDbusProperties(ctx, nmService.getServiceName(),
+                              nmService.getPolicyPath(domainId, policyId),
+                              kPolicyAttributesInterface, propMap);
+    if (ec)
+    {
+        LOGGER_ERR << "Failed to getAll Policy properties, err: "
+                   << ec.message();
+        return ipmi::responseUnspecifiedError();
+    }
+    try
+    {
+        parseLimitException(std::get<int>(propMap.at("LimitException")),
+                            sendAlert, shutdown);
+        targetLimit = std::get<uint16_t>(propMap.at("Limit"));
+        correctionTimeLimit = std::get<uint32_t>(propMap.at("CorrectionInMs"));
+        statReportingPeriod =
+            std::get<uint16_t>(propMap.at("StatisticsReportingPeriod"));
+    }
+    catch (const std::exception& e)
+    {
+        LOGGER_ERR << "Error while parsing policy attributes, ex: " << e.what();
+        return ipmi::responseUnspecifiedError();
+    }
+
+    if (sendAlert && shutdown)
+    {
+        action = 0x01;
+    }
+    else if (sendAlert)
+    {
+        action = 0x11;
+    }
+    else
+    {
+        action = 0x00;
+    }
+
+    if (!(*nmService.isNmEnabled()) ||
+        !(*nmService.isDomainEnabled(domainId)) ||
+        !(*nmService.isPolicyEnabled(domainId, policyId)))
+    {
+        return ipmi::response(ccPowerLimitNotSet, 0, action, targetLimit,
+                              correctionTimeLimit, 0, statReportingPeriod);
+    }
+
+    return ipmi::responseSuccess(0, action, targetLimit, correctionTimeLimit, 0,
+                                 statReportingPeriod);
+}
+
+/**
+ * @brief Get Power Limit
+ *
+ * @param groupExten - Group Extension Identification
+ * @param reserved
+ *
+ * @returns IPMI response
+ **/
+
+ipmi::RspType<uint16_t, // reserved
+              uint8_t,  // Exception Actions
+              uint16_t, // Requested Power Limit
+              uint32_t, // Correction Time
+              uint16_t, // reserved
+              uint16_t> // Statistics Sampling Period
+    getPowerLimit(ipmi::Context::ptr ctx, uint16_t reserved)
+{
+    LOG_ENTRY;
+
+    uint8_t policyId = 64;
+    uint8_t domainId = 0;
+
+    if (reserved != 0)
+    {
+        return ipmi::responseInvalidFieldRequest();
+    }
+    boost::system::error_code ec;
+    ipmi::ObjectValueTree objMap;
+
+    NmService nmService(ctx);
+    const ipmi::Cc cc =
+        nmService.verifyDomainAndPolicyPresence(domainId, policyId);
+    if (cc == ccInvalidDomainId || cc == ccInvalidPolicyId)
+    {
+        return ipmi::response(ccPowerLimitNotSet, 0, 0, 0, 0, 0, 0);
+    }
+
+    return responseGetDCMIPolicy(ctx, domainId, policyId);
+}
+
+/**
+ * @brief Set Power Limit
+ *
+ * @param groupExten - Group Extension Identification
+ * @param reserved
+ * @param exceptionActions
+ * @param powerLimit
+ * @param correctionTime
+ * @param reserved
+ * @param statSamplingPeriod
+ *
+ * @returns IPMI response
+ **/
+
+ipmi::RspType<> setPowerLimit(ipmi::Context::ptr ctx, uint24_t reserved1,
+                              uint8_t exceptionActions, uint16_t powerLimit,
+                              uint32_t correctionTime, uint16_t reserved2,
+                              uint16_t statSamplingPeriod)
+{
+    LOG_ENTRY;
+
+    if (reserved1 != 0 || reserved2 != 0 || exceptionActions >= 0x12)
+    {
+        return ipmi::responseInvalidFieldRequest();
+    }
+
+    boost::system::error_code ec;
+    int limitExc = 0;
+    const PolicySuspendPeriods suspendPeriods;
+    const PolicyThresholds thresholds;
+    const uint8_t componentId = kComponentIdAll;
+    uint8_t domainId = 0;
+    uint8_t policyId = 64;
+
+    if (exceptionActions == 0x00)
+    {
+        limitExc = 0;
+    }
+    else if (exceptionActions == 0x01)
+    {
+        limitExc = 3;
+    }
+    else if (exceptionActions == 0x11)
+    {
+        limitExc = 2;
+    }
+
+    const auto policyParamsTuple =
+        std::make_tuple(correctionTime,           // 0 - correctionInMs
+                        powerLimit,               // 1 - limit
+                        statSamplingPeriod,       // 2 - statReportingPeriod
+                        0,                        // 3 - policyStorage
+                        0,                        // 4 - powerCorrectionType
+                        limitExc,                 // 5 - limitException
+                        suspendPeriods,           // 6 - suspendPeriods
+                        thresholds,               // 7 - thresholds
+                        componentId,              // 8 - componentId
+                        static_cast<uint16_t>(0), // 9- triggerLimit
+                        "AlwaysOn"                // 10- triggerType
+        );
+
+    NmService nmService(ctx);
+    ipmi::Cc cc = nmService.verifyDomainAndPolicyPresence(domainId, policyId);
+    if (cc == ccInvalidDomainId)
+    {
+        return ipmi::responseUnspecifiedError();
+    }
+
+    if (cc == ccInvalidPolicyId)
+    {
+        // Create action
+        if (!isPolicyIdInRange(ctx, policyId))
+        {
+            return ipmi::responseUnspecifiedError();
+        }
+	auto policyPath =
+            ctx->bus->yield_method_call<sdbusplus::message::object_path>(
+                ctx->yield, ec, nmService.getServiceName(),
+                nmService.getDomainPath(domainId), kPolicyManagerInterface,
+                "CreateWithId", std::to_string(policyId), policyParamsTuple);
+        cc = getCc(ctx->cmd, ec);
+        if (cc)
+        {
+            return ipmi::response(cc);
+        }
+        LOGGER_INFO << "Policy created: " << std::string{policyPath};
+    }
+    else
+    {
+        // Update action
+        ctx->bus->yield_method_call<void>(
+            ctx->yield, ec, nmService.getServiceName(),
+            nmService.getPolicyPath(domainId, policyId),
+            kPolicyAttributesInterface, "Update", policyParamsTuple);
+        cc = getCc(ctx->cmd, ec);
+        if (cc)
+        {
+            return ipmi::response(cc);
+        }
+        LOGGER_INFO << "Policy updated: "
+                    << nmService.getPolicyPath(domainId, policyId);
+    }
+    ec.clear();
+    ec = setDbusProperty(ctx, nmService.getServiceName(),
+                         nmService.getPolicyPath(domainId, policyId).c_str(),
+                         kObjectEnableInterface, "Enabled", true);
+
+    if (ec)
+    {
+        LOGGER_ERR << "Failed to enable Policy: "
+                   << nmService.getPolicyPath(domainId, policyId)
+                   << ", error: " << ec.message();
+        return ipmi::responseUnspecifiedError();
+    }
+
+    return ipmi::responseSuccess();
+}
+
+/**
+ * @brief Activate/Deactivate Power Limit
+ *
+ * @param groupExten - Group Extension Identification
+ * @param powerLimitActivation
+ * @param reserved
+ *
+ *  @returns IPMI response
+ **/
+
+ipmi::RspType<> activatePowerLimit(ipmi::Context::ptr ctx,
+                                   uint8_t powerLimitActivation,
+                                   uint16_t reserved)
+{
+    LOG_ENTRY;
+
+    uint8_t domainId = 0;
+    uint8_t policyId = 64;
+
+    if (reserved != 0)
+    {
+        return ipmi::responseInvalidFieldRequest();
+    }
+
+    NmService nmService(ctx);
+    ipmi::Cc cc = nmService.verifyDomainAndPolicyPresence(domainId, policyId);
+
+    std::string pathToObjectToSetState;
+    bool enableObject;
+
+    if (cc != ipmi::ccSuccess)
+    {
+        return ipmi::response(ccPowerLimitNotSet);
+    }
+    pathToObjectToSetState = nmService.getPolicyPath(domainId, policyId);
+    enableObject = powerLimitActivation ? true : false;
+
+    // Try to set state for NodeManager, Domain or Policy object
+    boost::system::error_code ec =
+        setDbusProperty(ctx, nmService.getServiceName(), pathToObjectToSetState,
+                        kObjectEnableInterface, "Enabled", enableObject);
+    if (ec)
+    {
+        LOGGER_ERR << "Failed to disable/enable Node Manager component, error: "
+                   << ec.message() << ", path: " << pathToObjectToSetState;
+        return ipmi::responseUnspecifiedError();
+    }
+
+    return ipmi::responseSuccess();
+}
+
 /**
  * @brief Registration of Node Manager IPMI commands handlers
  **/
@@ -1242,5 +1567,21 @@ void registerNmIpmiFunctions(void)
     ipmi::registerOemHandler(ipmi::prioOemBase, intel::oem::intelOemNumber,
                              intel::general::cmdGetLimitingPolicyId,
                              ipmi::Privilege::User, getLimitingPolicyId);
+
+    ipmi::registerGroupHandler(ipmi::prioOpenBmcBase, ipmi::groupDCMI,
+                               intel::DCMI::cmdGetPowerReading,
+                               ipmi::Privilege::User, getPowerReading);
+
+    ipmi::registerGroupHandler(ipmi::prioOpenBmcBase, ipmi::groupDCMI,
+                               intel::DCMI::cmdGetPowerLimit,
+                               ipmi::Privilege::User, getPowerLimit);
+
+    ipmi::registerGroupHandler(ipmi::prioOpenBmcBase, ipmi::groupDCMI,
+                               intel::DCMI::cmdSetPowerLimit,
+                               ipmi::Privilege::Admin, setPowerLimit);
+
+    ipmi::registerGroupHandler(ipmi::prioOpenBmcBase, ipmi::groupDCMI,
+                               intel::DCMI::cmdActivatePowerLimit,
+                               ipmi::Privilege::Admin, activatePowerLimit);
 }
 } // namespace nmipmi
-- 
2.34.1

