From 9e59d6bbd017d3e9a857cfaa605724eb8c6baa05 Mon Sep 17 00:00:00 2001
From: arjuncr <arjuncr@ami.com>
Date: Sun, 23 Apr 2023 17:00:14 +0530
Subject: [PATCH] Adding missing dbus properties for cups

Signed-off-by: arjuncr <arjuncr@ami.com>
---
 src/dbus/dbus.hpp   |  8 ++++++++
 src/dbus/sensor.hpp | 40 +++++++++++++++++++++++++++++++++-------
 2 files changed, 41 insertions(+), 7 deletions(-)

diff --git a/src/dbus/dbus.hpp b/src/dbus/dbus.hpp
index 2281342..08e590c 100644
--- a/src/dbus/dbus.hpp
+++ b/src/dbus/dbus.hpp
@@ -40,6 +40,14 @@ static constexpr auto SensorPath = "/xyz/openbmc_project/sensors/utilization/";
 static constexpr auto AssociationIface =
     "xyz.openbmc_project.Association.Definitions";
 
+constexpr const char* availableInterfaceName =
+    "xyz.openbmc_project.State.Decorator.Availability";
+constexpr const char* operationalInterfaceName =
+    "xyz.openbmc_project.State.Decorator.OperationalStatus";
+constexpr const char* ThresholdCriticalInterfaceName =
+    "xyz.openbmc_project.Sensor.Threshold.Critical";
+constexpr const char* ThresholdWarningInterfaceName =
+    "xyz.openbmc_project.Sensor.Threshold.Warning";
 } // namespace open_bmc
 
 std::string subObject(const std::string& name)
diff --git a/src/dbus/sensor.hpp b/src/dbus/sensor.hpp
index c6a9378..9271006 100644
--- a/src/dbus/sensor.hpp
+++ b/src/dbus/sensor.hpp
@@ -62,6 +62,10 @@ class Sensor
     std::shared_ptr<sdbusplus::asio::dbus_interface> iface;
     std::shared_ptr<sdbusplus::asio::dbus_interface> association;
     std::shared_ptr<base::Sensor> sensor;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> availableInterface;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> operationalInterface;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ThresholdCritical;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ThresholdWarning;
     const std::string path;
     const std::string chassisPath;
 
@@ -70,14 +74,32 @@ class Sensor
 
     void setupSensor()
     {
-        LOG_DEBUG << "Populating " << dbus::open_bmc::SensorIface;
+	LOG_DEBUG << "Populating " << dbus::open_bmc::SensorIface;
 
-        iface = objServer->add_interface(path, dbus::open_bmc::SensorIface);
+	iface = objServer->add_interface(path, dbus::open_bmc::SensorIface);
 
-        iface->register_property("Value", double(0));
-        iface->register_property("MinValue", double(0));
-        iface->register_property("MaxValue", double(100));
-        iface->register_property("Unit", std::string_view("Percent").data());
+	iface->register_property("Value", double(0));
+	iface->register_property("MinValue", double(0));
+	iface->register_property("MaxValue", double(100));
+	iface->register_property("Unit", std::string_view("Percent").data());
+
+	availableInterface = objServer->add_interface(path, dbus::open_bmc::availableInterfaceName);
+	availableInterface->register_property("Available", true);
+
+	operationalInterface = objServer->add_interface(path, dbus::open_bmc::operationalInterfaceName);
+	operationalInterface->register_property("Functional", true);
+
+	ThresholdCritical = objServer->add_interface(path, dbus::open_bmc::ThresholdCriticalInterfaceName);
+	ThresholdCritical->register_property("CriticalAlarmHigh", false);
+	ThresholdCritical->register_property("CriticalAlarmLow", false);
+	ThresholdCritical->register_property("CriticalHigh", double(100));
+	ThresholdCritical->register_property("CriticalLow", false);
+
+	ThresholdWarning = objServer->add_interface(path, dbus::open_bmc::ThresholdWarningInterfaceName);
+	ThresholdWarning->register_property("WarningAlarmHigh", false);
+	ThresholdWarning->register_property("WarningAlarmLow", false);
+	ThresholdWarning->register_property("WarningHigh", double(95));
+	ThresholdWarning->register_property("WarningLow", false);
 
         sensor->registerObserver(
             [name{sensor->getName()},
@@ -102,7 +124,11 @@ class Sensor
                 }
             });
 
-        iface->initialize();
+	iface->initialize();
+	availableInterface->initialize();
+	operationalInterface->initialize();
+	ThresholdWarning->initialize();
+	ThresholdCritical->initialize();
     }
 
     void setupAssociation()
-- 
2.34.1

