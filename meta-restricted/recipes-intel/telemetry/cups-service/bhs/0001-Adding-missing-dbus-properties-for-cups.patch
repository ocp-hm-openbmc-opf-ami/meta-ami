From 61c06068bdfd24909e5e106ecf7b17f1627c7d36 Mon Sep 17 00:00:00 2001
From: arjuncr <arjuncr@ami.com>
Date: Sun, 23 Apr 2023 18:03:57 +0530
Subject: [PATCH] Adding missing dbus properties for cups

Signed-off-by: arjuncr <arjuncr@ami.com>
---
 src/dbus/dbus.hpp   |  8 ++++++++
 src/dbus/sensor.hpp | 27 +++++++++++++++++++++++++++
 2 files changed, 35 insertions(+)

diff --git a/src/dbus/dbus.hpp b/src/dbus/dbus.hpp
index 4f4f3ea..260b3dc 100644
--- a/src/dbus/dbus.hpp
+++ b/src/dbus/dbus.hpp
@@ -41,6 +41,14 @@ static constexpr auto SensorObject = "/xyz/openbmc_project/sensors";
 static constexpr auto AssociationIface =
     "xyz.openbmc_project.Association.Definitions";
 
+constexpr const char* availableInterfaceName =
+    "xyz.openbmc_project.State.Decorator.Availability";
+constexpr const char* operationalInterfaceName =
+    "xyz.openbmc_project.State.Decorator.OperationalStatus";
+constexpr const char* ThresholdCriticalInterfaceName =
+    "xyz.openbmc_project.Sensor.Threshold.Critical";
+constexpr const char* ThresholdWarningInterfaceName =
+    "xyz.openbmc_project.Sensor.Threshold.Warning";
 } // namespace open_bmc
 
 std::string subObject(const std::string& name)
diff --git a/src/dbus/sensor.hpp b/src/dbus/sensor.hpp
index c6a9378..0b84b4c 100644
--- a/src/dbus/sensor.hpp
+++ b/src/dbus/sensor.hpp
@@ -62,6 +62,11 @@ class Sensor
     std::shared_ptr<sdbusplus::asio::dbus_interface> iface;
     std::shared_ptr<sdbusplus::asio::dbus_interface> association;
     std::shared_ptr<base::Sensor> sensor;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> availableInterface;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> operationalInterface;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ThresholdCritical;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ThresholdWarning;
+
     const std::string path;
     const std::string chassisPath;
 
@@ -79,6 +84,24 @@ class Sensor
         iface->register_property("MaxValue", double(100));
         iface->register_property("Unit", std::string_view("Percent").data());
 
+	availableInterface = objServer->add_interface(path, dbus::open_bmc::availableInterfaceName);
+	availableInterface->register_property("Available", true);
+
+	operationalInterface = objServer->add_interface(path, dbus::open_bmc::operationalInterfaceName);
+	operationalInterface->register_property("Functional", true);
+
+	ThresholdCritical = objServer->add_interface(path, dbus::open_bmc::ThresholdCriticalInterfaceName);
+	ThresholdCritical->register_property("CriticalAlarmHigh", false);
+	ThresholdCritical->register_property("CriticalAlarmLow", false);
+	ThresholdCritical->register_property("CriticalHigh", double(100));
+	ThresholdCritical->register_property("CriticalLow", false);
+
+	ThresholdWarning = objServer->add_interface(path, dbus::open_bmc::ThresholdWarningInterfaceName);
+	ThresholdWarning->register_property("WarningAlarmHigh", false);
+	ThresholdWarning->register_property("WarningAlarmLow", false);
+	ThresholdWarning->register_property("WarningHigh", double(95));
+	ThresholdWarning->register_property("WarningLow", false);
+
         sensor->registerObserver(
             [name{sensor->getName()},
              iface{std::weak_ptr<typeof(*iface)>(iface)}](
@@ -103,6 +126,10 @@ class Sensor
             });
 
         iface->initialize();
+	availableInterface->initialize();
+	operationalInterface->initialize();
+	ThresholdWarning->initialize();
+	ThresholdCritical->initialize();
     }
 
     void setupAssociation()
-- 
2.34.1

