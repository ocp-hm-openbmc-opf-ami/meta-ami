From 555d71fd7ca551d0fbef3f0d088ac69fb3bf4fbd Mon Sep 17 00:00:00 2001
From: Yaswanth <yaswanthsai@ami.com>
Date: Thu, 10 Aug 2023 16:27:01 +0530
Subject: [PATCH] Dev Value Change for DIMMMTR

---
 src/peci/abi.hpp                    | 104 ++++++++++++----------------
 src/peci/metrics/memory.hpp         |  34 ++++-----
 src/peci/metrics/memory_factory.hpp |  46 +++++++-----
 src/peci/transport/adapter.hpp      |  54 ++++++++++++---
 4 files changed, 138 insertions(+), 100 deletions(-)

diff --git a/src/peci/abi.hpp b/src/peci/abi.hpp
index ab7513d..b0845de 100644
--- a/src/peci/abi.hpp
+++ b/src/peci/abi.hpp
@@ -39,6 +39,7 @@ static constexpr uint32_t limit = 8;
 static constexpr uint32_t minAddress = 0x30;
 static constexpr uint8_t minIoDiesCount = 2;
 static constexpr uint8_t minComputeDiesCount = 1;
+static constexpr uint8_t maxComputeDiesCount = 3;
 static constexpr size_t computeDieBitIdx = 3;
 
 static inline bool isPrimary(const uint32_t address)
@@ -541,6 +542,7 @@ static constexpr std::array<
 static constexpr std::array<std::tuple<uint16_t, uint16_t>, 4>
     controllersSampleIdxMap = {
         {{0x00, 0xE0}, {0x00, 0xE1}, {0x00, 0xE2}, {0x00, 0xE3}}};
+static constexpr std::size_t memorySamplesSize = controllersSampleIdxMap.size();
 
 namespace hbm
 {
@@ -555,7 +557,7 @@ static constexpr std::array<std::tuple<uint16_t, uint16_t>, 20>
          {0x00, 0x184}, {0x00, 0x185}, {0x00, 0x186}, {0x00, 0x187},
          {0x00, 0x188}, {0x00, 0x189}, {0x00, 0x18A}, {0x00, 0x18B},
          {0x00, 0x18C}, {0x00, 0x18D}, {0x00, 0x18E}, {0x00, 0x18F}}};
-
+static constexpr std::size_t memorySamplesSize = controllersSampleIdxMap.size();
 } // namespace hbm
 
 namespace hbmonly
@@ -577,7 +579,7 @@ static constexpr std::array<std::tuple<uint16_t, uint16_t>, 16>
                                 {0x00, 0x18D},
                                 {0x00, 0x18E},
                                 {0x00, 0x18F}}};
-
+static constexpr std::size_t memorySamplesSize = controllersSampleIdxMap.size();
 } // namespace hbmonly
 
 } // namespace spr
@@ -615,6 +617,8 @@ namespace emr = spr;
 
 namespace gnr
 {
+static constexpr unsigned freqRefclkMultiplier = 2;
+
 enum DimmOffset
 {
     ch0Dimm0 = 0xC0C,
@@ -629,57 +633,31 @@ enum CDieIdx
 };
 
 static constexpr std::array<
-    std::tuple<uint8_t, uint8_t, DimmOffset, uint8_t, CDieIdx>, 3 * 16>
-    channelsMap = {{{0, 0, DimmOffset::ch0Dimm0, 0, CDieIdx::cDie0}, // cDie0
-                    {0, 0, DimmOffset::ch0Dimm1, 0, CDieIdx::cDie0},
-                    {0, 1, DimmOffset::ch0Dimm0, 1, CDieIdx::cDie0},
-                    {0, 1, DimmOffset::ch0Dimm1, 1, CDieIdx::cDie0},
-                    {0, 2, DimmOffset::ch0Dimm0, 2, CDieIdx::cDie0},
-                    {0, 2, DimmOffset::ch0Dimm1, 2, CDieIdx::cDie0},
-                    {0, 3, DimmOffset::ch0Dimm0, 3, CDieIdx::cDie0},
-                    {0, 3, DimmOffset::ch0Dimm1, 3, CDieIdx::cDie0},
-                    {0, 4, DimmOffset::ch0Dimm0, 4, CDieIdx::cDie0},
-                    {0, 4, DimmOffset::ch0Dimm1, 4, CDieIdx::cDie0},
-                    {0, 5, DimmOffset::ch0Dimm0, 5, CDieIdx::cDie0},
-                    {0, 5, DimmOffset::ch0Dimm1, 5, CDieIdx::cDie0},
-                    {0, 6, DimmOffset::ch0Dimm0, 6, CDieIdx::cDie0},
-                    {0, 6, DimmOffset::ch0Dimm1, 6, CDieIdx::cDie0},
-                    {0, 7, DimmOffset::ch0Dimm0, 7, CDieIdx::cDie0},
-                    {0, 7, DimmOffset::ch0Dimm1, 7, CDieIdx::cDie0},
-
-                    {1, 0, DimmOffset::ch0Dimm0, 8, CDieIdx::cDie1}, // cDie1
-                    {1, 0, DimmOffset::ch0Dimm1, 8, CDieIdx::cDie1},
-                    {1, 1, DimmOffset::ch0Dimm0, 9, CDieIdx::cDie1},
-                    {1, 1, DimmOffset::ch0Dimm1, 9, CDieIdx::cDie1},
-                    {1, 2, DimmOffset::ch0Dimm0, 10, CDieIdx::cDie1},
-                    {1, 2, DimmOffset::ch0Dimm1, 10, CDieIdx::cDie1},
-                    {1, 3, DimmOffset::ch0Dimm0, 11, CDieIdx::cDie1},
-                    {1, 3, DimmOffset::ch0Dimm1, 11, CDieIdx::cDie1},
-                    {1, 4, DimmOffset::ch0Dimm0, 12, CDieIdx::cDie1},
-                    {1, 4, DimmOffset::ch0Dimm1, 12, CDieIdx::cDie1},
-                    {1, 5, DimmOffset::ch0Dimm0, 13, CDieIdx::cDie1},
-                    {1, 5, DimmOffset::ch0Dimm1, 13, CDieIdx::cDie1},
-                    {1, 6, DimmOffset::ch0Dimm0, 14, CDieIdx::cDie1},
-                    {1, 6, DimmOffset::ch0Dimm1, 14, CDieIdx::cDie1},
-                    {1, 7, DimmOffset::ch0Dimm0, 15, CDieIdx::cDie1},
-                    {1, 7, DimmOffset::ch0Dimm1, 15, CDieIdx::cDie1},
-
-                    {2, 0, DimmOffset::ch0Dimm0, 16, CDieIdx::cDie2}, // cDie2
-                    {2, 0, DimmOffset::ch0Dimm1, 16, CDieIdx::cDie2},
-                    {2, 1, DimmOffset::ch0Dimm0, 17, CDieIdx::cDie2},
-                    {2, 1, DimmOffset::ch0Dimm1, 17, CDieIdx::cDie2},
-                    {2, 2, DimmOffset::ch0Dimm0, 18, CDieIdx::cDie2},
-                    {2, 2, DimmOffset::ch0Dimm1, 18, CDieIdx::cDie2},
-                    {2, 3, DimmOffset::ch0Dimm0, 19, CDieIdx::cDie2},
-                    {2, 3, DimmOffset::ch0Dimm1, 19, CDieIdx::cDie2},
-                    {2, 4, DimmOffset::ch0Dimm0, 20, CDieIdx::cDie2},
-                    {2, 4, DimmOffset::ch0Dimm1, 20, CDieIdx::cDie2},
-                    {2, 5, DimmOffset::ch0Dimm0, 21, CDieIdx::cDie2},
-                    {2, 5, DimmOffset::ch0Dimm1, 21, CDieIdx::cDie2},
-                    {2, 6, DimmOffset::ch0Dimm0, 22, CDieIdx::cDie2},
-                    {2, 6, DimmOffset::ch0Dimm1, 22, CDieIdx::cDie2},
-                    {2, 7, DimmOffset::ch0Dimm0, 23, CDieIdx::cDie2},
-                    {2, 7, DimmOffset::ch0Dimm1, 23, CDieIdx::cDie2}}};
+    std::tuple<uint8_t, uint8_t, DimmOffset, uint8_t, CDieIdx>, 2 * 12>
+    channelsMap = {{{2, 0, DimmOffset::ch0Dimm0, 0, CDieIdx::cDie0}, // cDie0
+                    {2, 0, DimmOffset::ch0Dimm1, 0, CDieIdx::cDie0},
+                    {2, 1, DimmOffset::ch0Dimm0, 1, CDieIdx::cDie0},
+                    {2, 1, DimmOffset::ch0Dimm1, 1, CDieIdx::cDie0},
+                    {2, 2, DimmOffset::ch0Dimm0, 2, CDieIdx::cDie0},
+                    {2, 2, DimmOffset::ch0Dimm1, 2, CDieIdx::cDie0},
+                    {2, 3, DimmOffset::ch0Dimm0, 3, CDieIdx::cDie0},
+                    {2, 3, DimmOffset::ch0Dimm1, 3, CDieIdx::cDie0},
+                    {2, 4, DimmOffset::ch0Dimm0, 4, CDieIdx::cDie0},
+                    {2, 4, DimmOffset::ch0Dimm1, 4, CDieIdx::cDie0},
+                    {2, 5, DimmOffset::ch0Dimm0, 5, CDieIdx::cDie0},
+                    {2, 5, DimmOffset::ch0Dimm1, 5, CDieIdx::cDie0},
+                    {2, 6, DimmOffset::ch0Dimm0, 6, CDieIdx::cDie0},
+                    {2, 6, DimmOffset::ch0Dimm1, 6, CDieIdx::cDie0},
+                    {2, 7, DimmOffset::ch0Dimm0, 7, CDieIdx::cDie0},
+                    {2, 7, DimmOffset::ch0Dimm1, 7, CDieIdx::cDie0},
+                    {3, 0, DimmOffset::ch0Dimm0, 8, CDieIdx::cDie1}, // cDie1
+                    {3, 0, DimmOffset::ch0Dimm1, 8, CDieIdx::cDie1},
+                    {3, 1, DimmOffset::ch0Dimm0, 9, CDieIdx::cDie1},
+                    {3, 1, DimmOffset::ch0Dimm1, 9, CDieIdx::cDie1},
+                    {3, 2, DimmOffset::ch0Dimm0, 10, CDieIdx::cDie1},
+                    {3, 2, DimmOffset::ch0Dimm1, 10, CDieIdx::cDie1},
+                    {3, 3, DimmOffset::ch0Dimm0, 11, CDieIdx::cDie1},
+                    {3, 3, DimmOffset::ch0Dimm1, 11, CDieIdx::cDie1}}};
 
 static constexpr std::array<std::tuple<uint16_t, uint16_t>, 8>
     controllersSampleIdxMap = {{{0x00, 89},
@@ -690,7 +668,9 @@ static constexpr std::array<std::tuple<uint16_t, uint16_t>, 8>
                                 {0x00, 94},
                                 {0x00, 95},
                                 {0x00, 96}}};
-static constexpr auto metricReadWriteIdxStep = 8;
+static constexpr std::size_t memorySamplesSize =
+    cpu::maxComputeDiesCount * controllersSampleIdxMap.size();
+static constexpr uint8_t wrSampleIdxOffset = 8;
 
 namespace hbm
 {
@@ -932,9 +912,9 @@ struct GetCpuBusNumber
     EndpointConfigPci payload;
 };
 
-struct GetS10BusNumber
+struct GetS8BusNumber
 {
-    GetS10BusNumber(uint32_t cpuId)
+    GetS8BusNumber(uint32_t cpuId)
     {
         switch (cpu::toModel(cpuId))
         {
@@ -1214,7 +1194,7 @@ struct GetCapabilityRegister
 
 struct GetMemoryFreq
 {
-    GetMemoryFreq(uint32_t cpuId, uint8_t domainId)
+    GetMemoryFreq(uint32_t cpuId)
     {
         switch (cpu::toModel(cpuId))
         {
@@ -1223,6 +1203,14 @@ struct GetMemoryFreq
             case cpu::model::emr:
                 payload = {EndpointConfigExtHeaderPciLocal, 0x98, 1, 30, 31, 0};
                 break;
+	    default:
+                throw PECI_EXCEPTION("Unhandled");
+        }
+    }
+    GetMemoryFreq(uint32_t cpuId, uint8_t domainId)
+    {
+        switch (cpu::toModel(cpuId))
+        {
             case cpu::model::gnr:
                 [[fallthrough]];
             case cpu::model::srf:
@@ -1393,7 +1381,7 @@ struct GetCpuBusNumber
     uint8_t reserved;
 };
 
-struct GetS10BusNumber
+struct GetS8BusNumber
 {
     uint8_t compCode;
     uint8_t busNumberN0;
diff --git a/src/peci/metrics/memory.hpp b/src/peci/metrics/memory.hpp
index b0a3963..8ddd855 100644
--- a/src/peci/metrics/memory.hpp
+++ b/src/peci/metrics/memory.hpp
@@ -40,12 +40,12 @@ namespace metrics
 constexpr std::size_t getMemorySamplesSize()
 {
     std::array<std::size_t, 6> sizes = {
-        abi::memory::spr::controllersSampleIdxMap.size(),
-        abi::memory::spr::hbm::controllersSampleIdxMap.size(),
-        abi::memory::spr::hbmonly::controllersSampleIdxMap.size(),
-        abi::memory::emr::controllersSampleIdxMap.size(),
-        abi::memory::gnr::controllersSampleIdxMap.size(),
-        abi::memory::srf::controllersSampleIdxMap.size()};
+        abi::memory::spr::memorySamplesSize,
+        abi::memory::spr::hbm::memorySamplesSize,
+        abi::memory::spr::hbmonly::memorySamplesSize,
+        abi::memory::emr::memorySamplesSize,
+        abi::memory::gnr::memorySamplesSize,
+        abi::memory::srf::memorySamplesSize};
     return *std::max_element(sizes.begin(), sizes.end());
 }
 
@@ -219,7 +219,8 @@ class Memory
         const std::array<MemoryController, N>& controllersSampleIdxMap)
     {
         static_assert(
-            utils::std_array_size<decltype(controllersSampleIdxMap)> <=
+            (cpu::maxComputeDiesCount *
+             utils::std_array_size<decltype(controllersSampleIdxMap)>) <=
                 utils::std_array_size<decltype(samples)>,
             "Size mismatch");
 
@@ -234,19 +235,20 @@ class Memory
                                   std::to_string(index);
                 uint64_t rdCounter = 0;
                 uint64_t wrCounter = 0;
+		uint16_t rdSampleIdx = sampleIdx;
+                uint16_t wrSampleIdx = rdSampleIdx + abi::memory::gnr::wrSampleIdxOffset;
 
-                // reads
-                if (!peciAdapter->getTelemetrySample(
-                        address, aggregatorIdx, sampleIdx, domainId, rdCounter))
-                {
+
+                if (!peciAdapter->getTelemetrySample(address, aggregatorIdx,
+                                                     rdSampleIdx, domainId,
+                                                     rdCounter))
+		{
                     rdCounter = 0;
                 }
 
-                // writes
-                if (!peciAdapter->getTelemetrySample(
-                        address, aggregatorIdx,
-                        sampleIdx + abi::memory::gnr::metricReadWriteIdxStep,
-                        domainId, wrCounter))
+                if (!peciAdapter->getTelemetrySample(address, aggregatorIdx,
+                                                     wrSampleIdx, domainId,
+                                                     wrCounter))
                 {
                     wrCounter = 0;
                 }
diff --git a/src/peci/metrics/memory_factory.hpp b/src/peci/metrics/memory_factory.hpp
index ab57706..7630c52 100644
--- a/src/peci/metrics/memory_factory.hpp
+++ b/src/peci/metrics/memory_factory.hpp
@@ -47,21 +47,22 @@ class MemoryFactory
     {
         try
         {
+	    uint32_t frequency = 0;
             if (cpu::toModel(cpuId) == cpu::model::gnr ||
                 cpu::toModel(cpuId) == cpu::model::srf)
             {
-                uint8_t busNumber = detectS10BusNumber(address, cpuId);
-                cpuBusNumber = busNumber;
-            }
-            auto [dimmCount, channelCount] =
-                detectDimmPopulation(address, cpuId, cpuBusNumber, cDieList);
+                cpuBusNumber = detectS8BusNumber(address, cpuId);
+                frequency = detectFrequency(address, cpuId, cDieList[0]);
 
-            uint32_t frequency = 0;
-            if (cDieList.size() >= 1)
+            }
+            else
             {
-                frequency = detectFrequency(address, cpuId, cDieList[0]);
+                frequency = detectFrequency(address, cpuId);
             }
 
+	    auto [dimmCount, channelCount] =
+                detectDimmPopulation(address, cpuId, cpuBusNumber, cDieList);
+
             abi::memory::HbmMode hbmMode = abi::memory::HbmMode::none;
             if (cpu::toModel(cpuId) == cpu::model::spr)
             {
@@ -84,13 +85,13 @@ class MemoryFactory
   private:
     std::shared_ptr<peci::transport::Adapter> peciAdapter;
 
-    uint8_t detectS10BusNumber(uint8_t address, uint32_t cpuId)
+    uint8_t detectS8BusNumber(uint8_t address, uint32_t cpuId)
     {
         uint8_t busNumber;
 
-        if (!peciAdapter->getS10BusNumber(address, cpuId, busNumber))
+        if (!peciAdapter->getS8BusNumber(address, cpuId, busNumber))
         {
-            throw PECI_EXCEPTION_ADDR(address, "getS10BusNumber() failed");
+            throw PECI_EXCEPTION_ADDR(address, "getS8BusNumber() failed");
         }
 
         return busNumber;
@@ -138,7 +139,7 @@ class MemoryFactory
             bool dimmPopulated = false;
             uint8_t domainId = 0;
 
-            if (idx < cDieIds.size())
+            if (idx <= abi::memory::gnr::CDieIdx::cDie2)
             {
                 domainId = cDieIds[idx];
             }
@@ -151,10 +152,11 @@ class MemoryFactory
                     address, cpuId, cpuBusNumber, static_cast<uint8_t>(dev),
                     func, static_cast<uint32_t>(reg), domainId, dimmPopulated))
             {
-                LOG_WARNING << "isDimmPopulated failed for Dev: "
-                            << static_cast<int>(dev)
-                            << " Fun: " << static_cast<int>(func)
-                            << " Reg:" << utils::toHex(reg);
+                // ignoring - some of the channels can be disabled
+                LOG_DEBUG << "isDimmPopulated failed for Dev: "
+                          << static_cast<int>(dev)
+                          << " Fun: " << static_cast<int>(func)
+                          << " Reg:" << utils::toHex(reg);
             }
 
             if (dimmPopulated)
@@ -198,6 +200,18 @@ class MemoryFactory
         return {dimmCount, static_cast<uint8_t>(channels.size())};
     }
 
+     uint32_t detectFrequency(uint8_t address, uint32_t cpuId) const
+    {
+        uint32_t frequency = 0;
+
+        if (!peciAdapter->getMemoryFreq(address, cpuId, frequency))
+        {
+            throw PECI_EXCEPTION_ADDR(address, "getMemoryFreq() failed");
+        }
+
+        return frequency;
+    }
+
     uint32_t detectFrequency(uint8_t address, uint32_t cpuId,
                              uint8_t domainId) const
     {
diff --git a/src/peci/transport/adapter.hpp b/src/peci/transport/adapter.hpp
index 359be83..8bf73c9 100644
--- a/src/peci/transport/adapter.hpp
+++ b/src/peci/transport/adapter.hpp
@@ -211,18 +211,18 @@ class Adapter
         return true;
     }
 
-    bool getS10BusNumber(uint8_t target, uint32_t cpuId,
-                         uint8_t& busNumber) const
+    bool getS8BusNumber(uint8_t target, uint32_t cpuId,
+                        uint8_t& busNumber) const
     {
-        abi::request::GetS10BusNumber req(cpuId);
-        abi::response::GetS10BusNumber rsp;
+        abi::request::GetS8BusNumber req(cpuId);
+        abi::response::GetS8BusNumber rsp;
 
         if (!executePeciCommand(target, req, rsp))
         {
             return false;
         }
 
-        busNumber = rsp.busNumberN2;
+        busNumber = rsp.busNumberN0;
 
         return true;
     }
@@ -290,6 +290,7 @@ class Adapter
     {
         abi::request::GetDimmmtr32 req;
         abi::response::GetDimmmtr rsp;
+	constexpr auto doNotPrintErrors = false;
 
         req.payload.header.seg = 0xFF;
         req.header.domainId = domainId & 0x7F;
@@ -299,7 +300,9 @@ class Adapter
         req.payload.func = static_cast<uint8_t>(func & 7);
         req.payload.reg = reg;
 
-        if (!executePeciCommand(target, req, rsp))
+	std::fprintf(stderr, "target = %d, req.payload.bus = %d, req.payload.dev = %d\n",target,req.payload.bus,req.payload.dev);
+	std::fprintf(stderr, "req.payload.func = %d, req.payload.reg = %x,req.header.domainId =%d, req.payload.header.seg =%x\n",req.payload.func,req.payload.reg,req.header.domainId,req.payload.header.seg); 
+        if (!executePeciCommand(target, req, rsp, doNotPrintErrors))
         {
             return false;
         }
@@ -308,6 +311,36 @@ class Adapter
         return true;
     }
 
+    bool getMemoryFreq(uint8_t target, uint32_t cpuId, uint32_t& freq) const
+    {
+        abi::request::GetMemoryFreq req(cpuId);
+        abi::response::GetMemoryFreq rsp;
+
+        if (!executePeciCommand(target, req, rsp))
+        {
+            return false;
+        }
+
+        uint32_t memFreq = rsp.frequency;
+        if (rsp.type == 0)
+        {
+            memFreq *= peci::abi::memory::freqRatio133Mhz;
+        }
+        else if (rsp.type == 1)
+        {
+            memFreq *= peci::abi::memory::freqRatio100Mhz;
+        }
+        else
+        {
+            LOG_ERROR << "Unexpected memory frequency type: " << rsp.type;
+            return false;
+        }
+        memFreq /= peci::abi::memory::freqRatioDiv;
+        freq = memFreq;
+
+        return true;
+    }
+
     bool getMemoryFreq(uint8_t target, uint32_t cpuId, uint8_t domainId,
                        uint32_t& freq) const
     {
@@ -319,21 +352,22 @@ class Adapter
             return false;
         }
 
-        freq = rsp.frequency;
+        uint32_t memFreq = peci::abi::memory::gnr::freqRefclkMultiplier * rsp.frequency;
         if (rsp.type == 0)
         {
-            freq *= peci::abi::memory::freqRatio133Mhz;
+            memFreq *= peci::abi::memory::freqRatio133Mhz;
         }
         else if (rsp.type == 1)
         {
-            freq *= peci::abi::memory::freqRatio100Mhz;
+            memFreq *= peci::abi::memory::freqRatio100Mhz;
         }
         else
         {
             LOG_ERROR << "Unexpected memory frequency type: " << rsp.type;
             return false;
         }
-        freq /= peci::abi::memory::freqRatioDiv;
+        memFreq /= peci::abi::memory::freqRatioDiv;
+        freq = memFreq;
 
         return true;
     }
-- 
2.34.1

