From 07eccbd1f1cd4d55bcd194dc66e63c8ac74bfaaf Mon Sep 17 00:00:00 2001
From: dineshkumar <dineshkumar@ami.com>
Date: Thu, 18 Apr 2024 13:27:10 +0530
Subject: [PATCH] Add SSIF support

---
 drivers/char/ipmi/Kconfig       |   4 +
 drivers/char/ipmi/ssif_bmc.c    | 201 +++++++++++++++++++++++++++--
 drivers/i2c/busses/i2c-aspeed.c |  38 +++++-
 include/linux/i2c-aspeed.h      | 216 ++++++++++++++++++++++++++++++++
 4 files changed, 446 insertions(+), 13 deletions(-)
 create mode 100644 include/linux/i2c-aspeed.h

diff --git a/drivers/char/ipmi/Kconfig b/drivers/char/ipmi/Kconfig
index d82323f8393b..cb6b6b68af47 100644
--- a/drivers/char/ipmi/Kconfig
+++ b/drivers/char/ipmi/Kconfig
@@ -197,6 +197,10 @@ config SSIF_IPMI_BMC
 	  The driver implements the BMC side of the SMBus system
 	  interface (SSIF).
 
+config SEPARATE_SSIF_POSTCODES
+        bool "Separate ipmi post codes writes to another channel"
+        depends on SSIF_IPMI_BMC
+
 config IPMB_DEVICE_INTERFACE
 	tristate 'IPMB Interface handler'
 	depends on I2C
diff --git a/drivers/char/ipmi/ssif_bmc.c b/drivers/char/ipmi/ssif_bmc.c
index caee848261e9..50a1415c2dd0 100644
--- a/drivers/char/ipmi/ssif_bmc.c
+++ b/drivers/char/ipmi/ssif_bmc.c
@@ -18,8 +18,15 @@
 #include <linux/timer.h>
 #include <linux/jiffies.h>
 #include <linux/ipmi_ssif_bmc.h>
+#include <linux/i2c-aspeed.h>
+#include <linux/kfifo.h>
 
 #define DEVICE_NAME                             "ipmi-ssif-host"
+#ifdef CONFIG_SEPARATE_SSIF_POSTCODES
+#define DEVICE_NAME_POST			"ipmi-ssif-postcodes"
+#define POST_CODE_SIZE				9
+#define POST_CODE_OFFSET			3
+#endif //CONFIG_SEPARATE_SSIF_POSTCODES
 
 #define GET_8BIT_ADDR(addr_7bit)                (((addr_7bit) << 1) & 0xff)
 
@@ -46,6 +53,8 @@
  */
 #define RESPONSE_TIMEOUT                        500 /* ms */
 
+#define BUFFER_SIZE 1024
+
 struct ssif_part_buffer {
 	u8 address;
 	u8 smbus_cmd;
@@ -102,8 +111,18 @@ struct ssif_bmc_ctx {
 	struct ssif_part_buffer part_buf;
 	struct ipmi_ssif_msg    response;
 	struct ipmi_ssif_msg    request;
+	int 			nackstatus;
+#ifdef CONFIG_SEPARATE_SSIF_POSTCODES
+	struct miscdevice       miscdev_post;
+	spinlock_t              lock_post_rd;
+	wait_queue_head_t       wait_queue_post_rd;
+	u8                      running_post;
+	struct kfifo 		fifo_post;
+#endif //CONFIG_SEPARATE_SSIF_POSTCODES
 };
 
+static void on_stop_event(struct ssif_bmc_ctx *ssif_bmc, u8 *val);
+
 static inline struct ssif_bmc_ctx *to_ssif_bmc(struct file *file)
 {
 	return container_of(file->private_data, struct ssif_bmc_ctx, miscdev);
@@ -168,6 +187,97 @@ static ssize_t ssif_bmc_read(struct file *file, char __user *buf, size_t count,
 	return (ret < 0) ? ret : count;
 }
 
+#ifdef CONFIG_SEPARATE_SSIF_POSTCODES
+static inline struct ssif_bmc_ctx *to_ssif_bmc_post(struct file *file)
+{
+	return container_of(file->private_data, struct ssif_bmc_ctx, miscdev_post);
+}
+
+
+static ssize_t ssif_bmc_read_post(struct file *file, char __user *buf, size_t count_in, loff_t *ppos)
+{
+	struct ssif_bmc_ctx *ssif_bmc = to_ssif_bmc_post(file);
+	unsigned long flags;
+	unsigned int count_out;
+	ssize_t ret = 0;
+
+	if (kfifo_is_empty(&ssif_bmc->fifo_post)) {
+		if (file->f_flags & O_NONBLOCK)
+			return -EAGAIN;
+		ret = wait_event_interruptible(ssif_bmc->wait_queue_post_rd, !kfifo_is_empty(&ssif_bmc->fifo_post));
+		if (ret == -ERESTARTSYS)
+			return ret;
+	}
+	spin_lock_irqsave(&ssif_bmc->lock_post_rd, flags);
+	ret = kfifo_to_user(&ssif_bmc->fifo_post, buf, count_in, &count_out);
+	spin_unlock_irqrestore(&ssif_bmc->lock_post_rd, flags);
+	return (ret < 0) ? ret : count_out;
+}
+
+static int ssif_bmc_open_post(struct inode *inode, struct file *file)
+{
+	struct ssif_bmc_ctx *ssif_bmc = to_ssif_bmc_post(file);
+	int ret = 0;
+
+	if (!ssif_bmc->running_post)
+		ssif_bmc->running_post = 1;
+	else
+		ret = -EBUSY;
+
+	return ret;
+}
+
+static __poll_t ssif_bmc_poll_post(struct file *file, poll_table *wait)
+{
+	struct ssif_bmc_ctx *ssif_bmc = to_ssif_bmc_post(file);
+
+	poll_wait(file, &ssif_bmc->wait_queue_post_rd, wait);
+	if (!kfifo_is_empty(&ssif_bmc->fifo_post)) {
+		return POLLIN | POLLRDNORM;
+	}
+	return 0;
+}
+
+static int ssif_bmc_release_post(struct inode *inode, struct file *file)
+{
+	struct ssif_bmc_ctx *ssif_bmc = to_ssif_bmc_post(file);
+
+	ssif_bmc->running_post = 0;
+
+	return 0;
+}
+
+static const struct file_operations ssif_bmc_post_fops = {
+	.owner		= THIS_MODULE,
+	.open		= ssif_bmc_open_post,
+	.read		= ssif_bmc_read_post,
+	.release	= ssif_bmc_release_post,
+	.poll		= ssif_bmc_poll_post,
+};
+
+void send_post_code(struct ssif_bmc_ctx *ssif_bmc)
+{
+	unsigned long flags = 0;
+	int rc = 0;
+
+	if (kfifo_initialized(&ssif_bmc->fifo_post) && ssif_bmc->request.len >= (POST_CODE_SIZE + POST_CODE_OFFSET)) {
+		ssize_t to_send = POST_CODE_SIZE;
+		spin_lock_irqsave(&ssif_bmc->lock_post_rd, flags);
+		if ((BUFFER_SIZE - kfifo_len(&ssif_bmc->fifo_post)) < to_send)
+			kfifo_reset(&ssif_bmc->fifo_post);
+		rc = kfifo_in(&ssif_bmc->fifo_post, &ssif_bmc->request.payload[POST_CODE_OFFSET], to_send);
+		if (rc != to_send) {
+			kfifo_reset(&ssif_bmc->fifo_post);
+			spin_unlock_irqrestore(&ssif_bmc->lock_post_rd, flags);
+			return;
+		}
+		spin_unlock_irqrestore(&ssif_bmc->lock_post_rd, flags);
+
+		wake_up_all(&ssif_bmc->wait_queue_post_rd);
+	}
+}
+#endif //CONFIG_SEPARATE_SSIF_POSTCODES
+
 /* Handle SSIF message that is written by user */
 static ssize_t ssif_bmc_write(struct file *file, const char __user *buf, size_t count,
 			      loff_t *ppos)
@@ -220,6 +330,10 @@ static ssize_t ssif_bmc_write(struct file *file, const char __user *buf, size_t
 
 	/* Clean old request buffer */
 	memset(&ssif_bmc->request, 0, sizeof(struct ipmi_ssif_msg));
+
+	/* Response ready. Disable NAK */
+	ssif_bmc->nackstatus = 0;
+	dev_dbg(&ssif_bmc->client->dev, "respok, disable nak\n");
 exit:
 	spin_unlock_irqrestore(&ssif_bmc->lock, flags);
 
@@ -316,12 +430,27 @@ static void response_timeout(struct timer_list *t)
 /* Called with ssif_bmc->lock held. */
 static void handle_request(struct ssif_bmc_ctx *ssif_bmc)
 {
+#ifdef CONFIG_SEPARATE_SSIF_POSTCODES
+	int netfn = ssif_bmc->request.payload[0] >> 2;
+	int cmd   = ssif_bmc->request.payload[1];
+	int group = ssif_bmc->request.payload[2];
+#endif //CONFIG_SEPARATE_SSIF_POSTCODES
+
 	/* set ssif_bmc to busy waiting for response */
 	ssif_bmc->busy = true;
 	/* Request message is available to process */
 	ssif_bmc->request_available = true;
+	/* Enable NAK */
+	ssif_bmc->nackstatus = 1;
+	dev_dbg(&ssif_bmc->client->dev, "enable nack\n");
 	/* Clean old response buffer */
 	memset(&ssif_bmc->response, 0, sizeof(struct ipmi_ssif_msg));
+
+#ifdef CONFIG_SEPARATE_SSIF_POSTCODES
+	if(netfn == 0x2c && cmd == 0x02 && group == 0xAE) {
+		send_post_code(ssif_bmc);	
+	}
+#endif //CONFIG_SEPARATE_SSIF_POSTCODES
 	/* This is the new READ request.*/
 	wake_up_all(&ssif_bmc->wait_queue);
 
@@ -576,11 +705,6 @@ static void process_request_part(struct ssif_bmc_ctx *ssif_bmc)
 
 static void process_smbus_cmd(struct ssif_bmc_ctx *ssif_bmc, u8 *val)
 {
-	/* SMBUS command can vary (single or multi-part) */
-	ssif_bmc->part_buf.smbus_cmd = *val;
-	ssif_bmc->msg_idx = 1;
-	memset(&ssif_bmc->part_buf.payload[0], 0, MAX_PAYLOAD_PER_TRANSACTION);
-
 	if (*val == SSIF_IPMI_SINGLEPART_WRITE || *val == SSIF_IPMI_MULTIPART_WRITE_START) {
 		/*
 		 * The response maybe not come in-time, causing host SSIF driver
@@ -590,10 +714,19 @@ static void process_smbus_cmd(struct ssif_bmc_ctx *ssif_bmc, u8 *val)
 		if (ssif_bmc->response_in_progress)
 			complete_response(ssif_bmc);
 
+		ssif_bmc->nackstatus = 0;
+		dev_dbg(&ssif_bmc->client->dev, "new req disable nak\n");
+
 		/* This is new request, flip aborting flag if set */
 		if (ssif_bmc->aborting)
 			ssif_bmc->aborting = false;
 	}
+	
+	/* complete_response() call may reset the value's of ssif_bmc->part_buf struct. So, set the value's here */
+	/* SMBUS command can vary (single or multi-part) */
+	ssif_bmc->part_buf.smbus_cmd = *val;
+	ssif_bmc->msg_idx = 1;
+	memset(&ssif_bmc->part_buf.payload[0], 0, MAX_PAYLOAD_PER_TRANSACTION);
 }
 
 static void on_read_requested_event(struct ssif_bmc_ctx *ssif_bmc, u8 *val)
@@ -665,9 +798,20 @@ static void on_read_processed_event(struct ssif_bmc_ctx *ssif_bmc, u8 *val)
 
 static void on_write_requested_event(struct ssif_bmc_ctx *ssif_bmc, u8 *val)
 {
+	struct aspeed_i2c_bus *bus = i2c_get_adapdata(ssif_bmc->client->adapter);
+
 	if (ssif_bmc->state == SSIF_READY || ssif_bmc->state == SSIF_SMBUS_CMD) {
 		ssif_bmc->state = SSIF_START;
 
+	} else if(ssif_bmc->state == SSIF_REQ_RECVING && !ssif_bmc->nackstatus) {
+		/* As per I2C spec, 
+		 * If a controller still wishes to
+		 * communicate on the bus, it can generate a repeated START condition (Sr) and address
+		 * another target without first generating a STOP condition */
+		on_stop_event(ssif_bmc, val);
+		if (ssif_bmc->state == SSIF_READY)
+			ssif_bmc->state = SSIF_START;
+
 	} else if (ssif_bmc->state == SSIF_START ||
 		   ssif_bmc->state == SSIF_REQ_RECVING ||
 		   ssif_bmc->state == SSIF_RES_SENDING) {
@@ -680,6 +824,21 @@ static void on_write_requested_event(struct ssif_bmc_ctx *ssif_bmc, u8 *val)
 
 	ssif_bmc->msg_idx = 0;
 	ssif_bmc->part_buf.address = *val;
+
+	if(ssif_bmc->nackstatus)
+	{
+		dev_dbg(&ssif_bmc->client->dev, "send nack\n");
+		writel((readl(bus->base + ASPEED_I2C_CMD_REG)|ASPEED_I2CD_M_S_RX_CMD_LAST), 
+						bus->base + ASPEED_I2C_CMD_REG);
+		readl(bus->base + ASPEED_I2C_CMD_REG);
+		ssif_bmc->nackstatus++;
+
+		/* We don't NACK exceed the maximum SSIF retry count */
+		if(ssif_bmc->nackstatus >= SSIF_RETRIES) {
+			ssif_bmc->nackstatus = 0;
+			dev_dbg(&ssif_bmc->client->dev, "disable nack retry exceed\n");
+		}
+	}
 }
 
 static void on_write_received_event(struct ssif_bmc_ctx *ssif_bmc, u8 *val)
@@ -813,6 +972,7 @@ static int ssif_bmc_probe(struct i2c_client *client)
 	ssif_bmc->response_in_progress = false;
 	ssif_bmc->busy = false;
 	ssif_bmc->response_timer_inited = false;
+	ssif_bmc->nackstatus = 0;
 
 	/* Register misc device interface */
 	ssif_bmc->miscdev.minor = MISC_DYNAMIC_MINOR;
@@ -822,15 +982,37 @@ static int ssif_bmc_probe(struct i2c_client *client)
 	ret = misc_register(&ssif_bmc->miscdev);
 	if (ret)
 		return ret;
-
+#ifdef CONFIG_SEPARATE_SSIF_POSTCODES
+	ssif_bmc->running_post = 0;
+	spin_lock_init(&ssif_bmc->lock_post_rd);
+	init_waitqueue_head(&ssif_bmc->wait_queue_post_rd);
+	ret = kfifo_alloc(&ssif_bmc->fifo_post, BUFFER_SIZE, GFP_KERNEL);
+	if (ret) {
+		misc_deregister(&ssif_bmc->miscdev);
+		return ret;
+	}
+	ssif_bmc->miscdev_post.minor = MISC_DYNAMIC_MINOR;
+	ssif_bmc->miscdev_post.name = DEVICE_NAME_POST;
+	ssif_bmc->miscdev_post.fops = &ssif_bmc_post_fops;
+	ssif_bmc->miscdev_post.parent = &client->dev;
+	ret = misc_register(&ssif_bmc->miscdev_post);
+	if (ret) {
+		misc_deregister(&ssif_bmc->miscdev);
+		return ret;
+	}
+#endif //CONFIG_SEPARATE_SSIF_POSTCODES
 	ssif_bmc->client = client;
 	ssif_bmc->client->flags |= I2C_CLIENT_SLAVE;
 
 	/* Register I2C slave */
 	i2c_set_clientdata(client, ssif_bmc);
 	ret = i2c_slave_register(client, ssif_bmc_cb);
-	if (ret)
+	if (ret) {
 		misc_deregister(&ssif_bmc->miscdev);
+#ifdef CONFIG_SEPARATE_SSIF_POSTCODES
+		misc_deregister(&ssif_bmc->miscdev_post);
+#endif //CONFIG_SEPARATE_SSIF_POSTCODES
+	}
 
 	return ret;
 }
@@ -841,6 +1023,11 @@ static void ssif_bmc_remove(struct i2c_client *client)
 
 	i2c_slave_unregister(client);
 	misc_deregister(&ssif_bmc->miscdev);
+#ifdef CONFIG_SEPARATE_SSIF_POSTCODES
+	kfifo_free(&ssif_bmc->fifo_post);
+	misc_deregister(&ssif_bmc->miscdev_post);
+#endif //CONFIG_SEPARATE_SSIF_POSTCODES
+
 }
 
 static const struct of_device_id ssif_bmc_match[] = {
diff --git a/drivers/i2c/busses/i2c-aspeed.c b/drivers/i2c/busses/i2c-aspeed.c
index b3e3b5c5f09c..1db28bf08816 100644
--- a/drivers/i2c/busses/i2c-aspeed.c
+++ b/drivers/i2c/busses/i2c-aspeed.c
@@ -233,6 +233,7 @@ struct aspeed_i2c_bus {
 	enum aspeed_i2c_slave_state	slave_state;
 	/* General call */
 	bool				general_call;
+	bool				disable_master;
 #endif /* CONFIG_I2C_SLAVE */
 };
 
@@ -544,6 +545,7 @@ static u32 aspeed_i2c_slave_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 		i2c_slave_event(slave, I2C_SLAVE_READ_REQUESTED, &value);
 		writel(value, bus->base + ASPEED_I2C_BYTE_BUF_REG);
 		writel(ASPEED_I2CD_S_TX_CMD, bus->base + ASPEED_I2C_CMD_REG);
+		dev_dbg(bus->dev, "RRq: %x\n", value);
 		break;
 	case ASPEED_I2C_SLAVE_READ_PROCESSED:
 		if (unlikely(!(irq_status & ASPEED_I2CD_INTR_TX_ACK))) {
@@ -555,6 +557,7 @@ static u32 aspeed_i2c_slave_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 		i2c_slave_event(slave, I2C_SLAVE_READ_PROCESSED, &value);
 		writel(value, bus->base + ASPEED_I2C_BYTE_BUF_REG);
 		writel(ASPEED_I2CD_S_TX_CMD, bus->base + ASPEED_I2C_CMD_REG);
+		dev_dbg(bus->dev, "RPro: %x\n", value);
 		break;
 	case ASPEED_I2C_SLAVE_WRITE_REQUESTED:
 		bus->slave_state = ASPEED_I2C_SLAVE_WRITE_RECEIVED;
@@ -563,13 +566,16 @@ static u32 aspeed_i2c_slave_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 		 * Slave ACK's on this address phase already but as the backend driver
 		 * returns an errno, the bus driver should nack the next incoming byte.
 		 */
-		if (ret < 0)
-			writel(ASPEED_I2CD_M_S_RX_CMD_LAST, bus->base + ASPEED_I2C_CMD_REG);
+		if (ret < 0) {
+			writel(ASPEED_I2CD_M_S_RX_CMD_LAST, bus->base + ASPEED_I2C_CMD_REG);	
+		}
 		aspeed_i2c_slave_handle_write_requested(bus, &value);
+		dev_dbg(bus->dev, "WRq: %x\n", value);
 		break;
 	case ASPEED_I2C_SLAVE_WRITE_RECEIVED:
 		i2c_slave_event(slave, I2C_SLAVE_WRITE_RECEIVED, &value);
 		aspeed_i2c_slave_handle_write_received(bus, &value);
+		dev_dbg(bus->dev, "WREC: %x\n", value);
 		break;
 	case ASPEED_I2C_SLAVE_GCALL_REQUESTED:
 		bus->slave_state = ASPEED_I2C_SLAVE_WRITE_RECEIVED;
@@ -578,6 +584,7 @@ static u32 aspeed_i2c_slave_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 	case ASPEED_I2C_SLAVE_STOP:
 		i2c_slave_event(slave, I2C_SLAVE_STOP, &value);
 		bus->slave_state = ASPEED_I2C_SLAVE_INACTIVE;
+		dev_dbg(bus->dev, "STOP\n");
 		break;
 	case ASPEED_I2C_SLAVE_START:
 	case ASPEED_I2C_SLAVE_GCALL_START:
@@ -589,6 +596,10 @@ static u32 aspeed_i2c_slave_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 		bus->slave_state = ASPEED_I2C_SLAVE_INACTIVE;
 		break;
 	}
+	
+	/* Ack all handled interrupts */
+	writel(irq_handled, bus->base + ASPEED_I2C_INTR_STS_REG);
+	readl(bus->base + ASPEED_I2C_INTR_STS_REG);
 
 	return irq_handled;
 }
@@ -886,6 +897,11 @@ static u32 aspeed_i2c_master_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 	u8 recv_byte;
 	int ret;
 
+	/* Ack all interrupts except for Rx done */
+	writel(irq_status & ~ASPEED_I2CD_INTR_RX_DONE,
+	       bus->base + ASPEED_I2C_INTR_STS_REG);
+	readl(bus->base + ASPEED_I2C_INTR_STS_REG);
+
 	if (irq_status & ASPEED_I2CD_INTR_BUS_RECOVER_DONE) {
 		bus->master_state = ASPEED_I2C_MASTER_INACTIVE;
 		irq_handled |= ASPEED_I2CD_INTR_BUS_RECOVER_DONE;
@@ -1094,9 +1110,9 @@ static irqreturn_t aspeed_i2c_bus_irq(int irq, void *dev_id)
 	spin_lock(&bus->lock);
 	irq_received = readl(bus->base + ASPEED_I2C_INTR_STS_REG);
 	/* Ack all interrupts except for Rx done */
-	writel(irq_received & ~ASPEED_I2CD_INTR_RX_DONE,
-	       bus->base + ASPEED_I2C_INTR_STS_REG);
-	readl(bus->base + ASPEED_I2C_INTR_STS_REG);
+	//writel(irq_received & ~ASPEED_I2CD_INTR_RX_DONE,
+	//       bus->base + ASPEED_I2C_INTR_STS_REG);
+	//readl(bus->base + ASPEED_I2C_INTR_STS_REG);
 	irq_received &= ASPEED_I2CD_INTR_RECV_MASK;
 	irq_remaining = irq_received;
 
@@ -1132,8 +1148,9 @@ static irqreturn_t aspeed_i2c_bus_irq(int irq, void *dev_id)
 	 * completed.
 	 */
 	if (bus->master_state == ASPEED_I2C_MASTER_PENDING &&
-	    bus->slave_state == ASPEED_I2C_SLAVE_INACTIVE)
+	    bus->slave_state == ASPEED_I2C_SLAVE_INACTIVE && bus->disable_master != true)
 		aspeed_i2c_do_start(bus);
+
 #else
 	irq_handled = aspeed_i2c_master_irq(bus, irq_remaining);
 #endif /* CONFIG_I2C_SLAVE */
@@ -1486,6 +1503,15 @@ static int aspeed_i2c_init(struct aspeed_i2c_bus *bus,
 	/* If slave has already been registered, re-enable it. */
 	if (bus->slave)
 		__aspeed_i2c_reg_slave(bus, bus->slave->addr);
+
+	if(of_property_read_bool(pdev->dev.of_node, "disable-master")) {
+		/* Disable Master Mode */
+		writel((readl(bus->base + ASPEED_I2C_FUN_CTRL_REG) & ~(ASPEED_I2CD_MASTER_EN)),
+				bus->base + ASPEED_I2C_FUN_CTRL_REG);
+		bus->disable_master = true;
+	} else {
+		bus->disable_master = false;
+	}
 #endif /* CONFIG_I2C_SLAVE */
 
 	/* Set interrupt generation of I2C controller */
diff --git a/include/linux/i2c-aspeed.h b/include/linux/i2c-aspeed.h
new file mode 100644
index 000000000000..57d47d2ea82c
--- /dev/null
+++ b/include/linux/i2c-aspeed.h
@@ -0,0 +1,216 @@
+#ifndef I2C_ASPEED_HDR
+#define I2C_ASPEED_HDR
+
+#include <linux/i2c.h>
+#include <linux/io.h>
+
+/* I2C Global Registers */
+/* 0x00 : I2CG Interrupt Status Register  */
+/* 0x08 : I2CG Interrupt Target Assignment  */
+/* 0x0c : I2CG Global Control Register (AST2500)  */
+#define ASPEED_I2CG_GLOBAL_CTRL_REG			0x0c
+#define  ASPEED_I2CG_SRAM_BUFFER_EN			BIT(0)
+
+/* I2C Bus Registers */
+#define ASPEED_I2C_FUN_CTRL_REG				0x00
+#define ASPEED_I2C_AC_TIMING_REG1			0x04
+#define ASPEED_I2C_AC_TIMING_REG2			0x08
+#define ASPEED_I2C_INTR_CTRL_REG			0x0c
+#define ASPEED_I2C_INTR_STS_REG				0x10
+#define ASPEED_I2C_CMD_REG				0x14
+#define ASPEED_I2C_DEV_ADDR_REG				0x18
+#define ASPEED_I2C_BUF_CTRL_REG				0x1c
+#define ASPEED_I2C_BYTE_BUF_REG				0x20
+#define ASPEED_I2C_DMA_ADDR_REG				0x24
+#define ASPEED_I2C_DMA_LEN_REG				0x28
+
+/* Device Register Definition */
+/* 0x00 : I2CD Function Control Register  */
+#define ASPEED_I2CD_BUFFER_PAGE_SEL_MASK		GENMASK(22, 20)
+#define ASPEED_I2CD_BUS_AUTO_RECOVERY_EN		BIT(17)
+#define ASPEED_I2CD_MULTI_MASTER_DIS			BIT(15)
+#define ASPEED_I2CD_SDA_DRIVE_1T_EN			BIT(8)
+#define ASPEED_I2CD_M_SDA_DRIVE_1T_EN			BIT(7)
+#define ASPEED_I2CD_M_HIGH_SPEED_EN			BIT(6)
+#define ASPEED_I2CD_GCALL_EN				BIT(2)
+#define ASPEED_I2CD_SLAVE_EN				BIT(1)
+#define ASPEED_I2CD_MASTER_EN				BIT(0)
+
+/* 0x04 : I2CD Clock and AC Timing Control Register #1 */
+#define ASPEED_I2CD_TIME_TBUF_MASK			GENMASK(31, 28)
+#define ASPEED_I2CD_TIME_THDSTA_MASK			GENMASK(27, 24)
+#define ASPEED_I2CD_TIME_TACST_MASK			GENMASK(23, 20)
+#define ASPEED_I2CD_TIME_SCL_HIGH_SHIFT			16
+#define ASPEED_I2CD_TIME_SCL_HIGH_MASK			GENMASK(19, 16)
+#define ASPEED_I2CD_TIME_SCL_LOW_SHIFT			12
+#define ASPEED_I2CD_TIME_SCL_LOW_MASK			GENMASK(15, 12)
+#define ASPEED_I2CD_TIME_TIMEOUT_BASE_DIVISOR_SHIFT	8
+#define ASPEED_I2CD_TIME_TIMEOUT_BASE_DIVISOR_MASK	GENMASK(9, 8)
+#define ASPEED_I2CD_TIME_BASE_DIVISOR_MASK		GENMASK(3, 0)
+#define ASPEED_I2CD_TIME_SCL_REG_MAX			GENMASK(3, 0)
+
+/* 0x08 : I2CD Clock and AC Timing Control Register #2 */
+#define ASPEED_I2CD_TIMEOUT_CYCLES_SHIFT		0
+#define ASPEED_I2CD_TIMEOUT_CYCLES_MASK			GENMASK(4, 0)
+
+/* 0x0c : I2CD Interrupt Control Register &
+ * 0x10 : I2CD Interrupt Status Register
+ *
+ * These share bit definitions, so use the same values for the enable &
+ * status bits.
+ */
+#define ASPEED_I2CD_INTR_RECV_MASK			0xf000ffff
+#if defined(CONFIG_MACH_ASPEED_G6)
+#define ASPEED_I2CD_INTR_SLAVE_ADDR_RECEIVED_PENDING	BIT(29)
+#else
+#define ASPEED_I2CD_INTR_SLAVE_ADDR_RECEIVED_PENDING	BIT(30)
+#endif
+#define ASPEED_I2CD_INTR_SLAVE_INACTIVE_TIMEOUT		BIT(15)
+#define ASPEED_I2CD_INTR_SDA_DL_TIMEOUT			BIT(14)
+#define ASPEED_I2CD_INTR_BUS_RECOVER_DONE		BIT(13)
+#define ASPEED_I2CD_INTR_GCALL_ADDR			BIT(8)
+#define ASPEED_I2CD_INTR_SLAVE_MATCH			BIT(7)
+#define ASPEED_I2CD_INTR_SCL_TIMEOUT			BIT(6)
+#define ASPEED_I2CD_INTR_ABNORMAL			BIT(5)
+#define ASPEED_I2CD_INTR_NORMAL_STOP			BIT(4)
+#define ASPEED_I2CD_INTR_ARBIT_LOSS			BIT(3)
+#define ASPEED_I2CD_INTR_RX_DONE			BIT(2)
+#define ASPEED_I2CD_INTR_TX_NAK				BIT(1)
+#define ASPEED_I2CD_INTR_TX_ACK				BIT(0)
+#define ASPEED_I2CD_INTR_MASTER_ERRORS					       \
+		(ASPEED_I2CD_INTR_SDA_DL_TIMEOUT |			       \
+		 ASPEED_I2CD_INTR_SCL_TIMEOUT |				       \
+		 ASPEED_I2CD_INTR_ABNORMAL |				       \
+		 ASPEED_I2CD_INTR_ARBIT_LOSS)
+#define ASPEED_I2CD_INTR_SLAVE_ERRORS					       \
+		ASPEED_I2CD_INTR_SLAVE_INACTIVE_TIMEOUT
+#define ASPEED_I2CD_INTR_ALL						       \
+		(ASPEED_I2CD_INTR_SLAVE_INACTIVE_TIMEOUT |		       \
+		 ASPEED_I2CD_INTR_SDA_DL_TIMEOUT |			       \
+		 ASPEED_I2CD_INTR_BUS_RECOVER_DONE |			       \
+		 ASPEED_I2CD_INTR_SCL_TIMEOUT |				       \
+		 ASPEED_I2CD_INTR_ABNORMAL |				       \
+		 ASPEED_I2CD_INTR_NORMAL_STOP |				       \
+		 ASPEED_I2CD_INTR_ARBIT_LOSS |				       \
+		 ASPEED_I2CD_INTR_RX_DONE |				       \
+		 ASPEED_I2CD_INTR_TX_NAK |				       \
+		 ASPEED_I2CD_INTR_TX_ACK)
+#define ASPEED_I2CD_INTR_STATUS_MASK					       \
+		(ASPEED_I2CD_INTR_SLAVE_ADDR_RECEIVED_PENDING |		       \
+		 ASPEED_I2CD_INTR_GCALL_ADDR |				       \
+		 ASPEED_I2CD_INTR_SLAVE_MATCH |				       \
+		 ASPEED_I2CD_INTR_ALL)
+
+/* 0x14 : I2CD Command/Status Register   */
+#define ASPEED_I2CD_SCL_LINE_STS			BIT(18)
+#define ASPEED_I2CD_SDA_LINE_STS			BIT(17)
+#define ASPEED_I2CD_BUS_BUSY_STS			BIT(16)
+#define ASPEED_I2CD_BUS_RECOVER_CMD			BIT(11)
+
+/* Command Bit */
+#define ASPEED_I2CD_RX_DMA_ENABLE			BIT(9)
+#define ASPEED_I2CD_TX_DMA_ENABLE			BIT(8)
+#define ASPEED_I2CD_RX_BUFF_ENABLE			BIT(7)
+#define ASPEED_I2CD_TX_BUFF_ENABLE			BIT(6)
+#define ASPEED_I2CD_M_STOP_CMD				BIT(5)
+#define ASPEED_I2CD_M_S_RX_CMD_LAST			BIT(4)
+#define ASPEED_I2CD_M_RX_CMD				BIT(3)
+#define ASPEED_I2CD_S_TX_CMD				BIT(2)
+#define ASPEED_I2CD_M_TX_CMD				BIT(1)
+#define ASPEED_I2CD_M_START_CMD				BIT(0)
+#define ASPEED_I2CD_MASTER_CMDS_MASK					       \
+		(ASPEED_I2CD_M_STOP_CMD |				       \
+		 ASPEED_I2CD_M_S_RX_CMD_LAST |				       \
+		 ASPEED_I2CD_M_RX_CMD |					       \
+		 ASPEED_I2CD_M_TX_CMD |					       \
+		 ASPEED_I2CD_M_START_CMD)
+
+/* 0x18 : I2CD Slave Device Address Register   */
+#define ASPEED_I2CD_DEV_ADDR_MASK			GENMASK(6, 0)
+
+/* 0x1c : I2CD Buffer Control Register */
+/* Use 8-bits or 6-bits wide bit fileds to support both AST2400 and AST2500 */
+#define ASPEED_I2CD_BUF_RX_COUNT_MASK			GENMASK(31, 24)
+#define ASPEED_I2CD_BUF_RX_SIZE_MASK			GENMASK(23, 16)
+#define ASPEED_I2CD_BUF_TX_COUNT_MASK			GENMASK(15, 8)
+#define ASPEED_I2CD_BUF_OFFSET_MASK			GENMASK(5, 0)
+
+/* 0x24 : I2CD DMA Mode Buffer Address Register */
+#define ASPEED_I2CD_DMA_ADDR_MASK			GENMASK(31, 2)
+#define ASPEED_I2CD_DMA_ALIGN				4
+
+/* 0x28 : I2CD DMA Transfer Length Register */
+#define ASPEED_I2CD_DMA_LEN_SHIFT			0
+#define ASPEED_I2CD_DMA_LEN_MASK			GENMASK(11, 0)
+
+enum aspeed_i2c_master_state {
+	ASPEED_I2C_MASTER_INACTIVE,
+	ASPEED_I2C_MASTER_PENDING,
+	ASPEED_I2C_MASTER_START,
+	ASPEED_I2C_MASTER_TX_FIRST,
+	ASPEED_I2C_MASTER_TX,
+	ASPEED_I2C_MASTER_RX_FIRST,
+	ASPEED_I2C_MASTER_RX,
+	ASPEED_I2C_MASTER_STOP,
+};
+
+enum aspeed_i2c_slave_state {
+	ASPEED_I2C_SLAVE_INACTIVE,
+	ASPEED_I2C_SLAVE_START,
+	ASPEED_I2C_SLAVE_READ_REQUESTED,
+	ASPEED_I2C_SLAVE_READ_PROCESSED,
+	ASPEED_I2C_SLAVE_WRITE_REQUESTED,
+	ASPEED_I2C_SLAVE_WRITE_RECEIVED,
+	ASPEED_I2C_SLAVE_GCALL_START,
+	ASPEED_I2C_SLAVE_GCALL_REQUESTED,
+	ASPEED_I2C_SLAVE_STOP,
+};
+
+struct aspeed_i2c_bus {
+	struct i2c_adapter		adap;
+	struct device			*dev;
+	void __iomem			*base;
+	struct reset_control		*rst;
+	/* Synchronizes I/O mem access to base. */
+	spinlock_t			lock;
+	struct completion		cmd_complete;
+	u32				(*get_clk_reg_val)(struct device *dev,
+							   u32 divisor);
+	unsigned long			parent_clk_frequency;
+	u32				bus_frequency;
+	u32				hw_timeout_ms;
+	/* Transaction state. */
+	enum aspeed_i2c_master_state	master_state;
+	struct i2c_msg			*msgs;
+	size_t				buf_index;
+	size_t				msgs_index;
+	size_t				msgs_count;
+	bool				send_stop;
+	int				cmd_err;
+	/* Protected only by i2c_lock_bus */
+	int				master_xfer_result;
+	/* Multi-master */
+	bool				multi_master;
+	/* Buffer mode */
+	void __iomem			*buf_base;
+	u8				buf_offset;
+	u8				buf_page;
+	/* DMA mode */
+	struct dma_pool			*dma_pool;
+	dma_addr_t			dma_handle;
+	u8				*dma_buf;
+	size_t				dma_len;
+	/* Buffer/DMA mode */
+	size_t				buf_size;
+#if IS_ENABLED(CONFIG_I2C_SLAVE)
+	struct i2c_client		*slave;
+	enum aspeed_i2c_slave_state	slave_state;
+	/* General call */
+	bool				general_call;
+#endif /* CONFIG_I2C_SLAVE */
+};
+
+/* Per ipmi_ssif driver, maximum retry count for a message is 250 */
+#define SSIF_RETRIES            250
+
+#endif
-- 
2.34.1

