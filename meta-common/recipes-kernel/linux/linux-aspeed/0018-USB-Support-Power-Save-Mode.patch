From f49a0eeb187da1d33d1433b938289d3ce245fb6d Mon Sep 17 00:00:00 2001
From: "chrisduxbury@ami.com" <chrisduxbury@ami.com>
Date: Fri, 15 Dec 2023 16:09:47 +0800
Subject: [PATCH] [USB] Support Power Save Mode

---
 drivers/usb/gadget/configfs.c             | 165 ++++++++++++++++++++++
 drivers/usb/gadget/udc/aspeed-vhub/dev.c  |  16 +++
 drivers/usb/gadget/udc/aspeed-vhub/hub.c  |  71 +++++++++-
 drivers/usb/gadget/udc/aspeed-vhub/vhub.h |   2 +
 drivers/usb/gadget/udc/core.c             |  96 +++++++++++++
 include/linux/usb/gadget.h                |   8 ++
 6 files changed, 355 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/gadget/configfs.c b/drivers/usb/gadget/configfs.c
index 4d0a13a4fd0f..22aa259874d5 100644
--- a/drivers/usb/gadget/configfs.c
+++ b/drivers/usb/gadget/configfs.c
@@ -6,6 +6,8 @@
 #include <linux/nls.h>
 #include <linux/usb/composite.h>
 #include <linux/usb/gadget_configfs.h>
+#include <linux/cdev.h>
+#include <linux/errno.h>
 #include "configfs.h"
 #include "u_f.h"
 #include "u_os_desc.h"
@@ -14,6 +16,68 @@
 #include "function/u_ether.h"
 #include "function/u_rndis.h"
 
+#define USBG_MINORS                     1
+#define USBG_CLASS_NAME         "usb"
+
+static int major, minors;
+
+static struct class *usb_gadget_class;  // a class for usb gadget.
+static DEFINE_IDA(usbg_ida);
+static DEFINE_MUTEX(usbg_ida_lock); /* protects access to usbg_ida */
+
+static ssize_t power_save_mode_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+        int DeviceStatus;
+        usb_gadget_get_all_device_status(&DeviceStatus);
+
+	// DeviceStatus here has been reversed to return power consumption mode
+        return sysfs_emit(buf, "%d\n", !DeviceStatus);
+}
+
+static ssize_t power_save_mode_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+        int error;
+        int status = 0; 
+        int cmd; 
+        struct usb_composite_dev *cdev = dev_get_drvdata(dev);
+        error = kstrtoint(buf, 10, &cmd);
+        if (error) {
+                return error;
+	}
+
+        if (cmd == 0) { 
+		// power consumption mode off enabled virtual hub
+                status = usb_gadget_vhub_upstream_enable(cdev->gadget);
+        } else if (cmd == 1) { 
+		// power consumption mode on disables virtual hub
+                status = usb_gadget_vhub_upstream_disable(cdev->gadget);
+        } else {
+                pr_err("power_save_mode_store: ERROR cmd=%d is not supported\n", cmd);
+                status = -ENOTTY;
+        }
+
+        return count;
+}
+
+static DEVICE_ATTR_RW(power_save_mode);
+
+
+static struct attribute *dev_attrs[] = {
+        &dev_attr_power_save_mode.attr,
+        NULL,
+};
+
+static const struct attribute_group dev_attr_grp = {
+        .attrs = dev_attrs,
+};
+
+const struct attribute_group *usb_gadget_groups[] = {
+        &dev_attr_grp,
+        NULL,
+};
+
+static struct class *usb_gadget_class; // a class for usb gadget
+
 int check_user_usb_string(const char *name,
 		struct usb_gadget_strings *stringtab_dev)
 {
@@ -66,6 +130,8 @@ struct gadget_info {
 	bool use_os_desc;
 	char b_vendor_code;
 	char qw_sign[OS_STRING_QW_SIGN_LEN];
+	int minor;
+	bool bind_cdev;
 	spinlock_t spinlock;
 	bool unbind;
 };
@@ -1241,6 +1307,62 @@ static void purge_configs_funcs(struct gadget_info *gi)
 	}
 }
 
+void usbg_cleanup(void)
+{
+        if (major) {
+                unregister_chrdev_region(MKDEV(major, 0), minors);
+                major = minors = 0;
+        }
+        class_destroy(usb_gadget_class);
+        usb_gadget_class = NULL;
+}
+
+int usbg_setup(struct usb_gadget *g, int count)
+{
+        int status;
+        dev_t dev;
+        usb_gadget_class = class_create(THIS_MODULE, USBG_CLASS_NAME);
+        if (IS_ERR(usb_gadget_class)) {
+                status = PTR_ERR(usb_gadget_class);
+                usb_gadget_class = NULL;
+                return status;
+        }
+
+        status = alloc_chrdev_region(&dev, 0, count, USBG_CLASS_NAME);
+        if (status) {
+                class_destroy(usb_gadget_class);
+                usb_gadget_class = NULL;
+                return status;
+        }
+
+        major = MAJOR(dev);
+        minors = count;
+
+        return 0;
+}
+
+static inline int usbg_get_minor(void)
+{
+        int ret;
+        ret = ida_simple_get(&usbg_ida, 0, 0, GFP_KERNEL);
+        if (ret >= USBG_MINORS) {
+                ida_simple_remove(&usbg_ida, ret);
+                ret = -ENODEV;
+        }
+
+        return ret;
+}
+
+static inline void usbg_put_minor(int minor)
+{
+        mutex_lock(&usbg_ida_lock);
+        ida_simple_remove(&usbg_ida, minor);
+        if (ida_is_empty(&usbg_ida))
+                usbg_cleanup();
+
+        mutex_unlock(&usbg_ida_lock);
+}
+
 static void borrow_network_to_rndis(struct gadget_info *gi,
                                    struct usb_composite_dev *cdev)
 {
@@ -1579,6 +1701,9 @@ static struct config_group *gadgets_make(
 		const char *name)
 {
 	struct gadget_info *gi;
+	dev_t               dev;
+	struct device       *device;
+	int                 status, ret;
 
 	gi = kzalloc(sizeof(*gi), GFP_KERNEL);
 	if (!gi)
@@ -1631,17 +1756,57 @@ static struct config_group *gadgets_make(
 	if (!gi->composite.gadget_driver.function)
 		goto out_free_driver_name;
 
+	// Binding devnode to eth USB device
+	if (strcmp(name, "eth") == 0) {
+		mutex_lock(&usbg_ida_lock);
+
+                if (ida_is_empty(&usbg_ida)) {
+                        status = usbg_setup(NULL, USBG_MINORS);
+                        if (status)  {
+                                goto err;
+                        }
+                }
+                gi->minor = usbg_get_minor();
+
+                if (gi->minor < 0) {
+                        if (ida_is_empty(&usbg_ida))
+                                usbg_cleanup();
+                        goto err;
+                }
+                dev = MKDEV(major, gi->minor);
+
+		device = device_create_with_groups(usb_gadget_class, NULL, dev, &gi->cdev,
+						   usb_gadget_groups, "usb_vhub");
+                if (IS_ERR(device)) {
+                        ret = PTR_ERR(device);
+                        goto err;
+                }
+		gi->bind_cdev = 1;
+	}
+	mutex_unlock(&usbg_ida_lock);
+
+
 	return &gi->group;
 
 out_free_driver_name:
 	kfree(gi->composite.gadget_driver.driver.name);
 err:
+	mutex_unlock(&usbg_ida_lock);
 	kfree(gi);
 	return ERR_PTR(-ENOMEM);
 }
 
 static void gadgets_drop(struct config_group *group, struct config_item *item)
 {
+        struct gadget_info *gi = to_gadget_info(item);
+        if(gi->bind_cdev) {
+                if (0 <= gi->minor)
+                {
+                        device_destroy(usb_gadget_class, MKDEV(major, gi->minor));
+                        usbg_put_minor(gi->minor);
+                }
+                gi->bind_cdev = 0;
+        }
 	config_item_put(item);
 }
 
diff --git a/drivers/usb/gadget/udc/aspeed-vhub/dev.c b/drivers/usb/gadget/udc/aspeed-vhub/dev.c
index 4f3bc27c1c62..6861221305aa 100644
--- a/drivers/usb/gadget/udc/aspeed-vhub/dev.c
+++ b/drivers/usb/gadget/udc/aspeed-vhub/dev.c
@@ -464,6 +464,20 @@ static int ast_vhub_udc_stop(struct usb_gadget *gadget)
 	return 0;
 }
 
+static int ast_vhub_udc_upstream_connect(struct usb_gadget *gadget)
+{
+	struct ast_vhub_dev *d = to_ast_dev(gadget);
+
+	return ast_vhub_upstream_connect(d->vhub);
+}
+
+static int ast_vhub_udc_upstream_disconnect(struct usb_gadget *gadget)
+{
+	struct ast_vhub_dev *d = to_ast_dev(gadget);
+
+	return ast_vhub_upstream_disconnect(d->vhub);
+}
+
 static const struct usb_gadget_ops ast_vhub_udc_ops = {
 	.get_frame	= ast_vhub_udc_get_frame,
 	.wakeup		= ast_vhub_udc_wakeup,
@@ -471,6 +485,8 @@ static const struct usb_gadget_ops ast_vhub_udc_ops = {
 	.udc_start	= ast_vhub_udc_start,
 	.udc_stop	= ast_vhub_udc_stop,
 	.match_ep	= ast_vhub_udc_match_ep,
+	.udc_upstream_connect	= ast_vhub_udc_upstream_connect,
+	.udc_upstream_disconnect	= ast_vhub_udc_upstream_disconnect,
 };
 
 void ast_vhub_dev_suspend(struct ast_vhub_dev *d)
diff --git a/drivers/usb/gadget/udc/aspeed-vhub/hub.c b/drivers/usb/gadget/udc/aspeed-vhub/hub.c
index e2207d014620..ec390c9aa8e1 100644
--- a/drivers/usb/gadget/udc/aspeed-vhub/hub.c
+++ b/drivers/usb/gadget/udc/aspeed-vhub/hub.c
@@ -601,6 +601,14 @@ static void ast_vhub_port_reset(struct ast_vhub *vhub, u8 port)
 	struct ast_vhub_port *p = &vhub->ports[port];
 	u16 set, clr, speed;
 
+	/*
+	 * Gadget layer isn't ready in quick connect/disconnect, 
+	 * then driver will be NULL, doing port reset first needs 
+	 * to confirm driver is ready.
+	 */
+	if (!p->dev.driver)
+		return;
+
 	/* First mark disabled */
 	ast_vhub_change_port_stat(vhub, port,
 				  USB_PORT_STAT_ENABLE |
@@ -608,9 +616,6 @@ static void ast_vhub_port_reset(struct ast_vhub *vhub, u8 port)
 				  USB_PORT_STAT_RESET,
 				  false);
 
-	if (!p->dev.driver)
-		return;
-
 	/*
 	 * This will either "start" the port or reset the
 	 * device if already started...
@@ -1080,3 +1085,63 @@ int ast_vhub_init_hub(struct ast_vhub *vhub)
 
 	return ast_vhub_init_desc(vhub);
 }
+
+int ast_vhub_upstream_connect(struct ast_vhub *vhub)
+{
+	u32 ctrl;
+	unsigned long flags;
+
+	spin_lock_irqsave(&vhub->lock, flags);
+	// No more init clk and DMA alloc, due to it was done in init_hw().
+
+	// No more enable PHY.
+
+	// No more setting for ISO & split control.
+
+	// No more setting for descriptor ring size.
+
+	// No more reset about devices.
+
+	// No more cleanup about EP ACK/NACK interrupts.
+
+	// No more default setting for EP0 and HW hub EP1.
+
+	// No more configure about EP0 DMA buffer.
+
+	// No more setting about clear address.
+
+	// No more setting about pullup hub.
+
+	// Simply and just enable upstream.
+	ctrl = readl(vhub->regs + AST_VHUB_CTRL);
+	ctrl |= VHUB_CTRL_UPSTREAM_CONNECT;
+	writel(ctrl, vhub->regs + AST_VHUB_CTRL);
+
+	// No more setting about interrupts.
+
+	spin_unlock_irqrestore(&vhub->lock, flags);
+	return 0;
+}
+
+int ast_vhub_upstream_disconnect(struct ast_vhub *vhub)
+{
+	u32 ctrl;
+	unsigned long flags;
+
+	spin_lock_irqsave(&vhub->lock, flags);
+
+	// Simply and just disable upstream.
+	ctrl = readl(vhub->regs + AST_VHUB_CTRL);
+	ctrl &= ~VHUB_CTRL_UPSTREAM_CONNECT;
+	writel(ctrl, vhub->regs + AST_VHUB_CTRL);
+
+	// No more setting about interrupts.
+
+	// No more setting about Pull device and PHY.
+	spin_unlock_irqrestore(&vhub->lock, flags);
+
+	// No more DMA free, due to DMA alloc only once.
+
+	return 0;
+}
+
diff --git a/drivers/usb/gadget/udc/aspeed-vhub/vhub.h b/drivers/usb/gadget/udc/aspeed-vhub/vhub.h
index 6b9dfa6e10eb..64099480c10b 100644
--- a/drivers/usb/gadget/udc/aspeed-vhub/vhub.h
+++ b/drivers/usb/gadget/udc/aspeed-vhub/vhub.h
@@ -535,6 +535,8 @@ int __ast_vhub_simple_reply(struct ast_vhub_ep *ep, int len, ...);
 			       __VA_ARGS__)
 
 /* hub.c */
+int ast_vhub_upstream_disconnect(struct ast_vhub *vhub);
+int ast_vhub_upstream_connect(struct ast_vhub *vhub);
 int ast_vhub_init_hub(struct ast_vhub *vhub);
 enum std_req_rc ast_vhub_std_hub_request(struct ast_vhub_ep *ep,
 					 struct usb_ctrlrequest *crq);
diff --git a/drivers/usb/gadget/udc/core.c b/drivers/usb/gadget/udc/core.c
index bf9878e1a72a..960b5ea4ad10 100644
--- a/drivers/usb/gadget/udc/core.c
+++ b/drivers/usb/gadget/udc/core.c
@@ -55,6 +55,7 @@ static LIST_HEAD(udc_list);
 
 /* Protects udc_list, udc->driver, driver->is_bound, and related calls */
 static DEFINE_MUTEX(udc_lock);
+static int virtual_device_status = 1; // Set as 1 by the status about default flow of driver init.
 
 /* ------------------------------------------------------------------------- */
 
@@ -1147,6 +1148,101 @@ static inline void usb_gadget_udc_stop(struct usb_udc *udc)
 	udc->started = false;
 }
 
+int usb_gadget_vhub_upstream_enable(struct usb_gadget *gadget)
+{
+        struct usb_udc *udc;
+
+        if(gadget != NULL)
+        {
+                if(gadget->name != NULL)
+                {
+                        if( strcmp(gadget->name, "aspeed-udc") == 0)
+                        {
+                                printk("It's the port B device, doesn't need to handle it\n");
+                                return 0;
+                        }
+                }
+                if(virtual_device_status == 1)
+                        return 0;
+                if(gadget != NULL) {
+                        gadget->ops->udc_upstream_connect(gadget);
+                } else {
+                /* For now we take the first available UDC */
+                        mutex_lock(&udc_lock);
+                        list_for_each_entry(udc, &udc_list, list) {
+                                if (udc->gadget!= NULL) {
+                                        break;
+                                }
+                        }
+                        mutex_unlock(&udc_lock);
+                        if(udc->gadget == NULL) {
+                                //not found available gadget
+                                return -1;
+                        }
+                        udc->gadget->ops->udc_upstream_connect(udc->gadget);
+                }
+                virtual_device_status = 1;
+        }
+        else
+        {
+                printk("Gadget device is NULL\n");
+        }
+
+        return 0;
+}
+
+EXPORT_SYMBOL_GPL(usb_gadget_vhub_upstream_enable);
+
+int usb_gadget_vhub_upstream_disable(struct usb_gadget *gadget)
+{
+        struct usb_udc *udc;
+
+	if(gadget != NULL)
+        {
+                if(gadget->name != NULL)
+                {
+                        if( strcmp(gadget->name, "aspeed-udc") == 0)
+                        {
+                                printk("It's the port B device, doesn't need to handle it\n");
+                                return 0;
+                        }
+                }
+
+                if(virtual_device_status == 0)
+                        return 0;
+                if(gadget != NULL) {
+                        gadget->ops->udc_upstream_disconnect(gadget);
+                } else {
+                /* For now we take the first available UDC */
+                        mutex_lock(&udc_lock);
+                        list_for_each_entry(udc, &udc_list, list) {
+                                if (udc->gadget!= NULL) {
+                                        break;
+                                }
+                        }
+                        mutex_unlock(&udc_lock);
+                        if(udc->gadget == NULL) {
+                                //not found available gadget
+                                return -1;
+                        }
+                        udc->gadget->ops->udc_upstream_disconnect(udc->gadget);
+                }
+                virtual_device_status = 0;
+        }
+
+        return 0;
+}
+
+EXPORT_SYMBOL_GPL(usb_gadget_vhub_upstream_disable);
+
+int usb_gadget_get_all_device_status(int *status)
+{
+        *status = virtual_device_status;
+        return 0;
+}
+EXPORT_SYMBOL_GPL(usb_gadget_get_all_device_status);
+
+
 /**
  * usb_gadget_udc_set_speed - tells usb device controller speed supported by
  *    current driver
diff --git a/include/linux/usb/gadget.h b/include/linux/usb/gadget.h
index dc3092cea99e..d97f7188956f 100644
--- a/include/linux/usb/gadget.h
+++ b/include/linux/usb/gadget.h
@@ -328,6 +328,9 @@ struct usb_gadget_ops {
 			struct usb_endpoint_descriptor *,
 			struct usb_ss_ep_comp_descriptor *);
 	int	(*check_config)(struct usb_gadget *gadget);
+
+	int (*udc_upstream_connect)(struct usb_gadget *gadget);
+	int (*udc_upstream_disconnect)(struct usb_gadget *gadget);
 };
 
 /**
@@ -899,6 +902,11 @@ extern void usb_gadget_udc_reset(struct usb_gadget *gadget,
 
 /*-------------------------------------------------------------------------*/
 
+/* utility to set vhub connect/disconnect */
+extern int usb_gadget_vhub_upstream_enable(struct usb_gadget *gadget);
+extern int usb_gadget_vhub_upstream_disable(struct usb_gadget *gadget);
+extern int usb_gadget_get_all_device_status(int *status);
+
 /* utility to give requests back to the gadget layer */
 
 extern void usb_gadget_giveback_request(struct usb_ep *ep,
-- 
2.42.0

