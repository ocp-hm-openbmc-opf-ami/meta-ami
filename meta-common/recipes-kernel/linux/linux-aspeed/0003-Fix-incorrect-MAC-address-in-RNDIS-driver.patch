From 40c2aefe1d10b0c4aad818d99b4a049a4d3d7212 Mon Sep 17 00:00:00 2001
From: seancheng1 <seancheng@ami.com>
Date: Thu, 1 Jun 2023 10:00:21 +0800
Subject: [PATCH] Fix incorrect MAC address in RNDIS driver.

---
 drivers/usb/gadget/configfs.c         | 54 ++++++++++-----------------
 drivers/usb/gadget/function/f_rndis.c | 21 +++++++----
 2 files changed, 33 insertions(+), 42 deletions(-)

diff --git a/drivers/usb/gadget/configfs.c b/drivers/usb/gadget/configfs.c
index 10cbad8f8f22..8167995140c0 100644
--- a/drivers/usb/gadget/configfs.c
+++ b/drivers/usb/gadget/configfs.c
@@ -1244,45 +1244,28 @@ static void purge_configs_funcs(struct gadget_info *gi)
 	}
 }
 
-static void borrow_network_to_rndis(struct gadget_info *gi,
-				    struct usb_composite_dev *cdev)
-{
-	struct usb_function_instance *ecm_fi;
-	struct usb_function_instance *rndis_fi;
-	struct f_ecm_opts *ecm_opts = NULL;
-	if (!list_empty(&gi->available_func)) {
-		list_for_each_entry (ecm_fi, &gi->available_func, cfs_list) {
-			//if(strcmp(ecm_fi->group.cg_item.ci_name, "ecm.usb0") == 0) {
-			if ((strcmp(ecm_fi->group.cg_item.ci_name,
-				    "ecm.usb0") == 0) ||
-			    (strcmp(ecm_fi->group.cg_item.ci_name,
-				    "ecm.usb1") == 0)) {
-				ecm_opts = container_of(
-					ecm_fi, struct f_ecm_opts, func_inst);
-				if (cdev->gadget != NULL) {
+static void borrow_network_to_rndis(struct gadget_info *gi,struct usb_composite_dev *cdev)
+{
+	struct usb_function_instance	*ecm_fi;
+	struct usb_function_instance	*rndis_fi;
+	struct f_ecm_opts		*ecm_opts = NULL;
+
+	if(!list_empty(&gi->available_func)) {
+		list_for_each_entry(ecm_fi, &gi->available_func, cfs_list) {
+
+			if(strcmp(ecm_fi->group.cg_item.ci_name, "ecm.usb0") == 0) {
+				ecm_opts = container_of(ecm_fi, struct f_ecm_opts, func_inst);
+				if(cdev->gadget != NULL) {
 					mutex_lock(&ecm_opts->lock);
-					gether_set_gadget(ecm_opts->net,
-							  cdev->gadget);
+					gether_set_gadget(ecm_opts->net, cdev->gadget);
 					gether_register_netdev(ecm_opts->net);
 					mutex_unlock(&ecm_opts->lock);
 					ecm_opts->bound = true;
-					list_for_each_entry (
-						rndis_fi, &gi->available_func,
-						cfs_list) {
-						//if(strcmp(rndis_fi->group.cg_item.ci_name, "rndis.usb0") == 0) {
-						if ((strcmp(rndis_fi->group
-								    .cg_item
-								    .ci_name,
-							    "rndis.usb0") ==
-						     0) ||
-						    (strcmp(rndis_fi->group
-								    .cg_item
-								    .ci_name,
-							    "rndis.usb1") ==
-						     0)) {
-							rndis_borrow_net(
-								rndis_fi,
-								ecm_opts->net);
+
+					list_for_each_entry(rndis_fi, &gi->available_func, cfs_list) {
+
+						if(strcmp(rndis_fi->group.cg_item.ci_name, "rndis.usb0") == 0) {
+							rndis_borrow_net(rndis_fi, ecm_opts->net);
 						}
 					}
 				}
@@ -1290,6 +1273,7 @@ static void borrow_network_to_rndis(struct gadget_info *gi,
 		}
 	}
 }
+
 static int configfs_composite_bind(struct usb_gadget *gadget,
 		struct usb_gadget_driver *gdriver)
 {
diff --git a/drivers/usb/gadget/function/f_rndis.c b/drivers/usb/gadget/function/f_rndis.c
index 117fc24ba0e6..13e3e3ca67a5 100644
--- a/drivers/usb/gadget/function/f_rndis.c
+++ b/drivers/usb/gadget/function/f_rndis.c
@@ -69,7 +69,8 @@
 struct f_rndis {
 	struct gether			port;
 	u8				ctrl_id, data_id;
-	u8 ethaddr[14];
+	u8				ethaddr[ETH_ALEN];
+	char				host_mac[14];		//for string descriptor
 	u32				vendorID;
 	const char			*manufacturer;
 	struct rndis_params		*params;
@@ -709,13 +710,18 @@ rndis_bind(struct usb_configuration *c, struct usb_function *f)
 			goto fail;
 		rndis_opts->bound = true;
 	}
-	status = gether_get_host_addr_cdc(rndis_opts->net, rndis->ethaddr,
-					  sizeof(rndis->ethaddr));
+	status = gether_get_host_addr_cdc(rndis_opts->net, rndis->host_mac,
+					  sizeof(rndis->host_mac));
+
 	if (status < 12) {
 		kfree(rndis);
 		return -EINVAL;
 	}
-	rndis_string_defs[0].s = rndis->ethaddr;
+	//rndis_string_defs[0].s = rndis->ethaddr;
+	rndis_string_defs[0].s = rndis->host_mac;
+
+	gether_get_host_addr_u8(rndis_opts->net, rndis->ethaddr);
+
 	us = usb_gstrings_attach(cdev, rndis_strings,
 				 ARRAY_SIZE(rndis_string_defs));
 	if (IS_ERR(us)) {
@@ -842,10 +848,11 @@ void rndis_borrow_net(struct usb_function_instance *f, struct net_device *net)
 	struct f_rndis_opts *opts;
 
 	opts = container_of(f, struct f_rndis_opts, func_inst);
-	if (opts->bound)
+/*	if (opts->bound)
 		gether_cleanup(netdev_priv(opts->net));
 	else
-		free_netdev(opts->net);
+		free_netdev(opts->net);*/
+	free_netdev(opts->net);
 	opts->borrowed_net = opts->bound = true;
 	opts->net = net;
 }
@@ -993,7 +1000,7 @@ static struct usb_function *rndis_alloc(struct usb_function_instance *fi)
 	mutex_lock(&opts->lock);
 	opts->refcnt++;
 
-	gether_get_host_addr_u8(opts->net, rndis->ethaddr);
+	//gether_get_host_addr_u8(opts->net, rndis->ethaddr);
 	rndis->vendorID = opts->vendor_id;
 	rndis->manufacturer = opts->manufacturer;
 
