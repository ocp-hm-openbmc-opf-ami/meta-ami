From b05b70e026428936c3cba6ebbc6987832801b3a5 Mon Sep 17 00:00:00 2001
From: krishna <krishnar@ami.com>
Date: Wed, 27 Dec 2023 21:55:41 +0530
Subject: [PATCH 7/7] Add Task interface and property

---
 src/power_control.cpp | 25 ++++++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

diff --git a/src/power_control.cpp b/src/power_control.cpp
index f9e3ecf..732e1fc 100644
--- a/src/power_control.cpp
+++ b/src/power_control.cpp
@@ -36,6 +36,8 @@
 #include <iostream>
 #include <string_view>
 
+static std::shared_ptr<sdbusplus::asio::dbus_interface> taskIface;
+
 namespace power_control
 {
 static boost::asio::io_context io;
@@ -2638,6 +2640,25 @@ bool bmcBootCheck()
 
 } // namespace power_control
 
+void createInterface(sdbusplus::asio::object_server& objectServer,
+                     std::string objectPath)
+{
+    uint16_t defaultId = 0;
+    std::string TaskName;
+    std::string defaultStatus =
+        "xyz.openbmc_project.Common.Task.OperationStatus.Completed";
+    taskIface = objectServer.add_interface(objectPath.c_str(),
+                                           "xyz.openbmc_project.Common.Task");
+    taskIface->register_property(
+        "Status", defaultStatus,
+        sdbusplus::asio::PropertyPermission::readWrite);
+    taskIface->register_property(
+        "TaskId", defaultId, sdbusplus::asio::PropertyPermission::readWrite);
+    taskIface->register_property(
+        "TaskName", TaskName, sdbusplus::asio::PropertyPermission::readWrite);
+    taskIface->initialize();
+}
+
 int main(int argc, char* argv[])
 {
     using namespace power_control;
@@ -2955,6 +2976,7 @@ int main(int argc, char* argv[])
         hostServer.add_interface("/xyz/openbmc_project/state/host" + node,
                                  "xyz.openbmc_project.State.Host");
 
+    createInterface(hostServer, "/xyz/openbmc_project/state/host" + node);
     // Interface for IPMI/Redfish initiated host state transitions
     hostIface->register_property(
         "RequestedHostTransition",
@@ -3184,6 +3206,7 @@ int main(int argc, char* argv[])
         chassisServer.add_interface("/xyz/openbmc_project/state/chassis" + node,
                                     "xyz.openbmc_project.State.Chassis");
 
+    createInterface(chassisServer, "/xyz/openbmc_project/state/chassis" + node);
     chassisIface->register_property(
         "RequestedPowerTransition",
         std::string("xyz.openbmc_project.State.Chassis.Transition.Off"),
@@ -3657,7 +3680,7 @@ int main(int argc, char* argv[])
     osIface = osServer.add_interface(
         "/xyz/openbmc_project/state/os",
         "xyz.openbmc_project.State.OperatingSystem.Status");
-
+    createInterface(osServer, "/xyz/openbmc_project/state/os");
     // Get the initial OS state based on POST complete
     //      0: Asserted, OS state is "Standby" (ready to boot)
     //      1: De-Asserted, OS state is "Inactive"
-- 
2.34.1

