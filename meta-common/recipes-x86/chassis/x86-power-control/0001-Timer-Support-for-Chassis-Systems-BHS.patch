From 1ac3124ef646f542057b4c248ffce9736573dd46 Mon Sep 17 00:00:00 2001
From: ramadevip <ramadevip@ami.com>
Date: Wed, 2 Aug 2023 10:44:36 +0530
Subject: [PATCH] Recreated the
 0001-Timer-Support-for-Chassis-Systems-BHS.patch

Signed-off-by: ramadevip <ramadevip@ami.com>
---
 src/power_control.cpp | 133 +++++++++++++++++++++++++++++++++++++++---
 1 file changed, 125 insertions(+), 8 deletions(-)

diff --git a/src/power_control.cpp b/src/power_control.cpp
index b7d53b3..511290d 100644
--- a/src/power_control.cpp
+++ b/src/power_control.cpp
@@ -32,6 +32,10 @@
 #include <filesystem>
 #include <fstream>
 #include <string_view>
+#include <stdio.h>
+#include <iostream>
+#include <chrono>
+#include <cstdint>
 
 namespace power_control
 {
@@ -43,6 +47,10 @@ PowerRestoreController powerRestore(io);
 static std::string node = "0";
 static const std::string appName = "power-control";
 
+uint16_t powerTimeOut;
+uint16_t timeOut = 0;
+uint16_t prop = 0;
+
 enum class DbusConfigType
 {
     name = 1,
@@ -171,6 +179,8 @@ static boost::asio::steady_timer restartCauseTimer(io);
 static boost::asio::steady_timer slotPowerCycleTimer(io);
 // Timer for register DBus OsStatus interface retries
 static boost::asio::steady_timer registerOsStateRetryTimer(io);
+// Time when to allow restart
+static boost::asio::steady_timer powerTransitionTimer(io);
 
 // GPIO Lines and Event Descriptors
 static gpiod::line psPowerOKLine;
@@ -2911,11 +2921,37 @@ int main(int argc, char* argv[])
     hostIface =
         hostServer.add_interface("/xyz/openbmc_project/state/host" + node,
                                  "xyz.openbmc_project.State.Host");
+
+    hostIface->register_property("HostTransitionTimeOut",  timeOut,
+                    [](const uint16_t& requested,  uint16_t& propertyValue) {
+
+                    propertyValue = requested;
+                    powerTimeOut = propertyValue;
+                    return true;
+                    });
+
     // Interface for IPMI/Redfish initiated host state transitions
     hostIface->register_property(
         "RequestedHostTransition",
         std::string("xyz.openbmc_project.State.Host.Transition.Off"),
         [](const std::string& requested, std::string& resp) {
+	      auto interval = std::chrono::seconds(powerTimeOut);
+                    powerTransitionTimer.expires_after(std::chrono::seconds(interval));
+                    powerTransitionTimer.async_wait([requested](const boost::system::error_code ec) {
+
+                                    if (ec)
+                                    {
+
+                                            // operation_aborted is expected if timer is canceled beforecompletion.
+                                            if (ec != boost::asio::error::operation_aborted)
+                                             {
+                                                   lg2::error("Host Transition TimeOut async_wait failed: {ERROR_MSG}",
+                                                             "ERROR_MSG", ec.message());
+                                                    return;
+                                             }
+                                    }
+                                    hostIface->set_property("HostTransitionTimeOut", prop);
+
         if (requested == "xyz.openbmc_project.State.Host.Transition.Off")
         {
             // if power button is masked, ignore this
@@ -2928,7 +2964,7 @@ int main(int argc, char* argv[])
             {
                 lg2::info("Power Button Masked.");
                 throw std::invalid_argument("Transition Request Masked");
-                return 0;
+                return;
             }
         }
         else if (requested == "xyz.openbmc_project.State.Host.Transition.On")
@@ -2943,7 +2979,7 @@ int main(int argc, char* argv[])
             {
                 lg2::info("Power Button Masked.");
                 throw std::invalid_argument("Transition Request Masked");
-                return 0;
+                return;
             }
         }
         else if (requested ==
@@ -2959,7 +2995,7 @@ int main(int argc, char* argv[])
             {
                 lg2::info("Power Button Masked.");
                 throw std::invalid_argument("Transition Request Masked");
-                return 0;
+                return;
             }
         }
         else if (requested ==
@@ -2975,7 +3011,7 @@ int main(int argc, char* argv[])
             {
                 lg2::info("Reset Button Masked.");
                 throw std::invalid_argument("Transition Request Masked");
-                return 0;
+                return;
             }
         }
         else if (requested ==
@@ -2991,15 +3027,16 @@ int main(int argc, char* argv[])
             {
                 lg2::info("Reset Button Masked.");
                 throw std::invalid_argument("Transition Request Masked");
-                return 0;
+                return;
             }
         }
         else
         {
             lg2::error("Unrecognized host state transition request.");
             throw std::invalid_argument("Unrecognized Transition Request");
-            return 0;
+            return;
         }
+		    });
         resp = requested;
         return 1;
         });
@@ -3017,12 +3054,49 @@ int main(int argc, char* argv[])
         chassisServer.add_interface("/xyz/openbmc_project/state/chassis" + node,
                                     "xyz.openbmc_project.State.Chassis");
 
+    // Chassis Control Interface
+    chassisIface =
+        chassisServer.add_interface("/xyz/openbmc_project/state/chassis" + node,
+                                    "xyz.openbmc_project.State.Chassis");
+
+     chassisIface->register_property("ChassisHostTransitionTimeOut",  timeOut,
+                    [](const uint16_t& requested,  uint16_t& propertyValue) {
+
+                    propertyValue = requested;
+                    powerTimeOut = propertyValue;
+                    return true;
+                    });
+
+     chassisIface->register_property("PowerTransitionTimeOut",  timeOut,
+                    [](const uint16_t& requested,  uint16_t& propertyValue) {
+
+                    propertyValue = requested;
+                    powerTimeOut = propertyValue;
+                    return true;
+                    });
+
     chassisIface->register_property(
         "RequestedPowerTransition",
         std::string("xyz.openbmc_project.State.Chassis.Transition.Off"),
         [](const std::string& requested, std::string& resp) {
         if (requested == "xyz.openbmc_project.State.Chassis.Transition.Off")
         {
+	     auto interval = std::chrono::seconds(powerTimeOut);
+                    powerTransitionTimer.expires_after(std::chrono::seconds(interval));
+                    powerTransitionTimer.async_wait([](const boost::system::error_code ec) {
+
+                                   if (ec)
+                                    {
+                                             // operation_aborted is expected if timer is canceled beforecompletion.
+                                             if (ec != boost::asio::error::operation_aborted)
+                                             {
+                                                     lg2::error("Power Transition TimeOut async_wait failed: {ERROR_MSG}",
+                                                                "ERROR_MSG", ec.message());
+                                                      return;
+                                              }
+                                    }
+                                    chassisIface->set_property("PowerTransitionTimeOut", prop);
+
             // if power button is masked, ignore this
             if (!powerButtonMask)
             {
@@ -3033,8 +3107,9 @@ int main(int argc, char* argv[])
             {
                 lg2::info("Power Button Masked.");
                 throw std::invalid_argument("Transition Request Masked");
-                return 0;
+                return;
             }
+		    });
         }
         else if (requested == "xyz.openbmc_project.State.Chassis.Transition.On")
         {
@@ -3054,6 +3129,23 @@ int main(int argc, char* argv[])
         else if (requested ==
                  "xyz.openbmc_project.State.Chassis.Transition.PowerCycle")
         {
+		auto interval = std::chrono::seconds(powerTimeOut);
+                    powerTransitionTimer.expires_after(std::chrono::seconds(interval));
+                    powerTransitionTimer.async_wait([](const boost::system::error_code ec) {
+                                    if (ec)
+                                    {
+
+                                           // operation_aborted is expected if timer is canceled beforecompletion.
+                                           if (ec != boost::asio::error::operation_aborted)
+                                           {
+                                                    lg2::error("Power Transition TimeOut async_wait failed: {ERROR_MSG}",
+                                                    "ERROR_MSG", ec.message());
+                                                     return;
+                                           }
+                                    }
+
+                                    chassisIface->set_property("ChassisHostTransitionTimeOut", prop);
+
             // if power button is masked, ignore this
             if (!powerButtonMask)
             {
@@ -3064,8 +3156,9 @@ int main(int argc, char* argv[])
             {
                 lg2::info("Power Button Masked.");
                 throw std::invalid_argument("Transition Request Masked");
-                return 0;
+                return;
             }
+		    });
         }
         else
         {
@@ -3092,6 +3185,14 @@ int main(int argc, char* argv[])
         "/xyz/openbmc_project/state/chassis_system0",
         "xyz.openbmc_project.State.Chassis");
 
+    chassisSysIface->register_property("ChassisHostTransitionTimeOut",  timeOut,
+                    [](const uint16_t& requested,  uint16_t& propertyValue) {
+
+                    propertyValue = requested;
+                    powerTimeOut = propertyValue;
+                    return true;
+                    });
+
     chassisSysIface->register_property(
         "RequestedPowerTransition",
         std::string("xyz.openbmc_project.State.Chassis.Transition.On"),
@@ -3099,8 +3200,24 @@ int main(int argc, char* argv[])
         if (requested ==
             "xyz.openbmc_project.State.Chassis.Transition.PowerCycle")
         {
+	     auto interval = std::chrono::seconds(powerTimeOut);
+            powerTransitionTimer.expires_after(std::chrono::seconds(interval));
+            powerTransitionTimer.async_wait([](const boost::system::error_code ec) {
+                            if (ec)
+                            {
+                                   // operation_aborted is expected if timer is canceled beforecompletion.
+                                   if (ec != boost::asio::error::operation_aborted)
+                                   {
+                                         lg2::error("Power Transition TimeOut async_wait failed: {ERROR_MSG}",
+                                                   "ERROR_MSG", ec.message());
+                                         return;
+                                    }
+                           }
+                            chassisSysIface->set_property("ChassisHostTransitionTimeOut", prop);
+
             systemReset();
             addRestartCause(RestartCause::command);
+	    });
         }
         else
         {
-- 
2.25.1

