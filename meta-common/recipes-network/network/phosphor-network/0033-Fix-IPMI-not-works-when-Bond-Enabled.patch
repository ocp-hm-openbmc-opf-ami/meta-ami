From 96aef109b64cacb4d75b9d5df11db913a69a167f Mon Sep 17 00:00:00 2001
From: Ethan Wei <ethanwei@ami.com>
Date: Tue, 9 Apr 2024 11:55:44 +0800
Subject: [PATCH] Fix IPMI not Working when Bond Enabled

---
 src/bond.cpp               | 95 +++++++++++++++++++++++++++++++++-----
 src/ethernet_interface.cpp |  6 +++
 2 files changed, 90 insertions(+), 11 deletions(-)

diff --git a/src/bond.cpp b/src/bond.cpp
index b0d47ee..85c97e4 100644
--- a/src/bond.cpp
+++ b/src/bond.cpp
@@ -27,6 +27,9 @@ using phosphor::logging::elog;
 
 using Argument = phosphor::logging::xyz::openbmc_project::Common::InvalidArgument;
 
+constexpr auto IPMI_CHANNEL_CONFIG =
+    "/usr/share/ipmi-providers/channel_config.json";
+
 static auto makeObjPath(std::string_view root)
 {
     auto ret = sdbusplus::message::object_path(std::string(root));
@@ -85,26 +88,43 @@ void Bond::delete_()
     auto obj = std::move(it->second);
     eth.manager.get().interfaces.erase(it);
 
-    if (ifidx > 0)
-    {
-        // We need to forcibly delete the interface as systemd does not
-        eth.manager.get().addReloadPostHook(
-            [idx = ifidx]() { system::deleteIntf(idx); });
-
-        // Ignore the interface so the reload doesn't re-query it
-        eth.manager.get().ignoredIntf.emplace(ifidx);
-    }
-
     eth.manager.get().writeToConfigurationFile();
     restoreConfiguration(map);
     std::filesystem::remove(config::pathForIntfConf(confDir, intf), ec);
     std::filesystem::remove(config::pathForIntfDev(confDir, intf), ec);
     std::filesystem::remove(config::pathForIntfInfo(eth.manager.get().getIfaceConfDir(), intf), ec);
 
-    eth.manager.get().reloadConfigs();
+    execute("/bin/systemctl", "systemctl", "stop",
+            "phosphor-ipmi-net@bond0.service");
+    if (ifidx > 0)
+    {
+        // We need to forcibly delete the interface as systemd does not
+        system::deleteIntf(ifidx);
+        // Ignore the interface so the reload doesn't re-query it
+        eth.manager.get().ignoredIntf.emplace(ifidx);
+    }
 
     execute("/bin/systemctl", "systemctl", "restart", "systemd-networkd.service");
 
+    eth.manager.get().addReloadPostHook([&]() {
+        std::this_thread::sleep_for(std::chrono::seconds(3));
+        for (auto it = eth.manager.get().interfaces.begin();
+             it != eth.manager.get().interfaces.end(); it++)
+        {
+            if (it->second->interfaceName() != "usb0")
+            {
+                execute(
+                    "/bin/systemctl", "systemctl", "reset-failed",
+                    fmt::format("phosphor-ipmi-net@{}.service", parentIfName)
+                        .c_str());
+                execute("/bin/systemctl", "systemctl", "try-restart",
+                        fmt::format("phosphor-ipmi-net@{}.service",
+                                    it->second->interfaceName())
+                            .c_str());
+            }
+        }
+    });
+    eth.manager.get().reloadConfigs();
 }
 
 std::string Bond::activeSlave(std::string activeSlave)
@@ -225,7 +245,60 @@ void Bond::writeBondConfiguration(bool isActive) {
     ofs.close();
     ifs.close();
     std::copy(std::istreambuf_iterator<char>(&infile), {}, std::ostreambuf_iterator<char>(&outfile));
+    infile.close();
+    outfile.close();
+
+    auto readJsonFile =
+        [](const std::string& configFile) -> nlohmann::ordered_json {
+        std::ifstream jsonFile(configFile);
+        if (!jsonFile.good())
+        {
+            log<level::ERR>("JSON file not found");
+            return nullptr;
+        }
+
+        nlohmann::ordered_json data = nullptr;
+        try
+        {
+            data = nlohmann::ordered_json::parse(jsonFile, nullptr, false);
+        }
+        catch (nlohmann::ordered_json::parse_error& e)
+        {
+            log<level::ERR>("Corrupted channel config.");
+            throw std::runtime_error("Corrupted channel config file");
+        }
+
+        return data;
+    };
+
+    auto writeJsonFile = [](const std::string& configFile,
+                            const nlohmann::ordered_json& jsonData) {
+        std::ofstream jsonFile(configFile);
+        if (!jsonFile.good())
+        {
+            log<level::ERR>("JSON file open failed");
+            return -1;
+        }
+
+        // Write JSON to file
+        jsonFile << jsonData.dump(2);
+
+        jsonFile.flush();
+        jsonFile.close();
+        return 0;
+    };
+
+    nlohmann::ordered_json config = readJsonFile(IPMI_CHANNEL_CONFIG);
+    config["3"]["name"] = isActive ? "bond0" : "eth0";
+
+    if (writeJsonFile(IPMI_CHANNEL_CONFIG, config) != 0)
+    {
+        log<level::ERR>("Error in write JSON data to file",
+                        entry("FILE=%s", IPMI_CHANNEL_CONFIG));
+        elog<InternalFailure>();
+    }
 }
+
 } //namespace network
 } //namespace phosphor
 
diff --git a/src/ethernet_interface.cpp b/src/ethernet_interface.cpp
index e851250..0cf15d9 100644
--- a/src/ethernet_interface.cpp
+++ b/src/ethernet_interface.cpp
@@ -1226,6 +1226,12 @@ ObjectPath EthernetInterface::createBond(std::string activeSlave, uint8_t miiMon
 
     execute("/bin/systemctl", "systemctl", "restart", "systemd-networkd.service");
 
+    manager.get().addReloadPostHook([&]() {
+        std::this_thread::sleep_for(std::chrono::seconds(5));
+        execute("/bin/systemctl", "systemctl", "restart",
+                "phosphor-ipmi-net@bond0.service");
+    });
+    manager.get().reloadConfigs();
     return ret;
 }
 
-- 
2.43.0

