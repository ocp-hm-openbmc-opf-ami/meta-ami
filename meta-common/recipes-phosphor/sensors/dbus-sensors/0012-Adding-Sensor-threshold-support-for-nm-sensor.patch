From 5f0b664a510d3960517643a32bd25571a82fbdf8 Mon Sep 17 00:00:00 2001
From: gayathrid <gayathrid@ami.com>
Date: Tue, 11 Jul 2023 11:19:39 +0530
Subject: [PATCH] Adding Sensor threshold support for nm sensor

Signed-off-by: gayathrid <gayathrid@ami.com>
---
 src/IntelCPUSensorMain.cpp | 259 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 254 insertions(+), 5 deletions(-)

diff --git a/src/IntelCPUSensorMain.cpp b/src/IntelCPUSensorMain.cpp
index 4a394707..3ea6ebc2 100644
--- a/src/IntelCPUSensorMain.cpp
+++ b/src/IntelCPUSensorMain.cpp
@@ -51,6 +51,12 @@ extern "C" {
 // clang-format on
 
 static constexpr bool debug = false;
+constexpr const char* ThresholdCriticalInterfaceName =
+"xyz.openbmc_project.Sensor.Threshold.Critical";
+constexpr const char* ThresholdWarningInterfaceName =
+"xyz.openbmc_project.Sensor.Threshold.Warning";
+
+const std::string path1("/xyz/openbmc_project/sensors/");
 
 boost::container::flat_map<std::string, std::shared_ptr<IntelCPUSensor>>
     gCpuSensors;
@@ -97,8 +103,8 @@ static constexpr auto hiddenProps{std::to_array<const char*>(
 static const boost::container::flat_map<std::string, SensorProperties>
     sensorPropertiesMap = {
         {"power",
-         {"/xyz/openbmc_project/sensors/power/", sensor_paths::unitWatts, 511,
-          0, 1000}},
+         {"/xyz/openbmc_project/sensors/power/", sensor_paths::unitWatts, 
+          std::numeric_limits<uint32_t>::max() / 1000000, 0.0, 1000}},
         {"energy",
          {"/xyz/openbmc_project/sensors/energy/", sensor_paths::unitJoules,
           std::numeric_limits<uint32_t>::max() / 1000000, 0.0, 1000000}},
@@ -112,6 +118,19 @@ static const boost::container::flat_map<std::string, SensorProperties>
                                "Cpu Power Cap CPU1", "Dimm Power Cap CPU1",
                                "Dimm Power Cap CPU2", "Dimm Power Average CPU1"
                              };*/
+std::vector <std::string> energy_sensors{"Cpu Energy CPU1", "Cpu Energy CPU2", "Dimm Energy CPU1",
+                                         "Dimm Energy CPU2", "Platform Energy CPU1"
+                                        };
+
+std::vector <std::string> power_sensors{"Cpu Power Average CPU1", "Cpu Power Average CPU2", "Cpu Power Capability CPU1",
+                                        "Cpu Power Capability CPU2", "Cpu Power Cap_max CPU1", "Cpu Power Cap_max CPU2",
+                                        "Cpu Power Cap_min CPU1", "Cpu Power Cap_min CPU2", "Dimm Power Average CPU1",
+                                        "Dimm Power Average CPU2", "Dimm Power Capability CPU1", "Dimm Power Capability CPU2",
+                                        "Dimm Power Cap_max CPU1", "Dimm Power Cap_max CPU2", "Dimm Power Cap_min CPU1",
+                                        "Dimm Power Cap_min CPU2", "Platform Power Average CPU1", 
+					 "Platform Power Capability CPU1",
+					 "Platform Power Cap_max CPU1", "Platform Power Cap_min CPU1"
+                                        }; 
 
 std::vector <std::string> nss {""};
 
@@ -160,6 +179,9 @@ bool createSensors(boost::asio::io_service& io,
                    ManagedObjectType& sensorConfigs)
 {
     bool available = false;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ThresholdCritical;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ThresholdWarning;
+
     for (const CPUConfig& cpu : cpuConfigs)
     {
         if (cpu.state != State::OFF)
@@ -311,14 +333,14 @@ bool createSensors(boost::asio::io_service& io,
         {
             std::cerr << "could not determine CPU ID for " << hwmonName << "\n";
             continue;
-        }
+        }  
         int cpuId =
             std::visit(VariantToUnsignedIntVisitor(), findCpuId->second);
 
         auto directory = hwmonNamePath.parent_path();
         std::vector<fs::path> inputPaths;
         if (!findFiles(directory,
-                       R"((temp|power|energy)\d+_(input|average|cap_min|cap_max|cap)$)",
+                       R"((temp|power|energy)\d+_(input|average|cap_min|cap_max|capability)$)",
                        inputPaths, 0))
         {
             std::cerr << "No CPU sensors in system\n";
@@ -369,6 +391,7 @@ bool createSensors(boost::asio::io_service& io,
             bool show = true;
             for (const char* prop : hiddenProps)
             {
+
                 if (label == prop)
                 {
                     show = false;
@@ -393,6 +416,7 @@ bool createSensors(boost::asio::io_service& io,
             }
 
             const auto& it = sensorPropertiesMap.find(type);
+
             if (it == sensorPropertiesMap.end())
             {
                 std::cerr
@@ -401,7 +425,7 @@ bool createSensors(boost::asio::io_service& io,
                 continue;
             }
             const SensorProperties& prop = it->second;
-
+		
             std::vector<thresholds::Threshold> sensorThresholds;
             std::string labelHead = label.substr(0, label.find(' '));
             parseThresholdsFromConfig(*sensorData, sensorThresholds,
@@ -429,6 +453,231 @@ bool createSensors(boost::asio::io_service& io,
                 std::cout << "Mapped: " << inputPath << " to " << sensorName
                           << "\n";
             }
+			
+	    std::string tmp = sensorName;
+
+	    if (std::find(energy_sensors.begin(), energy_sensors.end(), sensorName.c_str()) != energy_sensors.end())
+            {
+	        replace(tmp.begin(), tmp.end(), ' ', '_');
+		std::string path  = path1 + "energy/" + tmp;
+
+		ThresholdCritical = objectServer.add_interface(path, ThresholdCriticalInterfaceName);
+		ThresholdWarning  = objectServer.add_interface(path, ThresholdWarningInterfaceName);
+
+		if (    sensorName.compare("Cpu Energy CPU1") == 0 ||
+                        sensorName.compare("Cpu Energy CPU2") == 0)  
+                {
+        		ThresholdCritical->register_property ("CriticalAlarmHigh",  false);
+            		ThresholdCritical->register_property ("CriticalAlarmLow",   false);
+            		ThresholdCritical->register_property ("CriticalHigh",       3000);
+            		ThresholdCritical->register_property ("CriticalLow",        false);
+
+            		ThresholdWarning->register_property  ("WarningAlarmHigh",   false);
+            		ThresholdWarning->register_property  ("WarningAlarmLow",    false);
+            		ThresholdWarning->register_property  ("WarningHigh",        2500);
+            		ThresholdWarning->register_property  ("WarningLow",         false);
+	        }
+		else if (sensorName.compare("Dimm Energy CPU1") == 0 ||
+                         sensorName.compare("Dimm Energy CPU2") == 0)
+                {
+		 	ThresholdCritical->register_property ("CriticalAlarmHigh",  false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",   false);
+                       ThresholdCritical->register_property ("CriticalHigh",       2000);
+                       ThresholdCritical->register_property ("CriticalLow",        false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",   false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",    false);
+                       ThresholdWarning->register_property  ("WarningHigh",        1500);
+                       ThresholdWarning->register_property  ("WarningLow",         false);
+                }
+		else if (sensorName.compare("Platform Energy CPU1") == 0)
+		{
+		 	ThresholdCritical->register_property ("CriticalAlarmHigh",  false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",   false);
+                       ThresholdCritical->register_property ("CriticalHigh",       3000);
+                       ThresholdCritical->register_property ("CriticalLow",        false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",   false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",    false);
+                       ThresholdWarning->register_property  ("WarningHigh",        2500);
+                       ThresholdWarning->register_property  ("WarningLow",         false);
+                }
+
+            	ThresholdWarning->initialize();
+            	ThresholdCritical->initialize();
+            }
+            else if (std::find(power_sensors.begin(), power_sensors.end(), sensorName.c_str()) != power_sensors.end())
+            {
+		replace(tmp.begin(), tmp.end(), ' ', '_');
+		std::string path  = path1 + "power/" + tmp;
+
+		ThresholdWarning  = objectServer.add_interface(path, ThresholdWarningInterfaceName);
+		ThresholdCritical = objectServer.add_interface(path, ThresholdCriticalInterfaceName);
+
+		std::fprintf(stderr, "insidesensor name %s\n",sensorName.c_str());
+                if (    sensorName.compare("Cpu Power Average CPU1") == 0 ||
+                        sensorName.compare("Cpu Power Average CPU2") == 0)
+		{
+
+            	 	ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+            	        ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+            	        ThresholdCritical->register_property ("CriticalHigh",        500);
+            	        ThresholdCritical->register_property ("CriticalLow",         false);
+
+            	        ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+            	        ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+            	        ThresholdWarning->register_property  ("WarningHigh",         300);
+            	        ThresholdWarning->register_property  ("WarningLow",          false);
+                }
+	        else if (sensorName.compare("Cpu Power Capability CPU1") == 0 ||
+                         sensorName.compare("Cpu Power Capability CPU2") == 0)
+		{
+
+		 	ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        300);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         250);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+	        else if (sensorName.compare("Cpu Power Cap_max CPU1") == 0 ||
+                         sensorName.compare("Cpu Power Cap_max CPU2") == 0)
+		{
+
+		 	ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        500);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         400);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+                }
+	        else if (sensorName.compare("Cpu Power Cap_min CPU1") == 0 ||
+                         sensorName.compare("Cpu Power Cap_min CPU2") == 0)
+		{
+
+	        	ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        150);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         125);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+	        else if (sensorName.compare("Dimm Power Average CPU1") == 0 ||
+                         sensorName.compare("Dimm Power Average CPU2") == 0)
+		{
+
+	        	ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        100);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         70);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+	        else if (sensorName.compare("Dimm Power Capability CPU1") == 0 ||
+                         sensorName.compare("Dimm Power Capability CPU2") == 0)
+	        {
+
+		 	ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        100);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         70);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+                }
+		else if (sensorName.compare("Dimm Power Cap_max CPU1") == 0 ||
+                         sensorName.compare("Dimm Power Cap_max CPU2") == 0)
+		{
+		 	ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        100);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         70);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+                else if (sensorName.compare("Dimm Power Cap_min CPU1") == 0 ||
+                         sensorName.compare("Dimm Power Cap_min CPU2") == 0)
+		{
+			ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        0);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         0);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+		else if (sensorName.compare("Platform Power Average CPU1") == 0)
+		{
+			ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        500);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         400);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+		else if (sensorName.compare("Platform Power Capability CPU1") == 0)
+		{
+			ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        1500);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         1200);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+		else if (sensorName.compare("Platform Power Cap_max CPU1") == 0)
+		{
+			ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        2500);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         2000);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+		else if (sensorName.compare("Platform Power Cap_min CPU1") == 0)
+		{
+	        	ThresholdCritical->register_property ("CriticalAlarmHigh",   false);
+                       ThresholdCritical->register_property ("CriticalAlarmLow",    false);
+                       ThresholdCritical->register_property ("CriticalHigh",        0);
+                       ThresholdCritical->register_property ("CriticalLow",         false);
+
+                       ThresholdWarning->register_property  ("WarningAlarmHigh",    false);
+                       ThresholdWarning->register_property  ("WarningAlarmLow",     false);
+                       ThresholdWarning->register_property  ("WarningHigh",         0);
+                       ThresholdWarning->register_property  ("WarningLow",          false);
+		}
+
+		ThresholdWarning->initialize();
+            	ThresholdCritical->initialize();
+        }
+			
         }
     }
 
-- 
2.34.1

