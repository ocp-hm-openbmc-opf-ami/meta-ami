diff --git a/include/oemcommands.hpp b/include/oemcommands.hpp
index f69e050..28d25f2 100644
--- a/include/oemcommands.hpp
+++ b/include/oemcommands.hpp
@@ -27,6 +27,9 @@ static constexpr NetFn netFnGeneral = netFnOemOne;
 static constexpr NetFn netFnPlatform = netFnOemTwo;
 static constexpr NetFn netFnApp = netFnOemEight;
 
+constexpr auto netFnOem = 0x3C;
+constexpr auto netGroupExt = 0x52;
+
 namespace general
 {
 static constexpr Cmd cmdRestoreConfiguration = 0x02;
@@ -104,6 +107,13 @@ static constexpr Cmd cmdMdrEvent = 0x22;
 static constexpr Cmd cmdMdrRead = 0x23;
 static constexpr Cmd cmdMdrWrite = 0x24;
 static constexpr Cmd cmdMdrLock = 0x25;
+
+constexpr auto cmdGetUsbDescription = 0x30;
+constexpr auto cmdGetUsbSerialNum = 0x31;
+constexpr auto cmdGetRedfishHostName = 0x32;
+constexpr auto cmdGetipmiChannelRfHi = 0x33;
+constexpr auto cmdGetBootStrapAcc = 0x02;
+
 static constexpr Cmd cmdMdrIIAgentStatus = 0x30;
 static constexpr Cmd cmdMdrIIGetDir = 0x31;
 static constexpr Cmd cmdMdrIIGetDataInfo = 0x32;
@@ -120,6 +130,111 @@ static constexpr Cmd cmdSlotIpmb = 0x51;
 static constexpr Cmd cmdPFRMailboxRead = 0x84;
 } // namespace app
 
+namespace misc
+{
+constexpr auto cmdGetOEMVersion = 0x01;
+constexpr auto cmdGetFwBootupSlot = 0x03;
+constexpr auto cmdSoftPowerCycle = 0x04;
+constexpr auto cmdGetBMCBootComplete = 0x05;
+constexpr auto cmdSMBPBIPassthrough = 0x09;
+constexpr auto cmdSMBPBIPassthroughExtended = 0x0A;
+constexpr auto cmdGetPSUInventory = 0x0E;
+constexpr auto cmdGetDeviceFirmwareVersion = 0x0F;
+constexpr auto cmdSensorScanEnable = 0x85;
+constexpr auto cmdSetSSDLed = 0x63;
+constexpr auto cmdGetSSDLed = 0x64;
+constexpr auto cmdGetLedStatus = 0x65;
+constexpr auto cmdGetWpStatus = 0x8A;
+constexpr auto cmdSetWpStatus = 0x8B;
+constexpr auto cmdGetPsuPower = 0x78;
+constexpr auto cmdGetBiosBootupImage = 0x1E;
+constexpr auto cmdGetBiosConfig = 0x21;
+constexpr auto cmdGetBiosNextImage = 0x22;
+constexpr auto cmdSetBiosNextImage = 0x23;
+constexpr auto cmdGetBiosVerions = 0x24;
+constexpr auto cmdSetBiosConfig = 0x25;
+constexpr auto cmdGetUsbDescription = 0x30;
+constexpr auto cmdGetUsbSerialNum = 0x31;
+constexpr auto cmdGetRedfishHostName = 0x32;
+constexpr auto cmdGetipmiChannelRfHi = 0x33;
+constexpr auto cmdGetRedfishServiceUuid = 0x34;
+constexpr auto cmdGetRedfishServicePort = 0x35;
+constexpr auto cmdGetManagerCertFingerPrint = 0x01;
+constexpr auto cmdGetBootStrapAcc = 0x02;
+constexpr auto cmdGetMaxPMaxQConfiguration = 0x90;
+constexpr auto cmdSetMaxPMaxQConfiguration = 0x91;
+
+constexpr auto getFirmwareVersionDeviceMBFPGA = 0x00;
+constexpr auto getFirmwareVersionDeviceGBFPGA = 0x01;
+constexpr auto getFirmwareVersionDevicePSU0 = 0x02;
+constexpr auto getFirmwareVersionDevicePSU1 = 0x03;
+constexpr auto getFirmwareVersionDevicePSU2 = 0x04;
+constexpr auto getFirmwareVersionDevicePSU3 = 0x05;
+constexpr auto getFirmwareVersionDevicePSU4 = 0x06;
+constexpr auto getFirmwareVersionDevicePSU5 = 0x07;
+constexpr auto getFirmwareVersionDeviceMIDFPGA = 0x08;
+constexpr auto getFirmwareVersionDeviceCEC = 0x09;
+constexpr auto getFirmwareVersionDeviceFPGACEC = 0x0A;
+constexpr auto getFirmwareVersionDevicePEXSwitch0 = 0x10;
+constexpr auto getFirmwareVersionDevicePEXSwitch1 = 0x11;
+constexpr auto getFirmwareVersionDevicePEXSwitch2 = 0x12;
+constexpr auto getFirmwareVersionDevicePEXSwitch3 = 0x13;
+constexpr auto getFirmwareVersionDeviceBMCActive = 0x20;
+constexpr auto getFirmwareVersionDeviceBMCInactive = 0x21;
+
+constexpr auto getWPTypePEX = 0x00;
+constexpr auto getWPTypeFRU = 0x01;
+
+constexpr auto getWPIdPexSW0 = 0x00;
+constexpr auto getWPIdPexSW1 = 0x01;
+constexpr auto getWPIdPexSW2 = 0x02;
+constexpr auto getWPIdPexSW3 = 0x03;
+
+constexpr auto getWPIdMB = 0x00;
+constexpr auto getWPIdMid = 0x01;
+constexpr auto getWPIdIOEL = 0x02;
+constexpr auto getWpIdIOER = 0x03;
+constexpr auto getWpIdPDB = 0x04;
+constexpr auto getWpIdGB = 0x05;
+constexpr auto getWPIdM2 = 0x06;
+constexpr auto getWpIdSW = 0x07;
+
+constexpr auto getSSDLedTypeReadyMove = 0x30;
+constexpr auto getSSDLedTypeActivity = 0x31;
+constexpr auto getSSDLedTypeFault = 0x32;
+
+constexpr auto getSSDLedNLed = 8;
+
+constexpr auto getLedStatusPowerLed = 0x00;
+constexpr auto getLedStatusFaultLed = 0x01;
+constexpr auto getLedStatusMotherBoardLed = 0x10;
+
+constexpr auto biosConfigTypeNetwork = 0x01;
+constexpr auto biosConfigTypeRedFish = 0x02;
+
+constexpr auto getMaxPMaxQConfigurationMode = 0x00;
+constexpr auto getMaxPMaxQConfigurationCurrentPowerLimit = 0x01;
+constexpr auto getMaxPMaxQConfigurationCurrentPowerLimitP = 0x02;
+constexpr auto getMaxPMaxQConfigurationCurrentPowerLimitQ = 0x03;
+constexpr auto getMaxPMaxQConfigurationCurrentPowerLimitMax = 0x04;
+constexpr auto getMaxPMaxQConfigurationCurrentPowerLimitMin = 0x05;
+constexpr auto getMaxPMaxQConfigurationRestOfSytemPower = 0x06;
+
+constexpr auto setMaxPMaxQConfigurationMode = 0x00;
+constexpr auto setMaxPMaxQConfigurationCurrentPowerLimit = 0x01;
+
+constexpr auto staticMode = 0x01;
+constexpr auto maximumPerformanceMode = 0x01;
+constexpr auto powerSavingMode = 0x02;
+constexpr auto OemMode = 0x03;
+
+constexpr uint8_t getMaskdata(int data, int position)
+{
+    return (data >> position * 8) & 0xff;
+}
+
+} // namespace misc
+
 } // namespace intel
 
 } // namespace ipmi
diff --git a/src/oemcommands.cpp b/src/oemcommands.cpp
index 5366f80..2e18fbe 100644
--- a/src/oemcommands.cpp
+++ b/src/oemcommands.cpp
@@ -28,10 +28,30 @@
 #include <com/intel/Control/OCOTShutdownPolicy/server.hpp>
 #include <commandutils.hpp>
 #include <gpiod.hpp>
-#include <ipmid/api.hpp>
 #include <ipmid/utils.hpp>
 #include <nlohmann/json.hpp>
 #include <oemcommands.hpp>
+
+#include <bits/stdc++.h>
+#include <fcntl.h>
+#include <linux/i2c-dev.h>
+#include <linux/i2c.h>
+#include <openssl/pem.h>
+#include <openssl/x509.h>
+#include <security/pam_appl.h>
+#include <sys/ioctl.h>
+#include <unistd.h>
+#include <boost/algorithm/string.hpp>
+#include <boost/process/child.hpp>
+#include <ipmid/api.hpp>
+#include <xyz/openbmc_project/Software/Activation/server.hpp>
+#include <xyz/openbmc_project/Software/Version/server.hpp>
+
+#include <algorithm>
+#include <string>
+#include <tuple>
+#include <vector>
+
 #include <phosphor-logging/log.hpp>
 #include <sdbusplus/bus.hpp>
 #include <sdbusplus/message/types.hpp>
@@ -49,16 +69,71 @@
 #include <iostream>
 #include <regex>
 #include <set>
-#include <string>
 #include <variant>
-#include <vector>
 
 namespace ipmi
 {
+// IPMI OEM USB Linux Gadget info
+static constexpr uint16_t USB_VENDOR_ID = 0x0525;
+static constexpr uint16_t USB_PRODUCT_ID = 0xA4A2;
+static constexpr uint8_t USB_SERIAL_NUM = 0x00;
+
+// Network object in dbus
+static constexpr auto networkServiceName = "xyz.openbmc_project.Network";
+static constexpr auto networkConfigObj = "/xyz/openbmc_project/network/config";
+static constexpr auto networkConfigIntf =
+    "xyz.openbmc_project.Network.SystemConfiguration";
+
+// IPMI channel info
+//static constexpr uint8_t maxIpmiChannels = 16;
+static constexpr const char* channelConfigDefaultFilename =
+    "/usr/share/ipmi-providers/channel_config.json";
+
+// STRING DEFINES: Should sync with key's in JSON
+static constexpr const char* nameString = "name";
+static constexpr const char* isValidString = "is_valid";
+static constexpr const char* channelInfoString = "channel_info";
+static constexpr const char* mediumTypeString = "medium_type";
+static constexpr const char* protocolTypeString = "protocol_type";
+static constexpr const char* sessionSupportedString = "session_supported";
+static constexpr const char* isIpmiString = "is_ipmi";
+static constexpr const char* redfishHostInterfaceChannel = "usb0";
+
+// User Manager object in dbus
+static constexpr const char* userMgrObjBasePath = "/xyz/openbmc_project/user";
+static constexpr const char* userMgrInterface =
+    "xyz.openbmc_project.User.Manager";
+static constexpr const char* usersInterface =
+    "xyz.openbmc_project.User.Attributes";
+static constexpr const char* usersDeleteIface =
+    "xyz.openbmc_project.Object.Delete";
+static constexpr const char* createUserMethod = "CreateUser";
+static constexpr const char* deleteUserMethod = "Delete";
+
+// BIOSConfig Manager object in dbus
+static constexpr const char* biosConfigMgrPath =
+    "/xyz/openbmc_project/bios_config/manager";
+static constexpr const char* biosConfigMgrIface =
+    "xyz.openbmc_project.BIOSConfig.Manager";
+
+using GetSubTreePathsType = std::vector<std::string>;
+
+using namespace phosphor::logging;
+
+// Cert Paths
+std::string defaultCertPath = "/etc/ssl/certs/https/server.pem";
+
+static constexpr const char* persistentDataFilePath =
+    "/home/root/bmcweb_persistent_data.json";
+
 static void registerOEMFunctions() __attribute__((constructor));
 
 static constexpr size_t maxFRUStringLength = 0x3F;
 
+// HI Certificate FingerPrint error code
+static constexpr Cc ipmiCCBootStrappingDisabled = 0x80;
+static constexpr Cc ipmiCCCertificateNumberInvalid = 0xCB;
+
 static constexpr auto ethernetIntf =
     "xyz.openbmc_project.Network.EthernetInterface";
 static constexpr auto networkIPIntf = "xyz.openbmc_project.Network.IP";
@@ -4053,6 +4128,627 @@ ipmi::RspType<> ipmiOEMPartitionPowerControl(uint8_t partitionIndex,
     }
 }
 
+ipmi::RspType<uint8_t, uint8_t> ipmiGetUsbDescription(uint8_t type)
+{
+    uint8_t msbId;
+    uint8_t lsbId;
+    if (type == 0x01)
+    {
+        // Get the USB Vendor Id
+        msbId = (uint8_t)((USB_VENDOR_ID >> 8) & 0xff);
+        lsbId = (uint8_t)(USB_VENDOR_ID & 0xff);
+        return ipmi::responseSuccess(msbId, lsbId);
+    }
+    else if (type == 0x02)
+    {
+        // Get the USB Product Id
+        msbId = (uint8_t)((USB_PRODUCT_ID >> 8) & 0xff);
+        lsbId = (uint8_t)(USB_PRODUCT_ID & 0xff);
+        return ipmi::responseSuccess(msbId, lsbId);
+    }
+    else
+    {
+        return ipmi::responseInvalidFieldRequest();
+    }
+}
+ipmi::RspType<std::vector<uint8_t>> ipmiGetUsbSerialNum()
+{
+    // Get the USB Serial Number
+    std::vector<uint8_t> usbSerialNum;
+    usbSerialNum.push_back(USB_SERIAL_NUM);
+    return ipmi::responseSuccess(usbSerialNum);
+}
+
+ipmi::RspType<std::vector<uint8_t>> ipmiGetRedfishHostName()
+{
+    std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();
+    try
+    {
+        auto service =
+            ipmi::getService(*dbus, networkConfigIntf, networkConfigObj);
+        auto hostname = ipmi::getDbusProperty(*dbus, service, networkConfigObj,
+                                              networkConfigIntf, "HostName");
+        std::vector<uint8_t> respHostNameBuf;
+        std::copy(std::get<std::string>(hostname).begin(),
+                  std::get<std::string>(hostname).end(),
+                  std::back_inserter(respHostNameBuf));
+        return ipmi::responseSuccess(respHostNameBuf);
+    }
+    catch (std::exception& e)
+    {
+        log<level::ERR>("Failed to get HostName",
+                        phosphor::logging::entry("EXCEPTION=%s", e.what()));
+        return ipmi::responseResponseError();
+    }
+}
+
+ipmi::RspType<uint8_t> ipmiGetipmiChannelRfHi()
+{
+    std::ifstream jsonFile(channelConfigDefaultFilename);
+    if (!jsonFile.good())
+    {
+        log<level::INFO>("JSON file not found",
+                         entry("FILE_NAME=%s", channelConfigDefaultFilename));
+        return ipmi::responseResponseError();
+    }
+
+    nlohmann::json data = nullptr;
+    try
+    {
+        data = nlohmann::json::parse(jsonFile, nullptr, false);
+   }
+    catch (const nlohmann::json::parse_error& e)
+    {
+        log<level::DEBUG>("Corrupted channel config.",
+                          entry("MSG=%s", e.what()));
+        return ipmi::responseResponseError();
+    }
+
+    bool chFound = false;
+    uint8_t chNum;
+    for (chNum = 0; chNum < maxIpmiChannels; chNum++)
+    {
+       try
+        {
+            std::string chKey = std::to_string(chNum);
+            nlohmann::json jsonChData = data[chKey].get<nlohmann::json>();
+            if (jsonChData.is_null() ||
+                (jsonChData[nameString].get<std::string>() !=
+                 redfishHostInterfaceChannel))
+            {
+                log<level::WARNING>(
+                    "Channel not configured for Redfish Host Interface",
+                    entry("CHANNEL_NUM=%d", chNum));
+                continue;
+            }
+            nlohmann::json jsonChInfo =
+                jsonChData[channelInfoString].get<nlohmann::json>();
+            if (jsonChInfo.is_null())
+            {
+                log<level::ERR>("Invalid/corrupted channel config file");
+                return ipmi::responseResponseError();
+            }
+
+            if ((jsonChData[isValidString].get<bool>() == true) &&
+                (jsonChInfo[mediumTypeString].get<std::string>() ==
+                 "lan-802.3") &&
+                (jsonChInfo[protocolTypeString].get<std::string>() ==
+                 "ipmb-1.0") &&
+                (jsonChInfo[sessionSupportedString].get<std::string>() ==
+                "multi-session") &&
+                (jsonChInfo[isIpmiString].get<bool>() == true))
+            {
+                chFound = true;
+                break;
+            }
+        }
+        catch (const nlohmann::json::parse_error& e)
+        {
+            log<level::DEBUG>("Json Exception caught.",
+                              entry("MSG=%s", e.what()));
+            return ipmi::responseResponseError();
+        }
+    }
+    jsonFile.close();
+    if (chFound)
+    {
+        return ipmi::responseSuccess(chNum);
+    }
+    return ipmi::responseInvalidCommandOnLun();
+}
+
+bool getRfUuid(std::string& rfUuid)
+{
+    std::ifstream persistentDataFilePath(
+        "/home/root/bmcweb_persistent_data.json");
+    if (persistentDataFilePath.is_open())
+    {
+        auto data =
+            nlohmann::json::parse(persistentDataFilePath, nullptr, false);
+        if (data.is_discarded())
+        {
+            phosphor::logging::log<level::ERR>(
+                "ipmiGetRedfishServiceUuid: Error parsing persistent data in "
+                "json file.");
+           return false;
+        }
+        else
+        {
+            for (const auto& item : data.items())
+            {
+                if (item.key() == "system_uuid")
+                {
+                   const std::string* jSystemUuid =
+                        item.value().get_ptr<const std::string*>();
+                    if (jSystemUuid != nullptr)
+                    {
+                        rfUuid = *jSystemUuid;
+                        return true;
+                    }
+                }
+            }
+        }
+    }
+    return false;
+}
+
+ipmi::RspType<std::vector<uint8_t>> ipmiGetRedfishServiceUuid()
+{
+    std::string rfUuid;
+    bool ret = getRfUuid(rfUuid);
+    if (!ret)
+    {
+        phosphor::logging::log<level::ERR>(
+            "ipmiGetRedfishServiceUuid: Error reading Redfish Service UUID "
+            "File.");
+        return ipmi::responseResponseError();
+    }
+
+    // As per Redfish Host Interface Spec v1.3.0
+   // The Redfish UUID is 16byte and should be represented as below:
+    // Ex: {00112233-4455-6677-8899-AABBCCDDEEFF}
+    // 0x33 0x22 0x11 0x00 0x55 0x44 0x77 0x66 0x88 0x99 0xAA 0xBB 0xCC 0xDD
+    // 0xEE 0xFF
+
+    int start = 0;
+    int noOfBytes = 5;
+    int leftBytes = 3;
+    int totalBytes = 16;
+    std::string bytes;
+    std::string::size_type found = 0;
+    std::vector<uint8_t> resBuf;
+
+    for (int index = 0; index < noOfBytes; index++)
+    {
+        found = rfUuid.find('-', found + 1);
+        if (found == std::string::npos)
+        {
+            if (index != noOfBytes - 1)
+           {
+                break;
+            }
+        }
+
+        if (index == noOfBytes - 1)
+        {
+            bytes = rfUuid.substr(start);
+       }
+        else
+        {
+            bytes = rfUuid.substr(start, found - start);
+       }
+
+        if (index < leftBytes)
+        {
+            std::reverse(bytes.begin(), bytes.end());
+            for (int leftIndex = 0; leftIndex < bytes.length(); leftIndex += 2)
+           {
+                std::swap(bytes[leftIndex + 1], bytes[leftIndex]);
+                resBuf.push_back(
+                    std::stoi(bytes.substr(leftIndex, 2), nullptr, 16));
+            }
+        }
+        else
+        {
+            for (int rightIndex = 0; rightIndex < bytes.length();
+                 rightIndex += 2)
+            {
+                resBuf.push_back(
+                   std::stoi(bytes.substr(rightIndex, 2), nullptr, 16));
+            }
+        }
+        start = found + 1;
+    }
+
+    if (resBuf.size() != totalBytes)
+    {
+        phosphor::logging::log<level::ERR>(
+            "ipmiGetRedfishServiceUuid: Invalid Redfish Service UUID found.");
+        return ipmi::responseResponseError();
+    }
+    return ipmi::responseSuccess(resBuf);
+}
+
+ipmi::RspType<uint8_t, uint8_t> ipmiGetRedfishServicePort()
+{
+    // default Redfish Service Port Number is 443
+    int redfishPort = 443;
+    uint8_t lsb = redfishPort & 0xff;
+    uint8_t msb = redfishPort >> 8 & 0xff;
+    return ipmi::responseSuccess(msb, lsb);
+}
+
+
+static bool getCredentialBootStrap()
+{
+    std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();
+    try
+    {
+        auto biosService =
+            ipmi::getService(*dbus, biosConfigMgrIface, biosConfigMgrPath);
+        auto credentialBootStrap =
+            ipmi::getDbusProperty(*dbus, biosService, biosConfigMgrPath,
+                                  biosConfigMgrIface, "CredentialBootstrap");
+
+        return std::get<bool>(credentialBootStrap);
+    }
+    catch (std::exception& e)
+    {
+        log<level::ERR>("Failed to get CredentialBootstrap status",
+                        phosphor::logging::entry("EXCEPTION=%s", e.what()));
+        return false;
+    }
+}
+
+static void setCredentialBootStrap(const uint8_t& disableCredBootStrap)
+{
+    std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();
+    auto biosService =
+        ipmi::getService(*dbus, biosConfigMgrIface, biosConfigMgrPath);
+    // if disable crendential BootStrap status is 0xa5,
+    // then Keep credential bootstrapping enabled
+    if (disableCredBootStrap == 0xa5)
+    {
+        ipmi::setDbusProperty(*dbus, biosService, biosConfigMgrPath,
+                              biosConfigMgrIface, "CredentialBootstrap",
+                              bool(true));
+        phosphor::logging::log<phosphor::logging::level::INFO>(
+            "ipmiGetBootStrapAccount: Disable CredentialBootstrapping"
+            "property set to true");
+    }
+    else
+    {
+        ipmi::setDbusProperty(*dbus, biosService, biosConfigMgrPath,
+                              biosConfigMgrIface, "CredentialBootstrap",
+                              bool(false));
+        phosphor::logging::log<phosphor::logging::level::INFO>(
+            "ipmiGetBootStrapAccount: Disable CredentialBootstrapping"
+            "property set to false");
+    }
+}
+
+static int pamFunctionConversation(int numMsg, const struct pam_message** msg,
+                                   struct pam_response** resp, void* appdataPtr)
+{
+    if (appdataPtr == nullptr)
+    {
+        return PAM_CONV_ERR;
+    }
+    if (numMsg <= 0 || numMsg >= PAM_MAX_NUM_MSG)
+    {
+        return PAM_CONV_ERR;
+    }
+
+    for (int i = 0; i < numMsg; ++i)
+    {
+        /* Ignore all PAM messages except prompting for hidden input */
+        if (msg[i]->msg_style != PAM_PROMPT_ECHO_OFF)
+        {
+            continue;
+        }
+
+        /* Assume PAM is only prompting for the password as hidden input */
+        /* Allocate memory only when PAM_PROMPT_ECHO_OFF is encounterred */
+        char* appPass = reinterpret_cast<char*>(appdataPtr);
+        size_t appPassSize = std::strlen(appPass);
+        if (appPassSize >= PAM_MAX_RESP_SIZE)
+        {
+            return PAM_CONV_ERR;
+        }
+
+        char* pass = reinterpret_cast<char*>(malloc(appPassSize + 1));
+        if (pass == nullptr)
+        {
+            return PAM_BUF_ERR;
+        }
+
+        void* ptr =
+            calloc(static_cast<size_t>(numMsg), sizeof(struct pam_response));
+        if (ptr == nullptr)
+        {
+            free(pass);
+            return PAM_BUF_ERR;
+        }
+
+        std::strncpy(pass, appPass, appPassSize + 1);
+        *resp = reinterpret_cast<pam_response*>(ptr);
+        resp[i]->resp = pass;
+        return PAM_SUCCESS;
+    }
+    return PAM_CONV_ERR;
+}
+
+int pamUpdatePasswd(const char* username, const char* password)
+{
+    const struct pam_conv localConversation = {pamFunctionConversation,
+                                               const_cast<char*>(password)};
+    pam_handle_t* localAuthHandle = NULL; // this gets set by pam_start
+    int retval =
+        pam_start("passwd", username, &localConversation, &localAuthHandle);
+    if (retval != PAM_SUCCESS)
+    {
+        return retval;
+    }
+
+    retval = pam_chauthtok(localAuthHandle, PAM_SILENT);
+    if (retval != PAM_SUCCESS)
+    {
+        pam_end(localAuthHandle, retval);
+        return retval;
+    }
+    return pam_end(localAuthHandle, PAM_SUCCESS);
+}
+
+bool isValidUserName(ipmi::Context::ptr ctx, const std::string& userName)
+{
+    if (userName.empty())
+    {
+        phosphor::logging::log<level::ERR>("Requested empty UserName string");
+        return false;
+    }
+    if (!std::regex_match(userName.c_str(),
+                          std::regex("[a-zA-z_][a-zA-Z_0-9]*")))
+    {
+        phosphor::logging::log<level::ERR>("Unsupported characters in string");
+        return false;
+    }
+
+    boost::system::error_code ec;
+    GetSubTreePathsType subtreePaths =
+        ctx->bus->yield_method_call<GetSubTreePathsType>(
+            ctx->yield, ec, "xyz.openbmc_project.ObjectMapper",
+            "/xyz/openbmc_project/object_mapper",
+            "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths",
+            userMgrObjBasePath, 0, std::array<const char*, 1>{usersInterface});
+    if (ec)
+    {
+        phosphor::logging::log<level::ERR>(
+            "ipmiGetBootStrapAccount: Failed to get User Paths");
+        return false;
+    }
+
+    if (subtreePaths.empty())
+    {
+        phosphor::logging::log<level::ERR>(
+            "ipmiGetBootStrapAccount: empty subtreepaths");
+        return false;
+    }
+
+    for (const auto& objectPath : subtreePaths)
+    {
+        if (objectPath.find(userName) != std::string::npos)
+        {
+            log<level::ERR>(
+                "User name already exists",
+                phosphor::logging::entry("UserName= %s", userName.c_str()));
+            return false;
+        }
+    }
+    return true;
+}
+
+bool getAlphaNumString(std::string& uniqueStr)
+{
+    std::ifstream randFp("/dev/urandom", std::ifstream::in);
+    char byte;
+    uint8_t maxStrSize = 16;
+
+    if (!randFp.is_open())
+    {
+        phosphor::logging::log<level::ERR>(
+            "ipmiGetBootStrapAccount: Failed to open urandom file");
+        return false;
+    }
+
+    for (uint8_t it = 0; it < maxStrSize; it++)
+    {
+        while (1)
+        {
+            if (randFp.get(byte))
+            {
+                if (iswalnum(byte))
+                {
+                    break;
+                }
+            }
+        }
+        uniqueStr.push_back(byte);
+    }
+    randFp.close();
+    return true;
+}
+
+ipmi::RspType<std::vector<uint8_t>, std::vector<uint8_t>>
+   ipmiGetBootStrapAccount(ipmi::Context::ptr ctx,
+                            uint8_t disableCredBootStrap)
+{
+    try
+    {
+        // Check the CredentialBootstrapping property status,
+        // if disabled, then reject the command with success code.
+        bool isCredentialBooStrapSet = getCredentialBootStrap();
+        if (!isCredentialBooStrapSet)
+        {
+            phosphor::logging::log<level::ERR>(
+                "ipmiGetBootStrapAccount: Credential BootStrapping Disabled "
+                "Get BootStrap Account command rejected.");
+            return ipmi::responseSuccess();
+        }
+
+        std::string userName;
+        std::string password;
+
+        bool ret = getAlphaNumString(userName);
+        if (!ret)
+        {
+            phosphor::logging::log<level::ERR>(
+                "ipmiGetBootStrapAccount: Failed to generate alphanumeric "
+                "UserName");
+            return ipmi::responseResponseError();
+        }
+        if (!isValidUserName(ctx, userName))
+        {
+            phosphor::logging::log<level::ERR>(
+                "ipmiGetBootStrapAccount: Failed to generate valid UserName");
+            return ipmi::responseResponseError();
+        }
+
+        ret = getAlphaNumString(password);
+        if (!ret)
+        {
+            phosphor::logging::log<level::ERR>(
+                "ipmiGetBootStrapAccount: Failed to generate alphanumeric "
+                "Password");
+            return ipmi::responseResponseError();
+        }
+
+        std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();
+        std::string service =
+            getService(*dbus, userMgrInterface, userMgrObjBasePath);
+
+        // create the new user with only redfish-hostiface group access
+        auto method = dbus->new_method_call(service.c_str(), userMgrObjBasePath,
+                                            userMgrInterface, createUserMethod);
+        method.append(userName, std::vector<std::string>{"redfish-hostiface"},
+                      "priv-admin", true);
+        auto reply = dbus->call(method);
+        if (reply.is_method_error())
+        {
+            phosphor::logging::log<phosphor::logging::level::ERR>(
+                "Error returns from call to dbus. BootStrap Failed");
+            return ipmi::responseResponseError();
+        }
+
+        // update the password
+        boost::system::error_code ec;
+        int retval = pamUpdatePasswd(userName.c_str(), password.c_str());
+        if (retval != PAM_SUCCESS)
+        {
+            dbus->yield_method_call<void>(ctx->yield, ec, service.c_str(),
+                                          userMgrObjBasePath + userName,
+                                          usersDeleteIface, "Delete");
+
+            phosphor::logging::log<phosphor::logging::level::ERR>(
+                "ipmiGetBootStrapAccount : Failed to update password.");
+            return ipmi::responseUnspecifiedError();
+        }
+        else
+        {
+            // update the "CredentialBootstrap" Dbus property w.r.to
+            // disable crendential BootStrap status
+            setCredentialBootStrap(disableCredBootStrap);
+
+            std::vector<uint8_t> respUserNameBuf, respPasswordBuf;
+            std::copy(userName.begin(), userName.end(),
+                      std::back_inserter(respUserNameBuf));
+            std::copy(password.begin(), password.end(),
+                      std::back_inserter(respPasswordBuf));
+            return ipmi::responseSuccess(respUserNameBuf, respPasswordBuf);
+        }
+    }
+    catch (const std::exception& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "ipmiGetBootStrapAccount : Failed to generate BootStrap Account "
+            "Credentials");
+        return ipmi::responseResponseError();
+    }
+}
+
+ipmi::RspType<std::vector<uint8_t>>
+    ipmiGetManagerCertFingerPrint(ipmi::Context::ptr ctx, uint8_t certNum)
+{
+    unsigned int n;
+    const EVP_MD* fdig = EVP_sha256();
+    // Check the CredentialBootstrapping property status,
+    // if disabled, then reject the command with success code.
+    bool isCredentialBooStrapSet = getCredentialBootStrap();
+    if (!isCredentialBooStrapSet)
+    {
+        phosphor::logging::log<level::ERR>(
+            "ipmiGetManagerCertFingerPrint: Credential BootStrapping Disabled "
+            "Get Manager Certificate FingerPrint command rejected.");
+        return ipmi::response(ipmi::ipmiCCBootStrappingDisabled);
+    }
+
+   if (certNum != 1)
+    {
+        phosphor::logging::log<level::ERR>(
+            "ipmiGetManagerCertFingerPrint: Invalid certificate number "
+            "Get Manager Certificate failed");
+        return ipmi::response(ipmi::ipmiCCCertificateNumberInvalid);
+    }
+    BIO* cert;
+    X509* x = NULL;
+    cert = BIO_new_file(defaultCertPath.c_str(), "rb");
+    if (cert == NULL)
+    {
+        log<level::ERR>(
+            "ipmiGetManagerCertFingerPrint: unable to open certificate");
+        return ipmi::response(ipmi::ccResponseError);
+    }
+    x = PEM_read_bio_X509_AUX(cert, NULL, NULL, NULL);
+    if (x == NULL)
+    {
+        BIO_free(cert);
+        log<level::ERR>(
+            "ipmiGetManagerCertFingerPrint: unable to load certificate");
+        return ipmi::response(ipmi::ccResponseError);
+    }
+    std::vector<uint8_t> fingerPrintData(EVP_MAX_MD_SIZE);
+    if (!X509_digest(x, fdig, fingerPrintData.data(), &n))
+   {
+        X509_free(x);
+        BIO_free(cert);
+        log<level::ERR>("ipmiGetManagerCertFingerPrint: out of memory");
+        return ipmi::response(ipmi::ccResponseError);
+    }
+    fingerPrintData.resize(n);
+
+    X509_free(x);
+    BIO_free(cert);
+
+    try
+    {
+        std::vector<uint8_t> respBuf;
+        respBuf.push_back(1); // 01h: SHA-256. The length of the fingerprint
+                              // will be 32 bytes.
+
+       for (const auto& data : fingerPrintData)
+        {
+            respBuf.push_back(data);
+        }
+        return ipmi::responseSuccess(respBuf);
+    }
+    catch (std::exception& e)
+    {
+       log<level::ERR>("Failed to get Manager Cert FingerPrint",
+                        phosphor::logging::entry("EXCEPTION=%s", e.what()));
+        return ipmi::responseResponseError();
+    }
+}
+
+
 static void registerOEMFunctions(void)
 {
     phosphor::logging::log<phosphor::logging::level::INFO>(
@@ -4230,6 +4926,84 @@ static void registerOEMFunctions(void)
 
     registerHandler(prioOemBase, intel::netFnApp, intel::app::cmdPFRMailboxRead,
                     Privilege::Admin, ipmiOEMReadPFRMailbox);
+
+
+    // <Get USB Description>
+    log<level::NOTICE>(
+        "Registering ", entry("NetFn:[%02Xh], ", ipmi::intel::netFnOem),
+        entry("Cmd:[%02Xh]", ipmi::intel::misc::cmdGetUsbDescription));
+
+    ipmi::registerHandler(ipmi::prioOemBase, ipmi::intel::netFnOem,
+                          ipmi::intel::misc::cmdGetUsbDescription,
+                          ipmi::Privilege::Admin, ipmi::ipmiGetUsbDescription);
+
+    // <Get Virtual USB Serial Number>
+    log<level::NOTICE>(
+        "Registering ", entry("NetFn:[%02Xh], ", ipmi::intel::netFnOem),
+        entry("Cmd:[%02Xh]", ipmi::intel::misc::cmdGetUsbSerialNum));
+
+    ipmi::registerHandler(ipmi::prioOemBase, ipmi::intel::netFnOem,
+                          ipmi::intel::misc::cmdGetUsbSerialNum,
+                          ipmi::Privilege::Admin, ipmi::ipmiGetUsbSerialNum);
+
+    // <Get Redfish Service Hostname>
+    log<level::NOTICE>(
+        "Registering ", entry("NetFn:[%02Xh], ", ipmi::intel::netFnOem),
+        entry("Cmd:[%02Xh]", ipmi::intel::misc::cmdGetRedfishHostName));
+
+    ipmi::registerHandler(ipmi::prioOemBase, ipmi::intel::netFnOem,
+                          ipmi::intel::misc::cmdGetRedfishHostName,
+                          ipmi::Privilege::Admin, ipmi::ipmiGetRedfishHostName);
+
+    // <Get IPMI Channel Number of Redfish HostInterface>
+    log<level::NOTICE>(
+        "Registering ", entry("NetFn:[%02Xh], ", ipmi::intel::netFnOem),
+        entry("Cmd:[%02Xh]", ipmi::intel::misc::cmdGetipmiChannelRfHi));
+
+    ipmi::registerHandler(ipmi::prioOemBase, ipmi::intel::netFnOem,
+                          ipmi::intel::misc::cmdGetipmiChannelRfHi,
+                          ipmi::Privilege::Admin, ipmi::ipmiGetipmiChannelRfHi);
+
+    // <Get Redfish Service UUID>
+    log<level::NOTICE>(
+        "Registering ", entry("NetFn:[%02Xh], ", ipmi::intel::netFnOem),
+        entry("Cmd:[%02Xh]", ipmi::intel::misc::cmdGetRedfishServiceUuid));
+
+    ipmi::registerHandler(ipmi::prioOemBase, ipmi::intel::netFnOem,
+                          ipmi::intel::misc::cmdGetRedfishServiceUuid,
+                          ipmi::Privilege::Admin,
+                          ipmi::ipmiGetRedfishServiceUuid);
+
+    // <Get Redfish Service Port Number>
+    log<level::NOTICE>(
+        "Registering ", entry("NetFn:[%02Xh], ", ipmi::intel::netFnOem),
+        entry("Cmd:[%02Xh]", ipmi::intel::misc::cmdGetRedfishServicePort));
+
+    ipmi::registerHandler(ipmi::prioOemBase, ipmi::intel::netFnOem,
+                          ipmi::intel::misc::cmdGetRedfishServicePort,
+                          ipmi::Privilege::Admin,
+                          ipmi::ipmiGetRedfishServicePort);
+
+   // <Get Bootstrap Account Credentials>
+    log<level::NOTICE>(
+        "Registering ", entry("GrpExt:[%02Xh], ", ipmi::intel::netGroupExt),
+        entry("Cmd:[%02Xh]", ipmi::intel::misc::cmdGetBootStrapAcc));
+
+    ipmi::registerGroupHandler(ipmi::prioOpenBmcBase, ipmi::intel::netGroupExt,
+                               ipmi::intel::misc::cmdGetBootStrapAcc,
+                               ipmi::Privilege::sysIface,
+                               ipmi::ipmiGetBootStrapAccount);
+
+    // <Get Manager Certificate Fingerprint>
+    log<level::NOTICE>(
+        "Registering ", entry("GrpExt:[%02Xh], ", ipmi::intel::netGroupExt),
+        entry("Cmd:[%02Xh]", ipmi::intel::misc::cmdGetManagerCertFingerPrint));
+
+    ipmi::registerGroupHandler(ipmi::prioOpenBmcBase, ipmi::intel::netGroupExt,
+                               ipmi::intel::misc::cmdGetManagerCertFingerPrint,
+                               ipmi::Privilege::Admin,
+                               ipmi::ipmiGetManagerCertFingerPrint);
+
 }
 
 } // namespace ipmi
