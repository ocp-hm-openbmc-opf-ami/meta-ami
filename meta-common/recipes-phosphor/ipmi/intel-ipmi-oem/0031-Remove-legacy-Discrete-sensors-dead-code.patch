From c33da929539c12bbeed061af73aa6d35825af9ce Mon Sep 17 00:00:00 2001
From: vipinc <vipinc@ami.com>
Date: Tue, 29 Aug 2023 16:35:36 +0530
Subject: [PATCH] Removed legacy Discrete sensors dead code

This patch removes the dead code for Discrete processor and
watchdog2 sensors. In OneTree as new Generic discrete sensors
design is being followed legacy code with respect to sensor
type for constructing SDR is not requried.

Tested in Intel Archrecity:
- Verified Status cpu[0-1] and watchdog2 sensors are listing in IPMI
and the Event are updated as expected

root@AMIOT-6226b9206dd1:~# ipmitool sensor | grep -e "Status cpu" -e "Watchdog"
Status cpu0      | 0x0        | discrete   | 0x8000| na        | na        | na        | na        | na        | na
Status cpu1      | 0x0        | discrete   | 0x8000| na        | na        | na        | na        | na        | na
Watchdog2        | 0x0        | discrete   | 0x0800| na        | na        | na        | na        | na        | na
root@AMIOT-6226b9206dd1:~#
root@AMIOT-6226b9206dd1:~# ipmitool sdr elist | grep -e "Status cpu" -e "Watchdog"
Status cpu0      | 02h | ok  |  3.1 | Presence detected
Status cpu1      | 03h | ok  |  3.1 | Presence detected
Watchdog2        | 2Bh | ok  | 46.1 | Power cycle

D-Bus Instance
1) Status cpu0:
root@AMIOT-6226b9206dd1:~# busctl introspect xyz.openbmc_project.ProcessorStatus /xyz/openbmc_project/sensors/cpu/Status_cpu0
NAME                                        TYPE      SIGNATURE RESULT/VALUE                             FLAGS
org.freedesktop.DBus.Introspectable         interface -         -                                        -
.Introspect                                 method    -         s                                        -
org.freedesktop.DBus.Peer                   interface -         -                                        -
.GetMachineId                               method    -         s                                        -
.Ping                                       method    -         -                                        -
org.freedesktop.DBus.Properties             interface -         -                                        -
.Get                                        method    ss        v                                        -
.GetAll                                     method    s         a{sv}                                    -
.Set                                        method    ssv       -                                        -
.PropertiesChanged                          signal    sa{sv}as  -                                        -
xyz.openbmc_project.Association.Definitions interface -         -                                        -
.Associations                               property  a(sss)    1 "chassis" "all_sensors" "/xyz/openb... emits-change
xyz.openbmc_project.Sensor.State            interface -         -                                        -
.State                                      property  q         128                                      emits-change writable

2)Watchdog2:
root@AMIOT-6226b9206dd1:~# busctl introspect xyz.openbmc_project.SystemSensor /xyz/openbmc_project/sensors/watchdog/Watchdog2
NAME                                        TYPE      SIGNATURE RESULT/VALUE                             FLAGS
org.freedesktop.DBus.Introspectable         interface -         -                                        -
.Introspect                                 method    -         s                                        -
org.freedesktop.DBus.Peer                   interface -         -                                        -
.GetMachineId                               method    -         s                                        -
.Ping                                       method    -         -                                        -
org.freedesktop.DBus.Properties             interface -         -                                        -
.Get                                        method    ss        v                                        -
.GetAll                                     method    s         a{sv}                                    -
.Set                                        method    ssv       -                                        -
.PropertiesChanged                          signal    sa{sv}as  -                                        -
xyz.openbmc_project.Association.Definitions interface -         -                                        -
.Associations                               property  a(sss)    1 "chassis" "all_sensors" "/xyz/openb... emits-change
xyz.openbmc_project.Sensor.State            interface -         -                                        -
.State                                      property  q         8                                        emits-change writable

Signed-off-by: vipinc <vipinc@ami.com>
---
 include/sdrutils.hpp       |   4 +-
 include/sensorcommands.hpp |  19 ---
 src/sensorcommands.cpp     | 290 -------------------------------------
 3 files changed, 1 insertion(+), 312 deletions(-)

diff --git a/include/sdrutils.hpp b/include/sdrutils.hpp
index b850c38..337d985 100644
--- a/include/sdrutils.hpp
+++ b/include/sdrutils.hpp
@@ -260,10 +260,8 @@ inline static uint16_t getSensorSubtree(std::shared_ptr<SensorSubTree>& subtree)
                                            "xyz.openbmc_project.ObjectMapper",
                                            "GetSubTree");
     static constexpr const auto depth = 2;
-    static constexpr std::array<const char*, 6> interfaces = {
+    static constexpr std::array<const char*, 4> interfaces = {
         "xyz.openbmc_project.Sensor.Value",
-        "xyz.openbmc_project.Inventory.Item.Cpu",
-        "xyz.openbmc_project.Inventory.Item.Watchdog",
         "xyz.openbmc_project.Sensor.State",
         "xyz.openbmc_project.Sensor.Threshold.Warning",
         "xyz.openbmc_project.Sensor.Threshold.Critical"};
diff --git a/include/sensorcommands.hpp b/include/sensorcommands.hpp
index ac67658..f0aa7b6 100644
--- a/include/sensorcommands.hpp
+++ b/include/sensorcommands.hpp
@@ -110,25 +110,6 @@ enum class IPMIGetSensorEventEnableThresholds : uint8_t
     upperNonRecoverableGoingHigh = 11,
 };
 
-/**
- * @enum processor sensor event enable bit mask
- */
-enum class IPMISensorEventEnableProc : uint8_t
-{
-    procPresenceDetected = (1 << 7),
-};
-
-/**
- * @enum watchdog2 sensor event enable bit mask
- */
-enum class IPMISensorEventEnableWatchdog2 : uint8_t
-{
-    watchdog2None = (1 << 0),
-    watchdog2HardReset = (1 << 1),
-    watchdog2PowerOff = (1 << 2),
-    watchdog2PowerCycle = (1 << 3),
-};
-
 enum class IPMINetfnSensorCmds : ipmi_cmd_t
 {
     ipmiCmdGetDeviceSDRInfo = 0x20,
diff --git a/src/sensorcommands.cpp b/src/sensorcommands.cpp
index 1325a04..f62039e 100644
--- a/src/sensorcommands.cpp
+++ b/src/sensorcommands.cpp
@@ -163,68 +163,8 @@ namespace sensor
 {
 static constexpr const char* sensorInterface =
     "xyz.openbmc_project.Sensor.Value";
-static constexpr const char* cpuInterface =
-    "xyz.openbmc_project.Inventory.Item.Cpu";
-static constexpr const char* watchdog2Interface =
-    "xyz.openbmc_project.Inventory.Item.Watchdog";
 static constexpr const char* discreteInterface =
     "xyz.openbmc_project.Sensor.State";
-/**
- * @brief Gets assertion status for Processor type sensor
- *
- * @param sensorMap - map of dbus interface
- * @param assertions - assertion status
- * @return bool - true if valid, false otherwise
- */
-bool getCpuStatus(const SensorMap& sensorMap, uint8_t& assertions)
-{
-    auto presenceObject = sensorMap.find("xyz.openbmc_project.Inventory.Item");
-    if (presenceObject != sensorMap.end())
-    {
-        auto present = presenceObject->second.find("Present");
-        if (present != presenceObject->second.end())
-        {
-            if (std::get<bool>(present->second))
-            {
-                assertions |= static_cast<uint8_t>(
-                    IPMISensorReadingByte3::procPresenceDetected);
-            }
-        }
-    }
-
-    return true;
-}
-
-bool getwd2Status(const SensorMap& sensorMap, uint8_t& assertions)
-{
-    auto statusObject =
-        sensorMap.find("xyz.openbmc_project.Inventory.Item.Watchdog");
-    if (statusObject != sensorMap.end())
-    {
-        auto status = statusObject->second.find("Status");
-        if (status != statusObject->second.end())
-        {
-            std::string action = std::get<std::string>(status->second);
-            if (action == "HardReset")
-            {
-                assertions |= static_cast<uint8_t>(
-                    IPMISensorReadingByte3::watchdog2HardReset);
-            }
-            if (action == "PowerOff")
-            {
-                assertions |= static_cast<uint8_t>(
-                    IPMISensorReadingByte3::watchdog2PowerOff);
-            }
-            if (action == "PowerCycle")
-            {
-                assertions |= static_cast<uint8_t>(
-                    IPMISensorReadingByte3::watchdog2PowerCycle);
-            }
-        }
-    }
-
-    return true;
-}
 
 bool getDiscreteStatus(const SensorMap& sensorMap, const std::string path,
                        uint16_t& assertions)
@@ -435,172 +375,6 @@ static void setMeStatus(uint8_t eventData2, uint8_t eventData3, bool disable)
     }
 }
 
-bool constructCpuSdr(ipmi::Context::ptr ctx, uint16_t sensorNum,
-                     uint16_t recordID, const std::string& service,
-                     const std::string& path,
-                     get_sdr::SensorDataCompactRecord& record)
-{
-    uint8_t sensorNumber = static_cast<uint8_t>(sensorNum);
-    uint8_t lun = static_cast<uint8_t>(sensorNum >> 8);
-    uint8_t entityId = 0x03;
-    uint8_t entityInstance = 0x01;
-
-    get_sdr::header::set_record_id(
-        recordID, reinterpret_cast<get_sdr::SensorDataRecordHeader*>(&record));
-    record.header.sdr_version = ipmiSdrVersion;
-    record.header.record_type = get_sdr::SENSOR_DATA_COMPACT_RECORD;
-    record.header.record_length = sizeof(get_sdr::SensorDataCompactRecord) -
-                                  sizeof(get_sdr::SensorDataRecordHeader);
-    record.key.owner_id = bmcI2CAddr;
-    record.key.owner_lun = lun;
-    record.key.sensor_number = sensorNumber;
-    record.body.sensor_type = processorSensorType;
-    record.body.entity_id = entityId;
-    record.body.entity_instance = entityInstance;
-
-    std::string type = getSensorTypeStringFromPath(path);
-    auto typeCstr = type.c_str();
-    for (const auto& [unitsType, units] : sensorUnits)
-    {
-        if (type == unitsType)
-        {
-            record.body.sensor_units_2_base = static_cast<uint8_t>(units);
-        }
-    }
-    record.body.event_reading_type = sensorSpecificEvent;
-    SensorMap sensorMap;
-    if (!getSensorMap(ctx->yield, service, path, sensorMap,
-                      sensorMapSdrUpdatePeriod))
-    {
-        phosphor::logging::log<phosphor::logging::level::ERR>(
-            "Failed to update sensor map for Processor sensor",
-            phosphor::logging::entry("SERVICE=%s", service.c_str()),
-            phosphor::logging::entry("PATH=%s", path.c_str()));
-        return false;
-    }
-
-    // follow the association chain to get the parent board's entityid and
-    // entityInstance
-    updateIpmiFromAssociation(path, sensorMap, entityId, entityInstance);
-    std::string name;
-    size_t nameStart = path.rfind("/");
-    if (nameStart != std::string::npos)
-    {
-        name = path.substr(nameStart + 1, std::string::npos - nameStart);
-    }
-    std::replace(name.begin(), name.end(), '_', ' ');
-    if (name.size() > FULL_RECORD_ID_STR_MAX_LENGTH)
-    {
-        constexpr std::array<std::pair<const char*, const char*>, 2>
-            replaceWords = {std::make_pair("Output", "Out"),
-                            std::make_pair("Input", "In")};
-        for (const auto& [find, replace] : replaceWords)
-        {
-            boost::replace_all(name, find, replace);
-        }
-        name.resize(FULL_RECORD_ID_STR_MAX_LENGTH);
-    }
-    record.body.id_string_info = name.size();
-    std::strncpy(record.body.id_string, name.c_str(),
-                 sizeof(record.body.id_string));
-    details::sdrStatsTable.updateName(sensorNumber, name);
-
-    if (sensorMap.find("xyz.openbmc_project.Inventory.Item") != sensorMap.end())
-    {
-        record.body.supported_assertions[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableProc::procPresenceDetected);
-        record.body.supported_deassertions[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableProc::procPresenceDetected);
-        record.body.discrete_reading_setting_mask[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableProc::procPresenceDetected);
-    }
-    return true;
-}
-bool constructWatchdog2Sdr(ipmi::Context::ptr ctx, uint16_t sensorNum,
-                           uint16_t recordID, const std::string& service,
-                           const std::string& path,
-                           get_sdr::SensorDataCompactRecord& record)
-{
-    uint8_t sensorNumber = static_cast<uint8_t>(sensorNum);
-    uint8_t lun = static_cast<uint8_t>(sensorNum >> 8);
-    uint8_t entityId = 0x2e;
-    uint8_t entityInstance = 0x01;
-
-    get_sdr::header::set_record_id(
-        recordID, reinterpret_cast<get_sdr::SensorDataRecordHeader*>(&record));
-    record.header.sdr_version = ipmiSdrVersion;
-    record.header.record_type = get_sdr::SENSOR_DATA_COMPACT_RECORD;
-    record.header.record_length = sizeof(get_sdr::SensorDataCompactRecord) -
-                                  sizeof(get_sdr::SensorDataRecordHeader);
-    record.key.owner_id = bmcI2CAddr;
-    record.key.owner_lun = lun;
-    record.key.sensor_number = sensorNumber;
-    record.body.sensor_type = watchdog2SensorType;
-    record.body.entity_id = entityId;
-    record.body.entity_instance = entityInstance;
-    std::string type = getSensorTypeStringFromPath(path);
-    auto typeCstr = type.c_str();
-
-    for (const auto& [unitsType, units] : sensorUnits)
-    {
-        if (type == unitsType)
-        {
-            record.body.sensor_units_2_base = static_cast<uint8_t>(units);
-        }
-    }
-    record.body.event_reading_type = sensorSpecificEvent;
-    SensorMap sensorMap;
-    if (!getSensorMap(ctx->yield, service, path, sensorMap,
-                      sensorMapSdrUpdatePeriod))
-    {
-        phosphor::logging::log<phosphor::logging::level::ERR>(
-            "Failed to update sensor map for watchdog2 sensor",
-            phosphor::logging::entry("SERVICE=%s", service.c_str()),
-            phosphor::logging::entry("PATH=%s", path.c_str()));
-        return false;
-    }
-    // follow the association chain to get the parent board's entityid and
-    // entityInstance
-    updateIpmiFromAssociation(path, sensorMap, entityId, entityInstance);
-    std::string name;
-    size_t nameStart = path.rfind("/");
-    if (nameStart != std::string::npos)
-    {
-        name = path.substr(nameStart + 1, std::string::npos - nameStart);
-    }
-    std::replace(name.begin(), name.end(), '_', ' ');
-    record.body.id_string_info = name.size();
-    std::strncpy(record.body.id_string, name.c_str(),
-                 sizeof(record.body.id_string));
-    details::sdrStatsTable.updateName(sensorNumber, name);
-    if (sensorMap.find("xyz.openbmc_project.Inventory.Item.Watchdog") !=
-        sensorMap.end())
-    {
-        // HardReset
-        record.body.supported_assertions[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2HardReset);
-        record.body.supported_deassertions[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2HardReset);
-        record.body.discrete_reading_setting_mask[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2HardReset);
-        // PowerOff
-        record.body.supported_assertions[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2PowerOff);
-        record.body.supported_deassertions[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2PowerOff);
-        record.body.discrete_reading_setting_mask[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2PowerOff);
-        // PowerCycle
-        record.body.supported_assertions[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2PowerCycle);
-        record.body.supported_deassertions[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2PowerCycle);
-        record.body.discrete_reading_setting_mask[0] |= static_cast<uint8_t>(
-            IPMISensorEventEnableWatchdog2::watchdog2PowerCycle);
-    }
-    return true;
-}
-
 bool constructDiscreteSdr(ipmi::Context::ptr ctx, uint16_t sensorNum,
                           uint16_t recordID, const std::string& service,
                           const std::string& path,
@@ -822,44 +596,6 @@ ipmi::RspType<uint8_t, uint8_t, uint8_t, std::optional<uint8_t>>
         return ipmi::responseResponseError();
     }
 
-    auto cpuInterface = sensorMap.find(sensor::cpuInterface);
-    if (cpuInterface != sensorMap.end())
-    {
-        uint8_t assertions = 0;
-
-        if (!sensor::getCpuStatus(sensorMap, assertions))
-        {
-            return ipmi::responseResponseError();
-        }
-
-        uint8_t value = 0;
-        uint8_t operation = 0;
-        operation |=
-            static_cast<uint8_t>(IPMISensorReadingByte2::sensorScanningEnable);
-
-        return ipmi::responseSuccess(value, operation, assertions,
-                                     std::nullopt);
-    }
-
-    auto wd2Interface = sensorMap.find(sensor::watchdog2Interface);
-    if (wd2Interface != sensorMap.end())
-    {
-        uint8_t assertions = 0;
-
-        if (!sensor::getwd2Status(sensorMap, assertions))
-        {
-            return ipmi::responseResponseError();
-        }
-
-        uint8_t value = 0;
-        uint8_t operation = 0;
-        operation |=
-            static_cast<uint8_t>(IPMISensorReadingByte2::sensorScanningEnable);
-
-        return ipmi::responseSuccess(value, operation, assertions,
-                                     std::nullopt);
-    }
-
     // To handle Discrete sensor
     auto discInterface = sensorMap.find(sensor::discreteInterface);
     if (discInterface != sensorMap.end())
@@ -1996,32 +1732,6 @@ static int
     recordData.insert(recordData.end(), (uint8_t*)&record,
                       ((uint8_t*)&record) + sizeof(record));
     }
-    // handle cpu sensors
-    if (std::find(interfaces.begin(), interfaces.end(), sensor::cpuInterface) !=
-        interfaces.end())
-    {
-        get_sdr::SensorDataCompactRecord record = {0};
-        if (!constructCpuSdr(ctx, sensorNum, recordID, connection, path,
-                             record))
-        {
-            return GENERAL_ERROR;
-        }
-        recordData.insert(recordData.end(), (uint8_t*)&record,
-                          ((uint8_t*)&record) + sizeof(record));
-    }
-    // handle watchdog2 sensors
-    if (std::find(interfaces.begin(), interfaces.end(),
-                  sensor::watchdog2Interface) != interfaces.end())
-    {
-        get_sdr::SensorDataCompactRecord record = {0};
-        if (!constructWatchdog2Sdr(ctx, sensorNum, recordID, connection, path,
-                                   record))
-        {
-            return GENERAL_ERROR;
-        }
-        recordData.insert(recordData.end(), (uint8_t*)&record,
-                          ((uint8_t*)&record) + sizeof(record));
-    }
 
     // handle discrete senosrs
     if (std::find(interfaces.begin(), interfaces.end(),
-- 
2.25.1

