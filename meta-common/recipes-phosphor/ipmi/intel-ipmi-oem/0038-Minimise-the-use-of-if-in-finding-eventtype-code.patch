From d07732b5a2f92f2b834686fbdbe1abb641fa7cb0 Mon Sep 17 00:00:00 2001
From: vipinc <vipinc@ami.com>
Date: Fri, 29 Dec 2023 04:40:21 +0530
Subject: [PATCH 1/1] Minimise the use of "if" in finding eventtype code

map and identify based on the sensor type string
from sensor object path.

Tested:
Successfully built and sensor listing with
proper sensor type and event type code.

Signed-off-by: vipinc <vipinc@ami.com>
---
 include/sdrutils.hpp | 84 ++++++++++++++++++++++++++++++--------------
 1 file changed, 57 insertions(+), 27 deletions(-)

diff --git a/include/sdrutils.hpp b/include/sdrutils.hpp
index ce7823d..1d9b3b6 100644
--- a/include/sdrutils.hpp
+++ b/include/sdrutils.hpp
@@ -394,20 +394,53 @@ enum class SensorTypeCodes : uint8_t
     other = 0xB,
 };
 
-const static boost::container::flat_map<const char*, SensorTypeCodes, CmpStr>
-    sensorTypes{{{"temperature", SensorTypeCodes::temperature},
-                 {"voltage", SensorTypeCodes::voltage},
-                 {"current", SensorTypeCodes::current},
-                 {"fan_tach", SensorTypeCodes::fan},
-                 {"fan_pwm", SensorTypeCodes::fan},
-                 {"cpu", SensorTypeCodes::processor},
-                 {"powersupply", SensorTypeCodes::powersupply},
-                 {"powerunit", SensorTypeCodes::powerunit},
-                 {"os", SensorTypeCodes::os},
-                 {"acpisystem", SensorTypeCodes::acpisystem},
-                 {"watchdog", SensorTypeCodes::watchdog2},
-                 {"battery", SensorTypeCodes::battery},
-                 {"power", SensorTypeCodes::other}}};
+enum class SensorEventTypeCodes : uint8_t
+{
+    unspecified = 0x00,
+    threshold = 0x01,
+    digitalState = 0x03,
+    digitalFailure = 0x04,
+    digitalLimit = 0x05,
+    digitalPerformance = 0x06,
+    digitalPresence = 0x08,
+    digitalEnabled = 0x09,
+    acpiDevice = 0x0c,
+    sensorSpecified = 0x6f
+};
+
+const static boost::container::flat_map<
+    const char*, std::pair<SensorTypeCodes, SensorEventTypeCodes>, CmpStr>
+    sensorTypes{
+        {{"temperature", std::make_pair(SensorTypeCodes::temperature,
+                                        SensorEventTypeCodes::threshold)},
+         {"voltage", std::make_pair(SensorTypeCodes::voltage,
+                                    SensorEventTypeCodes::threshold)},
+         {"current", std::make_pair(SensorTypeCodes::current,
+                                    SensorEventTypeCodes::threshold)},
+         {"fan_tach", std::make_pair(SensorTypeCodes::fan,
+                                     SensorEventTypeCodes::threshold)},
+         {"fan_pwm", std::make_pair(SensorTypeCodes::fan,
+                                    SensorEventTypeCodes::threshold)},
+         {"cpu", std::make_pair(SensorTypeCodes::processor,
+                                SensorEventTypeCodes::sensorSpecified)},
+         {"powersupply", std::make_pair(SensorTypeCodes::powersupply,
+                                        SensorEventTypeCodes::sensorSpecified)},
+         {"powerunit", std::make_pair(SensorTypeCodes::powerunit,
+                                      SensorEventTypeCodes::sensorSpecified)},
+         {"os", std::make_pair(SensorTypeCodes::os,
+                               SensorEventTypeCodes::sensorSpecified)},
+         {"acpisystem", std::make_pair(SensorTypeCodes::acpisystem,
+                                       SensorEventTypeCodes::sensorSpecified)},
+         {"watchdog", std::make_pair(SensorTypeCodes::watchdog2,
+                                     SensorEventTypeCodes::sensorSpecified)},
+         {"battery", std::make_pair(SensorTypeCodes::battery,
+                                    SensorEventTypeCodes::sensorSpecified)},
+         {"power", std::make_pair(SensorTypeCodes::other,
+                                  SensorEventTypeCodes::threshold)},
+         {"chassisstate", std::make_pair(SensorTypeCodes::powerunit,
+                                         SensorEventTypeCodes::digitalState)},
+         {"acpidevice", std::make_pair(SensorTypeCodes::powersupply,
+                                       SensorEventTypeCodes::acpiDevice)}}};
 
 inline static std::string getSensorTypeStringFromPath(const std::string& path)
 {
@@ -435,7 +468,9 @@ inline static uint8_t getSensorTypeFromPath(const std::string& path)
     auto findSensor = sensorTypes.find(type.c_str());
     if (findSensor != sensorTypes.end())
     {
-        sensorType = static_cast<uint8_t>(findSensor->second);
+        sensorType =
+            static_cast<uint8_t>(std::get<SensorTypeCodes>(findSensor->second));
+
     } // else default 0x0 RESERVED
 
     return sensorType;
@@ -463,20 +498,15 @@ inline static uint16_t getSensorNumberFromPath(const std::string& path)
 
 inline static uint8_t getSensorEventTypeFromPath(const std::string& path)
 {
-    uint8_t sensorType = (getSensorTypeFromPath(path));
-    if (sensorType == static_cast<uint8_t>(SensorTypeCodes::processor) ||
-        sensorType == static_cast<uint8_t>(SensorTypeCodes::watchdog2) ||
-        sensorType == static_cast<uint8_t>(SensorTypeCodes::battery) ||
-        sensorType == static_cast<uint8_t>(SensorTypeCodes::powerunit) ||
-        sensorType == static_cast<uint8_t>(SensorTypeCodes::acpisystem) ||
-        sensorType == static_cast<uint8_t>(SensorTypeCodes::os) ||
-        sensorType == static_cast<uint8_t>(SensorTypeCodes::powersupply))
+    uint8_t sensorEventType = 0;
+    std::string type = getSensorTypeStringFromPath(path);
+    auto findSensor = sensorTypes.find(type.c_str());
+    if (findSensor != sensorTypes.end())
     {
-        return 0x6f; // reading type = Sensor Specific
+        sensorEventType = static_cast<uint8_t>(
+            std::get<SensorEventTypeCodes>(findSensor->second));
     }
-    // TODO: Add support for additional reading types as needed
-    return 0x1; // reading type = threshold
-
+    return sensorEventType;
 }
 
 inline static std::string getPathFromSensorNumber(uint16_t sensorNum,
-- 
2.25.1

