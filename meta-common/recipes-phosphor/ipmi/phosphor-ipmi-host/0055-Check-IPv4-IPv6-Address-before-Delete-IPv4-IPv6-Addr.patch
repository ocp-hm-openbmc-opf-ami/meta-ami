From f2fdbeed24acd2f38dc95bd151dcb5616cf5ccf5 Mon Sep 17 00:00:00 2001
From: Ethan Wei <ethanwei@ami.com>
Date: Wed, 22 Nov 2023 03:32:58 -0800
Subject: [PATCH] Check IPv4/IPv6 Address before Delete IPv4/IPv6 Address

---
 include/ipmid/net_utility.hpp | 48 +++++++++++++++++++
 libipmid/meson.build          |  1 +
 libipmid/net_utility.cpp      | 90 +++++++++++++++++++++++++++++++++++
 transporthandler.cpp          |  6 +++
 transporthandler.hpp          |  1 +
 5 files changed, 146 insertions(+)
 create mode 100644 include/ipmid/net_utility.hpp
 create mode 100644 libipmid/net_utility.cpp

diff --git a/include/ipmid/net_utility.hpp b/include/ipmid/net_utility.hpp
new file mode 100644
index 0000000..4a3aacd
--- /dev/null
+++ b/include/ipmid/net_utility.hpp
@@ -0,0 +1,48 @@
+/**
+ * Copyright Â© 2018 Intel Corporation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#pragma once
+#include <arpa/inet.h>
+#include <string>
+#include <phosphor-logging/lg2.hpp>
+#include <phosphor-logging/log.hpp>
+
+namespace ipmi
+{
+namespace utility
+{
+
+
+namespace ip_address {
+enum class Type {
+    GATEWAY4_ADDRESS,
+    GATEWAY6_ADDRESS,
+    IP4_ADDRESS,
+    IP6_ADDRESS
+};
+
+bool in6AddrIetfProtocolAssignment(in6_addr* addr);
+
+bool in6AddrDoc(in6_addr* addr);
+
+bool isValidIPv4Addr(in_addr* addr, Type type);
+
+bool isValidIPv6Addr(in6_addr* addr, Type type);
+
+} // namespace ip_address
+
+} // namespace utility
+
+} // namespace ipmi
diff --git a/libipmid/meson.build b/libipmid/meson.build
index e573ed4..43bd3e9 100644
--- a/libipmid/meson.build
+++ b/libipmid/meson.build
@@ -22,6 +22,7 @@ libipmid = library(
   'signals.cpp',
   'systemintf-sdbus.cpp',
   'utils.cpp',
+  'net_utility.cpp',
   dependencies: [ipmid_pre, entity_map_json_dep],
   version: meson.project_version(),
   include_directories: root_inc,
diff --git a/libipmid/net_utility.cpp b/libipmid/net_utility.cpp
new file mode 100644
index 0000000..04353b0
--- /dev/null
+++ b/libipmid/net_utility.cpp
@@ -0,0 +1,90 @@
+#include "ipmid/net_utility.hpp"
+
+namespace ipmi
+{
+namespace utility
+{
+namespace ip_address {
+
+using phosphor::logging::log;
+using phosphor::logging::level;
+
+bool in6AddrIetfProtocolAssignment(in6_addr* addr) {
+    return (ntohl(addr->__in6_u.__u6_addr32[0]) >= 0x20010000 && ntohl(addr->__in6_u.__u6_addr32[0]) <= 0x200101ff);
+}
+
+bool in6AddrDoc(in6_addr* addr) {
+    return ntohl(addr->__in6_u.__u6_addr32[0]) == 0x20010db8;
+}
+
+bool isValidIPv4Addr(in_addr* addr, Type type) {
+    uint8_t ip[4];
+    in_addr_t tmp = ntohl(addr->s_addr);
+    for (int i = 0; i < 4; i++) {
+        ip[i] = ( tmp >> (8 * (3 - i)) ) & 0xFF;
+    } // for
+
+    if (type == Type::GATEWAY4_ADDRESS) {
+        if (ip[0] == 0) {
+            log<level::INFO>("Gateway starts with 0.");
+            return false;
+        } // if
+    } // if
+    else if (type == Type::IP4_ADDRESS) {
+        if (ip[0] == 0 && ip[1] == 0 && ip[2] == 0 && ip[3] == 0) {
+            log<level::INFO>("Gateway starts with 0.");
+            return false;
+        } // if
+    } // else if
+
+    return true;
+}
+
+
+bool isValidIPv6Addr(in6_addr* addr, Type type) {
+    std::string strType{"Gateway"};
+    if (type == Type::IP6_ADDRESS) {
+        strType = "IPv6";
+        if(in6AddrIetfProtocolAssignment(addr)) {
+            log<level::INFO>((strType+" address is IETF Protocol Assignments.").c_str());
+            return false;
+        }
+        else if (in6AddrDoc(addr)) {
+            log<level::INFO>((strType+" address is Documentation.").c_str());
+            return false;
+        }
+        else if(IN6_IS_ADDR_LINKLOCAL(addr)) {
+            log<level::INFO>((strType+" address is Link-local.").c_str());
+            return false;
+        }
+    }
+
+    if(IN6_IS_ADDR_LOOPBACK(addr)) {
+        log<level::INFO>((strType+" address is Loopback.").c_str());
+        return false;
+    }
+    else if(IN6_IS_ADDR_MULTICAST(addr)) {
+        log<level::INFO>((strType+" address is Multicast.").c_str());
+        return false;
+    }
+    else if (IN6_IS_ADDR_SITELOCAL(addr)) {
+        log<level::INFO>((strType+" address is Sitelocal.").c_str());
+        return false;
+    }
+    else if(IN6_IS_ADDR_V4MAPPED(addr)) {
+        log<level::INFO>((strType+" address is V4Mapped.").c_str());
+        return false;
+    }
+    else if(IN6_IS_ADDR_UNSPECIFIED(addr)) {
+        log<level::INFO>((strType+" address is Unspecified.").c_str());
+        return false;
+    }
+
+    return true;
+}
+
+} // namespace ip_address
+
+} // namespace utility
+
+} // namespace ipmi
diff --git a/transporthandler.cpp b/transporthandler.cpp
index 060e09c..b46ae24 100644
--- a/transporthandler.cpp
+++ b/transporthandler.cpp
@@ -1142,6 +1142,9 @@ RspType<> setLan(Context::ptr ctx, uint4_t channelBits, uint4_t reserved1,
                 return responseReqDataLenInvalid();
             }
             copyInto(ip, bytes);
+            if (!ipmi::utility::ip_address::isValidIPv4Addr((in_addr*)&ip, ipmi::utility::ip_address::Type::IP4_ADDRESS)) {
+                return responseInvalidFieldRequest();
+            }
             channelCall<reconfigureIfAddr4>(channel, ip, std::nullopt);
             return responseSuccess();
         }
@@ -1436,6 +1439,9 @@ RspType<> setLan(Context::ptr ctx, uint4_t channelBits, uint4_t reserved1,
             copyInto(ip, ipbytes);
             if (enabled)
             {
+                if (!ipmi::utility::ip_address::isValidIPv6Addr((in6_addr*)&ip, ipmi::utility::ip_address::Type::IP6_ADDRESS)) {
+                    return responseInvalidFieldRequest();
+                }
                 if (prefix < MIN_IPV6_PREFIX_LENGTH ||
                     prefix > MAX_IPV6_PREFIX_LENGTH)
                 {
diff --git a/transporthandler.hpp b/transporthandler.hpp
index 05e0313..7a941de 100644
--- a/transporthandler.hpp
+++ b/transporthandler.hpp
@@ -8,6 +8,7 @@
 
 #include <ipmid/api-types.hpp>
 #include <ipmid/api.hpp>
+#include "ipmid/net_utility.hpp"
 #include <ipmid/message.hpp>
 #include <ipmid/message/types.hpp>
 #include <ipmid/types.hpp>
-- 
2.25.1

