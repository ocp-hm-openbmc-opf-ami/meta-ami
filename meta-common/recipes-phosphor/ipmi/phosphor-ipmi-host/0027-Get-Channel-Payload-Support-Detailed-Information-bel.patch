From d737c45f0db8a721c8bc4049fb979d4b8cfbaf58 Mon Sep 17 00:00:00 2001
From: dineshsv <dineshsv@ami.com>
Date: Mon, 17 Jul 2023 12:43:01 +0530
Subject: [PATCH] Get Channel Payload Support- Detailed Information below MR
 link

https://git.ami.com/core/oe/common/meta-ami/-/merge_requests/34

Get-Set Payload-Acess- Detailed Information below MR link

https://git.ami.com/core/oe/common/meta-ami/-/merge_requests/56

Signed-off-by: dineshsv <dineshsv@ami.com>
---
 user_channel/channel_layer.cpp   | 11 +++++++++--
 user_channel/channel_mgmt.cpp    |  2 +-
 user_channel/channelcommands.cpp | 11 ++++++++---
 user_channel/user_layer.cpp      | 12 ++++++++++++
 4 files changed, 30 insertions(+), 6 deletions(-)

diff --git a/user_channel/channel_layer.cpp b/user_channel/channel_layer.cpp
index fb70f1e..f2faa91 100644
--- a/user_channel/channel_layer.cpp
+++ b/user_channel/channel_layer.cpp
@@ -30,8 +30,15 @@ bool doesDeviceExist(const uint8_t chNum)
     // associated with ethernet interface as the channel number to
     // eth association is not done. Need to revisit later
     struct stat fileStat = {};
-    std::string devName("/sys/class/net/" + getChannelName(chNum));
-
+   std::string channelName = getChannelName(chNum);
+      if(channelName.empty())
+      {
+         phosphor::logging::log<phosphor::logging::level::DEBUG>(
+              "Ethernet device not found");
+          return false;
+      }
+ 
+      std::string devName("/sys/class/net/" + channelName);
     if (stat(devName.data(), &fileStat) != 0)
     {
         phosphor::logging::log<phosphor::logging::level::DEBUG>(
diff --git a/user_channel/channel_mgmt.cpp b/user_channel/channel_mgmt.cpp
index a179b37..2da5318 100644
--- a/user_channel/channel_mgmt.cpp
+++ b/user_channel/channel_mgmt.cpp
@@ -156,7 +156,7 @@ std::string ChannelConfig::getChannelName(const uint8_t chNum)
     {
         log<level::ERR>("Invalid channel number.",
                         entry("CHANNEL_ID=%d", chNum));
-        throw std::invalid_argument("Invalid channel number");
+        return std::string();
     }
 
     return channelData[chNum].chName;
diff --git a/user_channel/channelcommands.cpp b/user_channel/channelcommands.cpp
index 02a50ce..1abb8c9 100644
--- a/user_channel/channelcommands.cpp
+++ b/user_channel/channelcommands.cpp
@@ -326,12 +326,17 @@ RspType<uint16_t, // stdPayloadType
 {
     uint8_t chNum = convertCurrentChannelNum(static_cast<uint8_t>(channel),
                                              ctx->channel);
-
-    if (!doesDeviceExist(chNum) || !isValidChannel(chNum) || reserved)
+    if (!doesDeviceExist(chNum))
     {
-        log<level::DEBUG>("Get channel payload - Invalid field in request");
+        log<level::DEBUG>("Get channel payload - device does not exist");
         return responseInvalidFieldRequest();
     }
+   
+    if (reserved)
+      {
+          log<level::DEBUG>("Get channel payload - Invalid reserved bit");
+          return responseInvalidFieldRequest();
+      }
 
     // Session support is available in active LAN channels.
     if (getChannelSessionSupport(chNum) == EChannelSessSupported::none)
diff --git a/user_channel/user_layer.cpp b/user_channel/user_layer.cpp
index 5a2e7e0..c1fc78a 100644
--- a/user_channel/user_layer.cpp
+++ b/user_channel/user_layer.cpp
@@ -184,6 +184,12 @@ Cc ipmiUserSetUserPayloadAccess(const uint8_t chNum, const uint8_t operation,
                                 const uint8_t userId,
                                 const PayloadAccess& payloadAccess)
 {
+    std::string userName;
+     ipmiUserGetUserName(userId,userName);
+       if(userName.empty())
+       {
+         return ccInvalidFieldRequest;
+       }
     if (!UserAccess::isValidChannel(chNum))
     {
         return ccInvalidFieldRequest;
@@ -200,6 +206,12 @@ Cc ipmiUserSetUserPayloadAccess(const uint8_t chNum, const uint8_t operation,
 Cc ipmiUserGetUserPayloadAccess(const uint8_t chNum, const uint8_t userId,
                                 PayloadAccess& payloadAccess)
 {
+    std::string userName;
+     ipmiUserGetUserName(userId,userName);
+       if(userName.empty())
+       {
+         return ccInvalidFieldRequest;
+       }
     if (!UserAccess::isValidChannel(chNum))
     {
         return ccInvalidFieldRequest;
-- 
2.25.1

