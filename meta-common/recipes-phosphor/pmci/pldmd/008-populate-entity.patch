diff -Naur a/src/pdr_manager.cpp b/src/pdr_manager.cpp
--- a/src/pdr_manager.cpp	2023-10-05 16:07:07.137190266 +0530
+++ b/src/pdr_manager.cpp	2023-10-05 16:09:53.306300840 +0530
@@ -831,20 +831,24 @@
 
 static void populateEntity(DBusInterfacePtr& entityIntf,
                            const DBusObjectPath& path,
-                           const pldm_entity& entity)
+                           const pldm_entity& entity, 
+			   std::unordered_map<pldm_entity, std::pair<DBusInterfacePtr, DBusObjectPath>,
+			   EntityHash, EntityComparator>& _systemHierarchyIntf)
 {
     phosphor::logging::log<phosphor::logging::level::DEBUG>(
         ("Entity object path: " + path).c_str());
     auto objServer = getObjServer();
-
-    entityIntf =
-        objServer->add_interface(path, "xyz.openbmc_project.PLDM.Entity");
-    entityIntf->register_property("EntityType", entity.entity_type);
-    entityIntf->register_property("EntityInstanceNumber",
-                                  entity.entity_instance_num);
-    entityIntf->register_property("EntityContainerID",
-                                  entity.entity_container_id);
-    entityIntf->initialize();
+    
+    if(_systemHierarchyIntf.find(entity) == _systemHierarchyIntf.end()) {
+	    entityIntf =
+        	objServer->add_interface(path, "xyz.openbmc_project.PLDM.Entity");
+	    entityIntf->register_property("EntityType", entity.entity_type);
+	    entityIntf->register_property("EntityInstanceNumber",
+        	                          entity.entity_instance_num);
+	    entityIntf->register_property("EntityContainerID",
+        	                          entity.entity_container_id);
+	    entityIntf->initialize();
+    }
 }
 
 void PDRManager::populateSystemHierarchy()
@@ -878,7 +882,7 @@
             DBusObjectPath objPath = pldmDevObj + pathName;
 
             DBusInterfacePtr entityIntf;
-            populateEntity(entityIntf, objPath, entity);
+            populateEntity(entityIntf, objPath, entity, _systemHierarchyIntf);
             _systemHierarchyIntf.emplace(entity,
                                          std::make_pair(entityIntf, objPath));
         }
