From 0abf33a7352b94e59e334578082023d1c62efe4a Mon Sep 17 00:00:00 2001
From: vipinc <vipinc@ami.com>
Date: Sun, 15 Oct 2023 15:57:01 +0530
Subject: [PATCH 2/2] Add Linear SEL Support

This patch add Support for Linear SEL implementation.

Signed-off-by: vipinc <vipinc@ami.com>
---
 include/sel_logger.hpp |  11 ++++
 src/sel_logger.cpp     | 139 +++++++++++++++++++++++++++++++++--------
 2 files changed, 124 insertions(+), 26 deletions(-)

diff --git a/include/sel_logger.hpp b/include/sel_logger.hpp
index 2d23f29..85e8078 100644
--- a/include/sel_logger.hpp
+++ b/include/sel_logger.hpp
@@ -31,6 +31,17 @@ constexpr static const char* pefObjPath = "/xyz/openbmc_project/pef/alerting";
 constexpr static const char* pefIface = "xyz.openbmc_project.pef.pefTask";
 constexpr static const char* pefTaskMethod = "doPefTask";
 
+#ifndef SEL_LOGGER_SEND_TO_LOGGING_SERVICE
+// SEL policy in dbus
+static constexpr char const* selLogObj = "xyz.openbmc_project.Settings";
+static constexpr char const* selLogPath =
+    "/xyz/openbmc_project/logging/settings";
+static constexpr char const* selLogIntf =
+    "xyz.openbmc_project.Logging.Settings";
+static constexpr int maxSELEntries = 2000;
+static bool maxSELEntriesReached = false;
+#endif
+
 // ID string generated using journalctl to include in the MESSAGE_ID field for
 // SEL entries.  Helps with filtering SEL entries in the journal.
 static constexpr const char* selMessageId = "b370836ccf2f4850ac5bee185b77893a";
diff --git a/src/sel_logger.cpp b/src/sel_logger.cpp
index e98451d..a79e475 100644
--- a/src/sel_logger.cpp
+++ b/src/sel_logger.cpp
@@ -148,6 +148,76 @@ void clearSelLogFiles()
 }
 #endif
 
+#ifndef SEL_LOGGER_SEND_TO_LOGGING_SERVICE
+static bool isLinearSELPolicy()
+{
+    auto bus = sdbusplus::bus::new_default();
+
+    try
+    {
+        // IPMI SEL Policy Object
+        auto method = bus.new_method_call(
+            selLogObj, selLogPath, "org.freedesktop.DBus.Properties", "Get");
+        method.append(selLogIntf, "SelPolicy");
+        auto reply = bus.call(method);
+        if (reply.is_method_error())
+        {
+            phosphor::logging::log<phosphor::logging::level::ERR>(
+                "isLinearSELPolicy: Failed to read sel policy",
+                phosphor::logging::entry("PATH=%s", selLogPath),
+                phosphor::logging::entry("INTERFACE=%s", selLogIntf));
+            return false;
+        }
+
+        std::variant<std::string> value;
+        reply.read(value);
+
+        if (std::get<std::string>(value) ==
+            "xyz.openbmc_project.Logging.Settings.Policy.Linear")
+        {
+            return true;
+        }
+        else
+        {
+            return false;
+        }
+    }
+    catch (std::exception& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "isLinearSELPolicy: Failed to get sel policy",
+            phosphor::logging::entry("EXCEPTION=%s", e.what()));
+        return false;
+    }
+}
+
+static uint16_t getEntryCount()
+{
+    uint16_t entryCount = 0;
+    // Loop through the directory looking for ipmi_sel log files
+    // and get entry count form each file
+    for (const std::filesystem::directory_entry& dirEnt :
+         std::filesystem::directory_iterator(selLogDir))
+    {
+        std::string filename = dirEnt.path().filename();
+        if (boost::starts_with(filename, selLogFilename))
+        {
+            std::string line;
+            std::ifstream selStream(selLogDir / filename);
+
+            while (getline(selStream, line))
+            {
+                entryCount++;
+            }
+
+            // Close files
+            selStream.close();
+        }
+    }
+    return entryCount;
+}
+#endif
+
 static unsigned int getNewRecordId(void)
 {
 #ifndef SEL_LOGGER_CLEARS_SEL
@@ -161,6 +231,20 @@ static unsigned int getNewRecordId(void)
     }
 #endif
 
+#ifndef SEL_LOGGER_SEND_TO_LOGGING_SERVICE
+    // Validate for Linear Policy and  Max SEL Entries
+    if (recordId != selInvalidRecID && isLinearSELPolicy() &&
+        getEntryCount() >= maxSELEntries)
+    {
+        phosphor::logging::log<phosphor::logging::level::INFO>(
+            "Skip SEL event write on reaching max SEL entries in linear "
+            "config");
+
+        maxSELEntriesReached = true;
+        return 0;
+    }
+#endif
+
     if (++recordId >= selInvalidRecID)
     {
         recordId = 1;
@@ -217,33 +301,36 @@ static void selAddSystemRecord(
     conn->call(AddToLog);
 #else
     unsigned int recordId = getNewRecordId();
-    sd_journal_send("MESSAGE=%s", message.c_str(), "PRIORITY=%i", selPriority,
-                    "MESSAGE_ID=%s", selMessageId, "IPMI_SEL_RECORD_ID=%d",
-                    recordId, "IPMI_SEL_RECORD_TYPE=%x", selSystemType,
-                    "IPMI_SEL_GENERATOR_ID=%x", genId,
-                    "IPMI_SEL_SENSOR_PATH=%s", path.c_str(),
-                    "IPMI_SEL_EVENT_DIR=%x", assert, "IPMI_SEL_DATA=%s",
-                    selDataStr.c_str(), std::forward<T>(metadata)..., NULL);
-    // Do PEF Action
-    uint8_t sentype = getSensorTypeFromPath(path);
-    uint8_t senNum = getSensorNumberFromPath(path);
-    uint8_t evtype = getSensorEventTypeFromPath(path);
-
-    evtype |= assert ? 0x00 : 0x80;
-
-    std::chrono::microseconds timeout = DBUS_TIMEOUT;
-    auto startPefTask =
-        conn->new_method_call(pefService, pefObjPath, pefIface, pefTaskMethod);
-    startPefTask.append(static_cast<uint16_t>(recordId), sentype, senNum,
-                        evtype, selData[0], selData[1], selData[2],
-                        static_cast<uint16_t>(genId), message.c_str());
-    try
+    if (recordId != 0)
     {
-        conn->call(startPefTask, timeout.count());
-    }
-    catch (sdbusplus::exception_t&)
-    {
-        std::cerr << "Failed to call doPefTask\n";
+        sd_journal_send(
+            "MESSAGE=%s", message.c_str(), "PRIORITY=%i", selPriority,
+            "MESSAGE_ID=%s", selMessageId, "IPMI_SEL_RECORD_ID=%d", recordId,
+            "IPMI_SEL_RECORD_TYPE=%x", selSystemType,
+            "IPMI_SEL_GENERATOR_ID=%x", genId, "IPMI_SEL_SENSOR_PATH=%s",
+            path.c_str(), "IPMI_SEL_EVENT_DIR=%x", assert, "IPMI_SEL_DATA=%s",
+            selDataStr.c_str(), std::forward<T>(metadata)..., NULL);
+        // Do PEF Action
+        uint8_t sentype = getSensorTypeFromPath(path);
+        uint8_t senNum = getSensorNumberFromPath(path);
+        uint8_t evtype = getSensorEventTypeFromPath(path);
+
+        evtype |= assert ? 0x00 : 0x80;
+
+        std::chrono::microseconds timeout = DBUS_TIMEOUT;
+        auto startPefTask = conn->new_method_call(pefService, pefObjPath,
+                                                  pefIface, pefTaskMethod);
+        startPefTask.append(static_cast<uint16_t>(recordId), sentype, senNum,
+                            evtype, selData[0], selData[1], selData[2],
+                            static_cast<uint16_t>(genId), message.c_str());
+        try
+        {
+            conn->call(startPefTask, timeout.count());
+        }
+        catch (sdbusplus::exception_t&)
+        {
+            std::cerr << "Failed to call doPefTask\n";
+        }
     }
 
 #endif
-- 
2.25.1

