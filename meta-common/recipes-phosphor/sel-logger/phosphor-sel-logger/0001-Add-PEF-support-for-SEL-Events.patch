From c65e00f2a6ce63bcd7340313730284053a26c108 Mon Sep 17 00:00:00 2001
From: vipinc <vipinc@ami.com>
Date: Sun, 15 Oct 2023 14:45:06 +0530
Subject: [PATCH] Add PEF support for SEL Events

This patch add support to perform PEF for SEL events
logged

Signed-off-by: vipinc <vipinc@ami.com>
---
 include/sel_logger.hpp                    |  9 +++++++++
 include/threshold_alarm_event_monitor.hpp | 10 +++++-----
 include/threshold_event_monitor.hpp       |  2 +-
 src/sel_logger.cpp                        | 23 +++++++++++++++++++++++
 4 files changed, 38 insertions(+), 6 deletions(-)

diff --git a/include/sel_logger.hpp b/include/sel_logger.hpp
index 1c9bc47..2d23f29 100644
--- a/include/sel_logger.hpp
+++ b/include/sel_logger.hpp
@@ -15,13 +15,22 @@
 */
 
 #pragma once
+#include <chrono>
 #include <filesystem>
 
+using namespace std::literals::chrono_literals;
+constexpr std::chrono::microseconds DBUS_TIMEOUT = 5s;
+
 static constexpr const char* ipmiSelObject = "xyz.openbmc_project.Logging.IPMI";
 static constexpr const char* ipmiSelPath = "/xyz/openbmc_project/Logging/IPMI";
 static constexpr const char* ipmiSelAddInterface =
     "xyz.openbmc_project.Logging.IPMI";
 
+constexpr static const char* pefService = "xyz.openbmc_project.pef.alerting";
+constexpr static const char* pefObjPath = "/xyz/openbmc_project/pef/alerting";
+constexpr static const char* pefIface = "xyz.openbmc_project.pef.pefTask";
+constexpr static const char* pefTaskMethod = "doPefTask";
+
 // ID string generated using journalctl to include in the MESSAGE_ID field for
 // SEL entries.  Helps with filtering SEL entries in the journal.
 static constexpr const char* selMessageId = "b370836ccf2f4850ac5bee185b77893a";
diff --git a/include/threshold_alarm_event_monitor.hpp b/include/threshold_alarm_event_monitor.hpp
index 0010d4b..01174f6 100644
--- a/include/threshold_alarm_event_monitor.hpp
+++ b/include/threshold_alarm_event_monitor.hpp
@@ -238,11 +238,11 @@ void generateEvent(std::string signalName,
                            ". Reading=" + std::to_string(assertValue) +
                            " Threshold=" + std::to_string(thresholdVal) + ".");
 
-    selAddSystemRecord(conn, journalMsg, std::string(msg.get_path()), eventData,
-                       assert, selBMCGenID, "REDFISH_MESSAGE_ID=%s",
-                       redfishMessageID.c_str(),
-                       "REDFISH_MESSAGE_ARGS=%.*s,%f,%f", sensorName.length(),
-                       sensorName.data(), assertValue, thresholdVal);
+    selAddSystemRecord(
+        conn, journalMsg, std::string(msg.get_path()), eventData, assert,
+        selBMCGenID, "REDFISH_MESSAGE_ID=%s", redfishMessageID.c_str(),
+        "REDFISH_MESSAGE_ARGS=%.*s,%.2f,%.2f", sensorName.length(),
+        sensorName.data(), assertValue, thresholdVal);
 }
 
 inline static void startThresholdAlarmMonitor(
diff --git a/include/threshold_event_monitor.hpp b/include/threshold_event_monitor.hpp
index cea25c1..c380c30 100644
--- a/include/threshold_event_monitor.hpp
+++ b/include/threshold_event_monitor.hpp
@@ -327,7 +327,7 @@ inline static sdbusplus::bus::match_t startThresholdAssertMonitor(
         selAddSystemRecord(
             conn, journalMsg, std::string(msg.get_path()), eventData, assert,
             selBMCGenID, "REDFISH_MESSAGE_ID=%s", redfishMessageID.c_str(),
-            "REDFISH_MESSAGE_ARGS=%.*s,%f,%f", sensorName.length(),
+            "REDFISH_MESSAGE_ARGS=%.*s,%.2f,%.2f", sensorName.length(),
             sensorName.data(), assertValue, thresholdVal);
 #endif
     };
diff --git a/src/sel_logger.cpp b/src/sel_logger.cpp
index 98c0530..e98451d 100644
--- a/src/sel_logger.cpp
+++ b/src/sel_logger.cpp
@@ -19,6 +19,7 @@
 #include <boost/asio/io_context.hpp>
 #include <boost/container/flat_map.hpp>
 #include <boost/container/flat_set.hpp>
+#include <intel-ipmi-oem/sdrutils.hpp>
 #include <pulse_event_monitor.hpp>
 #include <sdbusplus/asio/object_server.hpp>
 #include <sel_logger.hpp>
@@ -223,6 +224,28 @@ static void selAddSystemRecord(
                     "IPMI_SEL_SENSOR_PATH=%s", path.c_str(),
                     "IPMI_SEL_EVENT_DIR=%x", assert, "IPMI_SEL_DATA=%s",
                     selDataStr.c_str(), std::forward<T>(metadata)..., NULL);
+    // Do PEF Action
+    uint8_t sentype = getSensorTypeFromPath(path);
+    uint8_t senNum = getSensorNumberFromPath(path);
+    uint8_t evtype = getSensorEventTypeFromPath(path);
+
+    evtype |= assert ? 0x00 : 0x80;
+
+    std::chrono::microseconds timeout = DBUS_TIMEOUT;
+    auto startPefTask =
+        conn->new_method_call(pefService, pefObjPath, pefIface, pefTaskMethod);
+    startPefTask.append(static_cast<uint16_t>(recordId), sentype, senNum,
+                        evtype, selData[0], selData[1], selData[2],
+                        static_cast<uint16_t>(genId), message.c_str());
+    try
+    {
+        conn->call(startPefTask, timeout.count());
+    }
+    catch (sdbusplus::exception_t&)
+    {
+        std::cerr << "Failed to call doPefTask\n";
+    }
+
 #endif
 }
 
-- 
2.25.1

