From 763b2b753322e24306648419a82e7203ab21284e Mon Sep 17 00:00:00 2001
From: kirubagharanas <kirubagharanas@ami.com>
Date: Thu, 28 Sep 2023 20:49:07 +0530
Subject: [PATCH] Add write public key in image support

---
 image_verify.cpp | 45 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/image_verify.cpp b/image_verify.cpp
index 1c81abe..945287a 100644
--- a/image_verify.cpp
+++ b/image_verify.cpp
@@ -74,6 +74,51 @@ AvailableKeyTypes Signature::getAvailableKeyTypesFromSystem() const
     // /etc/activationdata/GA/hashfunc
     // Set will have OpenBMC, GA
 
+    std::ifstream inFile("/dev/mtd0");
+    std::string publickeyData;
+    std::string publickeyIdf = "$SHPKIDF$";
+    std::string keyPath = "/etc/activationdata/OpenBMC/";
+    int publickeySize = 0, prelinePos = 0;
+
+    if (inFile)
+    {
+        char *buffer = new char[0x10000];
+        //Locate identifier
+        while(std::getline(inFile, publickeyData))
+        {
+            auto publickeyPos = publickeyData.find(publickeyIdf);
+            if (publickeyPos != std::string::npos)
+            {
+                //read size and public key
+                inFile.seekg( (prelinePos + publickeyPos + publickeyIdf.length() + 1), inFile.beg);
+                inFile.read(buffer, sizeof(publickeySize));
+                publickeySize = atoi(buffer);
+                inFile.read(buffer, publickeySize);
+                std::ofstream outFile(keyPath + "publickey");
+                if (outFile)
+                {
+                    outFile.write(buffer, publickeySize);
+                    outFile.close();
+                }
+                break;
+            }
+	    prelinePos = inFile.tellg();
+        }
+        if (inFile.eof()) {
+            error("Unable to find publickey in existing image");
+            inFile.close();
+            delete[] buffer;
+            return keyTypes;
+        }
+    }
+
+    std::error_code ec_file;
+    if (!(fs::exists(keyPath + "publickey", ec_file)))
+    {
+        error("Signature Validation failed, Unable to find publickey");
+        return keyTypes;
+    }
+
     for (const auto& p : fs::recursive_directory_iterator(signedConfPath))
     {
         if ((p.path().filename() == HASH_FILE_NAME) ||
