--- a/user_mgr.hpp	2023-07-20 18:51:07.688359230 -0400
+++ b/user_mgr.hpp	2023-07-20 18:48:55.791116596 -0400
@@ -152,6 +152,21 @@
      */
     void deleteUser(std::string userName);
 
+    /** @brief Update password policy level.
+     *  This method updates pam for password policy
+     *
+     *  @param[in] policy - disabled,low,medium,high
+     *  @return - success or failure
+     */
+    int updatePasswordPolicy(std::string policy);
+
+    /** @brief Get password policy level.
+     *  This method gets policy level from pam for password policy
+     *
+     *  @return - disabled,low,medium,high or failure
+     */
+    int getPasswordPolicyComplexity(void);
+  
     /** @brief Update user groups & privilege.
      *  This method updates user groups & privilege
      *
@@ -185,6 +200,14 @@
      */
     uint8_t rememberOldPasswordTimes(uint8_t val) override;
 
+    /** @brief update password complexity
+     *
+     *  @param[in] val - Complexity level of password policy
+     *                   disabled,low,medium,high
+     *  @return - Complexity level of password policy
+     */
+    std::string passwordPolicyComplexity(std::string val) override;
+
     /** @brief update maximum number of failed login attempt before locked
      *  out.
      *
--- a/user_mgr.cpp	2023-07-20 18:51:07.688359230 -0400
+++ b/user_mgr.cpp	2023-07-20 19:00:16.833565890 -0400
@@ -66,6 +66,9 @@
 static constexpr const char* remOldPasswdCount = "remember";
 static constexpr const char* maxFailedAttempt = "deny";
 static constexpr const char* unlockTimeout = "unlock_time";
+static constexpr const char* minClass = "minclass";
+static constexpr const char* maxRepeat = "maxrepeat";
+static constexpr const char* maxClassRepeat = "maxclassrepeat";
 static constexpr const char* defaultPamPasswdConfigFile =
     "/etc/pam.d/common-password";
 static constexpr const char* defaultFaillockConfigFile =
@@ -73,6 +76,16 @@
 static constexpr const char* defaultPWQualityConfigFile =
     "/etc/security/pwquality.conf";
 
+enum privMgrLevel
+{
+    PRIV_ADMIN,
+    PRIV_OPERATOR,
+    PRIV_USER,
+    PRIV_NOACCESS
+};
+enum complexityLevel { DISABLED, LOW, MEDIUM, HIGH };
+const std::string complexityLevel[] = {"Disabled", "Low", "Medium", "High"};
+  
 // Object Manager related
 static constexpr const char* ldapMgrObjBasePath =
     "/xyz/openbmc_project/user/ldap";
@@ -507,6 +520,57 @@
     return;
 }
 
+int UserMgr::updatePasswordPolicy(const std::string value)
+{
+
+    std::string valueStr;
+    int retval=0;
+    uint8_t complexLvl,policy=0xff;
+    
+    // check if password policy level is supported
+    for(complexLvl=0;complexLvl<=HIGH;complexLvl++)
+      {
+
+	if(value.compare(complexityLevel[complexLvl]) == 0)
+	  {
+	    policy = complexLvl;
+	    break;
+	  }
+      }
+    
+    if(policy == 0xff)
+      {
+	log<level::ERR>("Unable to get passwordPolicyComplexity");
+	elog<InvalidArgument>(Argument::ARGUMENT_NAME("passwordPolicyComplexity"),
+			      Argument::ARGUMENT_VALUE(value.c_str()));
+	return failure;
+      }
+
+    if(policy == DISABLED)
+      {
+	retval = setPamModuleConfValue(pwQualityConfigFile, minClass,"0");
+      }
+    else if(policy == LOW)
+      {
+	retval = setPamModuleConfValue(pwQualityConfigFile, minClass,"3");
+      }
+    else
+      {
+	retval = setPamModuleConfValue(pwQualityConfigFile, minClass,"4");
+      }
+
+    if(policy == HIGH)
+      {
+	retval = setPamModuleConfValue(pwQualityConfigFile, maxClassRepeat,"3");
+      }
+    else
+      {
+	retval = setPamModuleConfValue(pwQualityConfigFile, maxClassRepeat,"0");
+      }
+    
+    return retval;
+}
+
 void UserMgr::updateGroupsAndPriv(const std::string& userName,
                                   std::vector<std::string> groupNames,
                                   const std::string& priv)
@@ -619,6 +683,21 @@
     return AccountPolicyIface::maxLoginAttemptBeforeLockout(value);
 }
 
+std::string UserMgr::passwordPolicyComplexity(std::string value)
+{
+    if (value.compare(AccountPolicyIface::passwordPolicyComplexity()) == 0)
+    {
+        return value;
+    }
+
+    if(updatePasswordPolicy(value) != success)
+    {
+        log<level::ERR>("Failed to update password Policy");
+        elog<InternalFailure>();
+    }
+    return AccountPolicyIface::passwordPolicyComplexity(value);
+}
+
 uint32_t UserMgr::accountUnlockTimeout(uint32_t value)
 {
     if (value == AccountPolicyIface::accountUnlockTimeout())
@@ -1476,6 +1555,67 @@
         AccountPolicyIface::rememberOldPasswordTimes(value);
     }
     valueStr.clear();
+    //setup password policy
+    if (getPamModuleConfValue(pwQualityConfigFile,minClass, valueStr) ==
+        success)
+    {
+      value = 0;
+      try
+        {
+	  tmp = std::stoul(valueStr, nullptr);
+	  if (tmp > std::numeric_limits<decltype(value)>::max())
+            {
+	      throw std::out_of_range("Out of range");
+            }
+	  value = static_cast<decltype(value)>(tmp);
+        }
+      catch (const std::exception& e)
+        {
+	  lg2::error("Exception for PasswordPolicy: {ERR}", "ERR",
+		     e);
+	  throw;
+        }
+      if(value < 3)
+	{
+	  AccountPolicyIface::passwordPolicyComplexity("Disabled");
+	}
+      else if(value == 3)
+	{
+	  AccountPolicyIface::passwordPolicyComplexity("Low"); 
+	}
+      else
+	{
+	  if (getPamModuleConfValue(pwQualityConfigFile,maxClassRepeat, valueStr) ==
+	      success)
+	    {	      
+	      value = 0;
+	      try
+		{
+		  tmp = std::stoul(valueStr, nullptr);
+		  if (tmp > std::numeric_limits<decltype(value)>::max())
+		    {
+		      throw std::out_of_range("Out of range");
+		    }
+		  value = static_cast<decltype(value)>(tmp);
+		}
+	      catch (const std::exception& e)
+		{
+		  lg2::error("Exception for PasswordPolicy: {ERR}", "ERR",
+			     e);
+		  throw;
+		}
+	      if(value == 0)
+		{
+		  AccountPolicyIface::passwordPolicyComplexity("Medium");
+		}
+	      else
+		{
+		  AccountPolicyIface::passwordPolicyComplexity("High"); 
+		}
+	    }
+	}
+    }
+    valueStr.clear();
     if (getPamModuleConfValue(faillockConfigFile, maxFailedAttempt, valueStr) !=
         success)
     {
