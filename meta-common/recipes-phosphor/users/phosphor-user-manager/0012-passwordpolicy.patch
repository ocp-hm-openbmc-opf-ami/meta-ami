--- a/user_mgr.hpp      2022-09-08 17:03:06.761080781 -0400
+++ b/user_mgr.hpp 	2022-09-08 16:21:53.000000000 -0400
@@ -107,6 +107,21 @@
      */
     void deleteUser(std::string userName);

+    /** @brief Update password policy level.
+     *  This method updates pam for password policy
+     *
+     *  @param[in] policy - disabled,low,medium,high
+     *  @return - success or failure
+     */
+  int updatePasswordPolicy(std::string policy);
+
+    /** @brief Get password policy level.
+     *  This method gets policy level from pam for password policy
+     *
+     *  @return - disabled,low,medium,high or failure
+     */
+  int getPasswordPolicyComplexity(void);
+
     /** @brief Update user groups & privilege.
      *  This method updates user groups & privilege
      *
@@ -140,6 +155,14 @@
      */
     uint8_t rememberOldPasswordTimes(uint8_t val) override;

+    /** @brief update password complexity
+     *
+     *  @param[in] val - Complexity level of password policy
+     *                   disabled,low,medium,high
+     *  @return - Complexity level of password policy
+     */
+     std::string passwordPolicyComplexity(std::string val) override;
+
     /** @brief update maximum number of failed login attempt before locked
      *  out.
      *
--- a/user_mgr.cpp	2022-09-08 18:04:29.986895656 -0400
+++ b/user_mgr.cpp	2022-09-08 17:55:37.000000000 -0400
@@ -54,10 +54,26 @@
 static constexpr const char* pamTally2 = "pam_tally2.so";
 static constexpr const char* pamCrackLib = "pam_cracklib.so";
 static constexpr const char* pamPWHistory = "pam_pwhistory.so";
-static constexpr const char* minPasswdLenProp = "minlen";
-static constexpr const char* remOldPasswdCount = "remember";
-static constexpr const char* maxFailedAttempt = "deny";
-static constexpr const char* unlockTimeout = "unlock_time";
+static constexpr const char* pamIpmiPWQuality = "pam_ipmipwquality.so";
+static constexpr const char* minPasswdLenProp = "minlen=";
+static constexpr const char* lowerCCredit = "lcredit=";
+static constexpr const char* upperCCredit = "ucredit=";
+static constexpr const char* objectCCredit = "ocredit=";
+static constexpr const char* digitCCredit = "dcredit=";
+static constexpr const char* difok = "difok=";
+static constexpr const char* noValue = "noValue";
+static constexpr const char* deleteValue = "deleteValue";
+static constexpr const char* rejectUser = "reject_username";
+static constexpr const char* minClass = "minclass=";
+static constexpr const char* maxRepeat = "maxrepeat=";
+static constexpr const char* maxClassRepeat = "maxclassrepeat=";
+static constexpr const char* maxSequence = "maxsequence=";
+static constexpr const char* remOldPasswdCount = "remember=";
+static constexpr const char* maxFailedAttempt = "deny=";
+static constexpr const char* unlockTimeout = "unlock_time=";
+static constexpr const char* maxAlphaSequence = "maxalphasequence=";
+static constexpr const char* maxAlphaRepeat = "maxalpharepeat=";
+static constexpr const char* multipleAlpha = "multiplealpha=";
 static constexpr const char* pamPasswdConfigFile = "/etc/pam.d/common-password";
 static constexpr const char* pamAuthConfigFile = "/etc/pam.d/common-auth";
 
@@ -68,6 +84,8 @@
     PRIV_USER,
     PRIV_NOACCESS
 };
+enum complexityLevel { DISABLED, LOW, MEDIUM, HIGH };
+const std::string complexityLevel[] = {"Disabled", "Low", "Medium", "High"};
 
 // Object Manager related
 static constexpr const char* ldapMgrObjBasePath =
@@ -289,6 +307,161 @@
     return;
 }
 
+int UserMgr::updatePasswordPolicy(const std::string value)
+{
+
+  uint8_t i,policy=0xff;
+
+  for(i=0;i<=HIGH;i++)
+  {
+      if(value.compare(complexityLevel[i]) == 0)
+      {
+         policy = i;
+         break;
+      }
+  }
+  if(policy == 0xff)
+  {
+      log<level::ERR>("Unable to get passwordPolicyComplexity");
+      elog<InvalidArgument>(Argument::ARGUMENT_NAME("passwordPolicyComplexity"),
+			    Argument::ARGUMENT_VALUE(value.c_str()));
+      return failure;
+  }
+  
+  if (setPamModuleArgValue(pamCrackLib, lowerCCredit,((policy<MEDIUM)?"0":"-1")) != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity lowerCCredit");
+        elog<InternalFailure>();
+        return failure;
+  }
+
+  if (setPamModuleArgValue(pamCrackLib, upperCCredit,((policy<MEDIUM)?"0":"-1")) != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity upperCCredit");
+        elog<InternalFailure>();
+        return failure;
+  }
+
+  if (setPamModuleArgValue(pamCrackLib, objectCCredit,((policy<MEDIUM)?"0":"-1")) != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity objectCCredit");
+        elog<InternalFailure>();
+        return failure;
+  }
+
+  if (setPamModuleArgValue(pamCrackLib, digitCCredit,((policy<MEDIUM)?"0":"-1")) != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity digitCCredit");
+        elog<InternalFailure>();
+        return failure;
+  }
+
+  if (setPamModuleArgValue(pamCrackLib, minClass,(policy==LOW)?"3":deleteValue) != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity min class");
+        elog<InternalFailure>();
+        return failure;
+  }
+  
+  if (setPamModuleArgValue(pamCrackLib, maxSequence,(policy<HIGH)?deleteValue:"2") != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity max Sequence");
+        elog<InternalFailure>();
+        return failure;
+  }
+
+  if (setPamModuleArgValue(pamCrackLib, maxClassRepeat,(policy<HIGH)?deleteValue:"3") != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity max Repeat");
+        elog<InternalFailure>();
+        return failure;
+  }
+  
+  if (setPamModuleArgValue(pamCrackLib, maxAlphaRepeat,(policy<HIGH)?deleteValue:"3") != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity max Alpha Repeat");
+        elog<InternalFailure>();
+        return failure;
+  }
+
+  if (setPamModuleArgValue(pamCrackLib, maxAlphaSequence,(policy<HIGH)?deleteValue:"3") != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity max Sequence");
+        elog<InternalFailure>();
+        return failure;
+  }
+
+  if (setPamModuleArgValue(pamCrackLib, multipleAlpha,(policy<HIGH)?deleteValue:"3") != success)
+  {
+        log<level::ERR>("Unable to set passwordPolicyComplexity multiple Alpha");
+        elog<InternalFailure>();
+        return failure;
+  }
+  
+    return success;
+}
+
+int UserMgr::getPasswordPolicyComplexity(void)
+{
+  int lcredit,minclass,maxclassrepeat;
+  std::string valueStr;
+  int policy;
+
+  // Get lower case credit - disabled & low VS medium & high 
+  if (getPamModuleArgValue(pamCrackLib, lowerCCredit, valueStr) !=
+        success)
+  {
+      log<level::ERR>("Unable to get passwordPolicyComplexity lower case credit");
+      elog<InternalFailure>();
+      return failure;
+  }
+  lcredit = atoi(valueStr.c_str());
+
+  // Get minclass - disabled VS low
+  if (getPamModuleArgValue(pamCrackLib, minClass, valueStr) !=
+      success)
+  {
+      log<level::ERR>("Unable to get passwordPolicyComplexity minclass");
+      elog<InternalFailure>();
+      return failure;
+  }
+  minclass = strcmp(valueStr.c_str(),deleteValue);
+
+  // Get maxclassrepeat - medium VS high 
+  if (getPamModuleArgValue(pamCrackLib, maxClassRepeat, valueStr) !=
+      success)
+  {
+      log<level::ERR>("Unable to get passwordPolicyComplexity maxclassrepeat");
+      elog<InternalFailure>();
+      return failure;
+  }
+  maxclassrepeat = strcmp(valueStr.c_str(),deleteValue);
+
+  if(lcredit == 0)
+  {
+      if(minclass == 0)
+      {
+         policy = DISABLED; // disabled
+      }
+      else
+      {
+	     policy = LOW; // low
+      }
+  }
+  else
+  {
+      if(maxclassrepeat == 0)
+      {
+	     policy = MEDIUM; // medium
+      }
+      else
+      {
+         policy = HIGH; //high
+      }
+  }
+  return policy;
+}
+
 void UserMgr::updateGroupsAndPriv(const std::string& userName,
                                   const std::vector<std::string>& groupNames,
                                   const std::string& priv)
@@ -358,6 +531,22 @@
     return AccountPolicyIface::rememberOldPasswordTimes(value);
 }
 
+std::string UserMgr::passwordPolicyComplexity(std::string value)
+{
+    if (value.compare(AccountPolicyIface::passwordPolicyComplexity()) == 0)
+    {
+        return value;
+    }
+    
+    if(updatePasswordPolicy(value) != success)
+    {
+        log<level::ERR>("Failed to update password Policy");
+        elog<InternalFailure>();
+    }
+    return AccountPolicyIface::passwordPolicyComplexity(value);
+    
+}
+
 uint16_t UserMgr::maxLoginAttemptBeforeLockout(uint16_t value)
 {
     if (value == AccountPolicyIface::maxLoginAttemptBeforeLockout())
@@ -409,7 +598,6 @@
         return failure;
     }
     std::string line;
-    auto argSearch = argName + "=";
     size_t startPos = 0;
     size_t endPos = 0;
     while (getline(fileToRead, line))
@@ -426,19 +614,20 @@
         }
         if (line.find(moduleName) != std::string::npos)
         {
-            if ((startPos = line.find(argSearch)) != std::string::npos)
+            if ((startPos = line.find(argName)) != std::string::npos)
             {
                 if ((endPos = line.find(' ', startPos)) == std::string::npos)
                 {
                     endPos = line.size();
                 }
-                startPos += argSearch.size();
+                startPos += argName.size();
                 argValue = line.substr(startPos, endPos - startPos);
                 return success;
             }
         }
     }
-    return failure;
+    argValue = deleteValue;
+    return success;
 }
 
 int UserMgr::setPamModuleArgValue(const std::string& moduleName,
@@ -464,7 +653,7 @@
         return failure;
     }
     std::string line;
-    auto argSearch = argName + "=";
+
     size_t startPos = 0;
     size_t endPos = 0;
     bool found = false;
@@ -483,19 +672,51 @@
         }
         if (line.find(moduleName) != std::string::npos)
         {
-            if ((startPos = line.find(argSearch)) != std::string::npos)
+            if ((startPos = line.find(argName)) != std::string::npos)
             {
                 if ((endPos = line.find(' ', startPos)) == std::string::npos)
                 {
                     endPos = line.size();
                 }
-                startPos += argSearch.size();
-                fileToWrite << line.substr(0, startPos) << argValue
-                            << line.substr(endPos, line.size() - endPos)
-                            << std::endl;
-                found = true;
-                continue;
+          startPos += argName.size();
+          if(argValue == noValue)
+          {
+             fileToWrite << line.substr(0, startPos)
+                   << line.substr(endPos, line.size() - endPos)
+                   << std::endl;
+          }
+          else if(argValue == deleteValue)
+          {
+             fileToWrite << line.substr(0, startPos-argName.size())
+                   << line.substr(endPos, line.size() - endPos)
+                   << std::endl;
+          }
+          else
+          {
+             fileToWrite << line.substr(0, startPos) << argValue
+                   << line.substr(endPos, line.size() - endPos)
+                   << std::endl;
+          }
+          found = true;
+          continue;
             }
+        else //add the new arg
+        {
+          if(argValue == noValue)
+          {
+            fileToWrite << line << ' ' << argName << std::endl;
+          }
+          else if(argValue == deleteValue)
+          {
+            fileToWrite << line << std::endl;
+          }
+          else
+          {
+            fileToWrite << line << ' ' << argName << argValue << std::endl;
+          }
+            found = true;
+            continue;
+          }
         }
         fileToWrite << line << std::endl;
     }
@@ -983,8 +1204,10 @@
     std::string valueStr;
     auto value = minPasswdLength;
     unsigned long tmp = 0;
-    if (getPamModuleArgValue(pamCrackLib, minPasswdLenProp, valueStr) !=
-        success)
+    int retval = success,policy=0;
+    
+    retval = getPamModuleArgValue(pamCrackLib, minPasswdLenProp, valueStr);
+    if((retval != success) || (strcmp(valueStr.c_str(),deleteValue) == 0))
     {
         AccountPolicyIface::minPasswordLength(minPasswdLength);
     }
@@ -1008,8 +1231,8 @@
         AccountPolicyIface::minPasswordLength(value);
     }
     valueStr.clear();
-    if (getPamModuleArgValue(pamPWHistory, remOldPasswdCount, valueStr) !=
-        success)
+    retval = getPamModuleArgValue(pamPWHistory, remOldPasswdCount, valueStr);
+    if((retval != success) || (strcmp(valueStr.c_str(),deleteValue) == 0))
     {
         AccountPolicyIface::rememberOldPasswordTimes(0);
     }
@@ -1034,7 +1257,20 @@
         AccountPolicyIface::rememberOldPasswordTimes(value);
     }
     valueStr.clear();
-    if (getPamModuleArgValue(pamTally2, maxFailedAttempt, valueStr) != success)
+
+    // Password Policy Complexity Reboot Code
+    policy = getPasswordPolicyComplexity();
+    if(policy == success)
+    {
+       AccountPolicyIface::passwordPolicyComplexity(complexityLevel[DISABLED]);
+    }
+    else
+    {
+      AccountPolicyIface::passwordPolicyComplexity(complexityLevel[policy]);
+    }
+
+    retval = getPamModuleArgValue(pamTally2, maxFailedAttempt, valueStr);
+    if((retval != success) || (strcmp(valueStr.c_str(),deleteValue) == 0))
     {
         AccountPolicyIface::maxLoginAttemptBeforeLockout(0);
     }
@@ -1059,7 +1295,9 @@
         AccountPolicyIface::maxLoginAttemptBeforeLockout(value16);
     }
     valueStr.clear();
-    if (getPamModuleArgValue(pamTally2, unlockTimeout, valueStr) != success)
+
+    retval = getPamModuleArgValue(pamTally2, unlockTimeout, valueStr);
+    if((retval != success) || (strcmp(valueStr.c_str(),deleteValue) == 0))
     {
         AccountPolicyIface::accountUnlockTimeout(0);
     }
