--- a/user_mgr.hpp	2023-07-21 13:49:01.639755543 -0400
+++ b/user_mgr.hpp	2023-07-21 13:41:39.711417342 -0400
@@ -137,6 +137,14 @@
     void createUser(std::string userName, std::vector<std::string> groupNames,
                     std::string priv, bool enabled) override;
 
+    /** @brief password user method.
+     *  This method renames the user as requested
+     *
+     *  @param[in] userName - user to set password expired
+     *  @param[in] isExpired - set if the password is expired
+     */
+   void setPasswordExpired(std::string userName, bool isExpired) override;
+  
     /** @brief rename user method.
      *  This method renames the user as requested
      *
--- a/user_mgr.cpp	2023-07-21 13:49:01.639755543 -0400
+++ b/user_mgr.cpp	2023-07-21 13:41:36.915390382 -0400
@@ -484,6 +484,40 @@
     UserMgrIface::allGroups(groupsMgr);
 }
 
+void UserMgr::setPasswordExpired(std::string userName, bool isExpired)
+{
+  
+  if(isExpired)
+    {
+	try
+	  {
+	    executeCmd("/usr/bin/chage", "--lastday","0" ,userName.c_str());
+	  }
+	catch (const InternalFailure& e)
+	  {
+	    log<level::ERR>("Unable to reset login failure counter");
+	    elog<InternalFailure>();
+	  }
+    }
+  else
+    {
+      
+      constexpr long secondsPerDay = 60 * 60 * 24;
+      std::string today = std::to_string(static_cast<long>(time(NULL)) / secondsPerDay);
+      	try
+	  {
+	    executeCmd("/usr/bin/chage", "--lastday",today.c_str() ,userName.c_str());
+	  }
+	catch (const InternalFailure& e)
+	  {
+	    log<level::ERR>("Unable to reset login failure counter");
+	    elog<InternalFailure>();
+	  }
+    }
+
+	
+}
+
 void UserMgr::renameUser(std::string userName, std::string newUserName)
 {
     // All user management lock has to be based on /etc/shadow
