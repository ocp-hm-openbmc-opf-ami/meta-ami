From 47601c3530560490045d38c9e21b82fd68c510c1 Mon Sep 17 00:00:00 2001
From: Mohammed Javith Akthar M <mohammedjavitham@ami.com>
Date: Mon, 24 Jul 2023 11:57:01 +0545
Subject: [PATCH 2/2] virtual-media add nfs support

Signed-off-by: Mohammed Javith Akthar M <mohammedjavitham@ami.com>
---
 src/interfaces/mount_point_state_machine.hpp |   2 +
 src/nfs.hpp                                  |  51 +++++++++
 src/resources.hpp                            |  42 ++++++-
 src/state/activating_state.cpp               |  61 +++++++++-
 src/state/activating_state.hpp               |   6 +
 src/state/active_state.cpp                   | 111 +++++++++++++++++++
 src/state/initial_state.hpp                  |   2 +-
 7 files changed, 269 insertions(+), 6 deletions(-)
 create mode 100644 src/nfs.hpp
 create mode 100644 src/state/active_state.cpp

diff --git a/src/interfaces/mount_point_state_machine.hpp b/src/interfaces/mount_point_state_machine.hpp
index e6b175c..0dd2199 100644
--- a/src/interfaces/mount_point_state_machine.hpp
+++ b/src/interfaces/mount_point_state_machine.hpp
@@ -18,6 +18,8 @@ struct MountPointStateMachine
         bool rw;
         std::unique_ptr<resource::Mount> mountPoint;
         std::unique_ptr<utils::CredentialsProvider> credentials;
+       std::unique_ptr<resource::NfsMount> mountPointNfs;
+
     };
 
     virtual ~MountPointStateMachine() = default;
diff --git a/src/nfs.hpp b/src/nfs.hpp
new file mode 100644
index 0000000..eb92ef8
--- /dev/null
+++ b/src/nfs.hpp
@@ -0,0 +1,51 @@
+#pragma once
+
+#include "logger.hpp"
+#include "utils.hpp"
+
+#include <sys/mount.h>
+
+#include <filesystem>
+#include <optional>
+
+namespace fs = std::filesystem;
+#define MAX_CMD_NAME_LEN                ((4*256) + 256)
+
+class NfsShare
+{
+    public:
+        NfsShare(const fs::path& mountDir) : mountDir(mountDir)
+    {
+    }
+
+        bool mount(const fs::path& remote, bool rw)
+        {
+            LogMsg(Logger::Debug, "Trying to mount NFS remotely : ", remote);
+
+            char MountCmd [MAX_CMD_NAME_LEN]={0};
+            int size=sizeof(MountCmd);
+
+            int ret = snprintf (MountCmd, static_cast<size_t>(size), "mount -t nfs -o rw,nolock  %s %s",remote.c_str(), mountDir.c_str());
+            if(ret >= size || ret < 0)
+            {
+                std::cerr << "Buffer Overflow\n";
+                return false;
+            }
+
+            auto ec = system(MountCmd);
+            if( ec != 0)
+            {
+                LogMsg(Logger::Info, "Nfs Mount failed",
+                        " with ec = ", ec, " errno = ", errno);
+                return false;
+            }
+
+            return true;
+        }
+
+    private:
+        std::string mountDir;
+
+};
+
+
diff --git a/src/resources.hpp b/src/resources.hpp
index b211d55..12d0a78 100644
--- a/src/resources.hpp
+++ b/src/resources.hpp
@@ -2,7 +2,7 @@
 
 #include "smb.hpp"
 #include "system.hpp"
-
+#include "nfs.hpp"
 namespace interfaces
 {
 struct MountPointStateMachine;
@@ -104,6 +104,46 @@ class Mount
     std::unique_ptr<Directory> directory;
 };
 
+
+class NfsMount
+{
+  public:
+    NfsMount() = delete;
+    NfsMount(const Mount&) = delete;
+    NfsMount(Mount&& other) = delete;
+    NfsMount& operator=(const Mount&) = delete;
+    NfsMount& operator=(Mount&& other) = delete;
+
+    explicit NfsMount(
+        std::unique_ptr<Directory> directory, NfsShare& nfs,
+        const std::filesystem::path& remote, bool rw) :
+        directory(std::move(directory))
+    {
+        if (!nfs.mount(remote, rw))
+        {
+            throw Error(std::errc::invalid_argument,
+                        "Failed to mount NFS share");
+        }
+    }
+
+    ~NfsMount()
+    {
+        if (int result = ::umount(directory->getPath().string().c_str()))
+        {
+            LogMsg(Logger::Error, result, " : Unable to unmout directory ",
+                   directory->getPath());
+        }
+    }
+
+    std::filesystem::path getPath() const
+    {
+        return directory->getPath();
+    }
+
+  private:
+    std::unique_ptr<Directory> directory;
+};
+
 class Process
 {
   public:
diff --git a/src/state/activating_state.cpp b/src/state/activating_state.cpp
index 2e40fc4..37da28f 100644
--- a/src/state/activating_state.cpp
+++ b/src/state/activating_state.cpp
@@ -120,11 +120,14 @@ std::unique_ptr<BasicState> ActivatingState::activateLegacyMode()
     {
         return mountSmbShare();
     }
-    if (isHttpsUrl(machine.getTarget()->imgUrl))
+    else if (isHttpsUrl(machine.getTarget()->imgUrl))
     {
         return mountHttpsShare();
     }
-
+    else if (isNfsUrl(machine.getTarget()->imgUrl))
+    {
+       return mountNfsShare();
+    }
     return std::make_unique<ReadyState>(machine, std::errc::invalid_argument,
                                         "URL not recognized");
 }
@@ -138,7 +141,7 @@ std::unique_ptr<BasicState> ActivatingState::mountSmbShare()
 
         SmbShare smb(mountDir->getPath());
         fs::path remote = getImagePath(machine.getTarget()->imgUrl);
-        auto remoteParent = "/" + remote.parent_path().string();
+        auto remoteParent = "//" + remote.parent_path().string();
         auto localFile = mountDir->getPath() / remote.filename();
 
         LogMsg(Logger::Info, machine.getName(), " Remote name: ", remote,
@@ -177,6 +180,41 @@ std::unique_ptr<BasicState> ActivatingState::mountHttpsShare()
 
     return nullptr;
 }
+std::unique_ptr<BasicState> ActivatingState::mountNfsShare()
+{
+    try
+    {
+        auto mountDir =
+            std::make_unique<resource::Directory>(machine.getName());
+
+        NfsShare nfs(mountDir->getPath());
+        fs::path remote = getImagePath(machine.getTarget()->imgUrl);
+        auto remoteParent = remote.parent_path().string();
+        auto localFile = mountDir->getPath() / remote.filename();
+
+        LogMsg(Logger::Debug, machine.getName(), " Remote name: ", remote,
+               "\n Remote parent: ", remoteParent,
+               "\n Local file: ", localFile);
+
+        machine.getTarget()->mountPointNfs = std::make_unique<resource::NfsMount>(
+            std::move(mountDir), nfs, remoteParent, machine.getTarget()->rw);
+
+        process = spawnNbdKit(machine, localFile);
+        if (!process)
+        {
+            return std::make_unique<ReadyState>(machine,
+                                                std::errc::operation_canceled,
+                                                "Unable to setup NbdKit");
+        }
+
+        return nullptr;
+    }
+    catch (const resource::Error& e)
+    {
+        return std::make_unique<ReadyState>(machine, e.errorCode, e.what());
+    }
+}
+
 
 std::unique_ptr<resource::Process>
     ActivatingState::spawnNbdKit(interfaces::MountPointStateMachine& machine,
@@ -313,7 +351,7 @@ bool ActivatingState::getImagePathFromUrl(const std::string& urlScheme,
     {
         if (imagePath != nullptr)
         {
-            *imagePath = imageUrl.substr(urlScheme.size() - 1);
+            *imagePath = imageUrl.substr(urlScheme.size());
             return true;
         }
 
@@ -325,6 +363,17 @@ bool ActivatingState::getImagePathFromUrl(const std::string& urlScheme,
     return false;
 }
 
+bool ActivatingState::isNfsUrl(const std::string& imageUrl)
+{
+    return checkUrl("nfs://", imageUrl);
+}
+
+bool ActivatingState::getImagePathFromNfsUrl(const std::string& imageUrl,
+                                              std::string* imagePath)
+{
+    return getImagePathFromUrl("nfs://", imageUrl, imagePath);
+}
+
 bool ActivatingState::isHttpsUrl(const std::string& imageUrl)
 {
     return checkUrl("https://", imageUrl);
@@ -359,6 +408,10 @@ fs::path ActivatingState::getImagePath(const std::string& imageUrl)
     {
         return {imagePath};
     }
+    if (isNfsUrl(imageUrl) && getImagePathFromNfsUrl(imageUrl, &imagePath))
+    {
+        return {imagePath};
+    }
 
     LogMsg(Logger::Error, "Unrecognized url's scheme encountered");
     return {""};
diff --git a/src/state/activating_state.hpp b/src/state/activating_state.hpp
index 295d185..9b587e4 100644
--- a/src/state/activating_state.hpp
+++ b/src/state/activating_state.hpp
@@ -26,6 +26,8 @@ struct ActivatingState : public BasicStateT<ActivatingState>
     std::unique_ptr<BasicState> activateLegacyMode();
     std::unique_ptr<BasicState> mountSmbShare();
     std::unique_ptr<BasicState> mountHttpsShare();
+    std::unique_ptr<BasicState> mountNfsShare();
+
 
     static std::unique_ptr<resource::Process>
         spawnNbdKit(interfaces::MountPointStateMachine& machine,
@@ -52,6 +54,10 @@ struct ActivatingState : public BasicStateT<ActivatingState>
                                         std::string* imagePath);
     static fs::path getImagePath(const std::string& imageUrl);
 
+    static bool isNfsUrl(const std::string& imageUrl);
+    static bool getImagePathFromNfsUrl(const std::string& imageUrl,
+                                        std::string* imagePath);
+
     std::unique_ptr<resource::Process> process;
     std::unique_ptr<resource::Gadget> gadget;
 };
diff --git a/src/state/active_state.cpp b/src/state/active_state.cpp
new file mode 100644
index 0000000..0308c7f
--- /dev/null
+++ b/src/state/active_state.cpp
@@ -0,0 +1,111 @@
+#include "active_state.hpp"
+
+#include "deactivating_state.hpp"
+
+ActiveState::ActiveState(interfaces::MountPointStateMachine& machine,
+                         std::unique_ptr<resource::Process> process,
+                         std::unique_ptr<resource::Gadget> gadget) :
+    BasicStateT(machine),
+    process(std::move(process)), gadget(std::move(gadget)){};
+
+ActiveState::ActiveState(interfaces::MountPointStateMachine& machine) :
+    BasicStateT(machine)
+{
+    lastStats = "";
+    lastAccess = std::chrono::steady_clock::now();
+};
+
+std::unique_ptr<BasicState> ActiveState::onEnter()
+{
+    if (Configuration::inactivityTimeout == std::chrono::seconds(0))
+    {
+        LogMsg(Logger::Info, "InactivityTimeout disabled");
+        return nullptr;
+    }
+
+    handler = [this](const boost::system::error_code& ec) {
+        if (ec)
+        {
+            return;
+        }
+
+        auto now = std::chrono::steady_clock::now();
+        std::optional<std::string> stats;
+
+        if (machine.getConfig().mode == Configuration::Mode::internal)
+        {
+            if (machine.getDest() ==
+                interfaces::MountPointStateMachine::Dest::host)
+            {
+                stats = UsbGadget::getStats(machine.getConfig().ramDisk);
+            }
+            else if (machine.getDest() ==
+                     interfaces::MountPointStateMachine::Dest::bmc)
+            {
+                //@TODO: check the disk status
+            }
+            else
+            {
+                LogMsg(Logger::Info, machine.getName(),
+                       " invalid unmount target, .");
+            }
+        }
+        else
+        {
+            stats = UsbGadget::getStats(std::string(machine.getName()));
+        }
+
+        if (stats && (*stats != lastStats))
+        {
+            lastStats = std::move(*stats);
+            lastAccess = now;
+        }
+
+        auto timeSinceLastAccess =
+                std::chrono::duration_cast<std::chrono::seconds>(now -
+                                                                 lastAccess);
+        if (timeSinceLastAccess >= Configuration::inactivityTimeout)
+        {
+            LogMsg(Logger::Info, machine.getName(),
+                   " Inactivity timer expired (",
+                       Configuration::inactivityTimeout.count(),
+                       "s) - Unmounting");
+            // unmount media & stop retriggering timer
+            boost::asio::spawn(
+                machine.getIoc(),
+                [&machine = machine](boost::asio::yield_context yield) {
+                    if (machine.getConfig().mode ==
+                        Configuration::Mode::internal)
+                    {
+                        if (machine.getDest() ==
+                            interfaces::MountPointStateMachine::Dest::host)
+                        {
+                            machine.emitUnmountEvent(
+                                interfaces::MountPointStateMachine::Dest::host);
+                        }
+                        else
+                        {
+                            LogMsg(Logger::Info, machine.getName(),
+                                   " invalid unmount target, .");
+                        }
+                    }
+                    else
+                        machine.emitUnmountEvent();
+                });
+            return;
+        }
+        else
+        {
+            machine.getConfig().remainingInactivityTimeout =
+                Configuration::inactivityTimeout - timeSinceLastAccess;
+        }
+
+        timer.expires_from_now(std::chrono::seconds(1));
+        timer.async_wait(handler);
+    };
+    timer.expires_from_now(std::chrono::seconds(1));
+    timer.async_wait(handler);
+
+    return nullptr;
+}
+
diff --git a/src/state/initial_state.hpp b/src/state/initial_state.hpp
index 46ebddd..a9728a9 100644
--- a/src/state/initial_state.hpp
+++ b/src/state/initial_state.hpp
@@ -230,7 +230,7 @@ struct InitialState : public BasicStateT<InitialState>
                            getObjectPath(machine), machine.getName());
 
                     interfaces::MountPointStateMachine::Target target = {
-                        imgUrl, rw, nullptr, nullptr};
+                        imgUrl, rw, nullptr, nullptr,nullptr};
 
                     if (std::holds_alternative<unix_fd>(fd))
                     {
-- 
2.40.1

