From dba9e917906f903da4ad6b2722174d2717005fce Mon Sep 17 00:00:00 2001
From: vipinc <vipinc@ami.com>
Date: Thu, 20 Oct 2022 10:10:24 +0530
Subject: [PATCH] Add Previous and Current PostCode Support

Added PreviousCycleCount and CurrentCycleCount to keep track of Number of Boot Cycle.

Tested:
-Verified PreviousCycleCount and CurrentCycleCount dbusObjects is created.
-Verified PreviousCycleCount and CurrentCycleCount are updated properly based on the boot cycle.

root@intel-obmc:~#  busctl introspect xyz.openbmc_project.State.Boot.PostCode0 /xyz/openbmc_project/
State/Boot/PostCode0 xyz.openbmc_project.State.Boot.PostCode
NAME                                    TYPE      SIGNATURE RESULT/VALUE FLAGS
.GetPostCodes                           method    q         a(tay)       -
.GetPostCodesWithTimeStamp              method    q         a{t(tay)}    -
.CurrentBootCycleCount                  property  q         4            emits-change writable
.CurrentCycleCount                      property  q         2            emits-change writable
.MaxBootCycleNum                        property  q         100          emits-change writable
.PreviousCycleCount                     property  q         2            emits-change writable

Signed-off-by: vipinc <vipinc@ami.com>
---
 inc/post_code.hpp | 106 ++++++++++++++++++++++++++++++++++++++--------
 src/main.cpp      |   8 ++--
 src/post_code.cpp |  35 ++++++++++++---
 3 files changed, 122 insertions(+), 27 deletions(-)

diff --git a/inc/post_code.hpp b/inc/post_code.hpp
index 462e8cd..596fc60 100644
--- a/inc/post_code.hpp
+++ b/inc/post_code.hpp
@@ -38,20 +38,26 @@ const static constexpr char *CurrentBootCycleCountName =
     "CurrentBootCycleCount";
 const static constexpr char *CurrentBootCycleIndexName =
     "CurrentBootCycleIndex";
+const static constexpr char *currentCycleCountName = "CurrentCycleCount";
+const static constexpr char *previousCycleCountName = "PreviousCycleCount";
+
 
 // Singleton holder to store host/node and other path information
 class PostCodeDataHolder
 {
-
+    static PostCodeDataHolder *instance;
     PostCodeDataHolder()
     {
     }
 
   public:
-    static PostCodeDataHolder &getInstance()
+    static PostCodeDataHolder *getInstance()
     {
-        static PostCodeDataHolder instance;
-        return instance;
+        if (!instance)
+	{
+            instance = new PostCodeDataHolder;
+	}
+       	return instance;
     }
 
     int node;
@@ -64,6 +70,8 @@ class PostCodeDataHolder
         "/var/lib/phosphor-post-code-manager/host";
     const static constexpr char *HostStatePathPrefix =
         "/xyz/openbmc_project/state/host";
+    const static constexpr char *osStatePathPrefix =
+        "/xyz/openbmc_project/state/os";
 };
 
 struct EventDeleter
@@ -87,8 +95,8 @@ using delete_all =
 
 struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
 {
-    PostCodeDataHolder postcodeDataHolderObj =
-        PostCodeDataHolder::getInstance();
+	PostCodeDataHolder *postcodeDataHolderObj =
+		postcodeDataHolderObj->getInstance();
 
     PostCode(sdbusplus::bus_t &bus, const char *path, EventPtr & /*event*/) :
         sdbusplus::server::object_t<post_code, delete_all>(bus, path), bus(bus),
@@ -97,10 +105,10 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
             sdbusplus::bus::match::rules::type::signal() +
                 sdbusplus::bus::match::rules::member("PropertiesChanged") +
                 sdbusplus::bus::match::rules::path(
-                    postcodeDataHolderObj.PostCodePath +
-                    std::to_string(postcodeDataHolderObj.node)) +
-                sdbusplus::bus::match::rules::interface(
-                    postcodeDataHolderObj.PropertiesIntf),
+			postcodeDataHolderObj->PostCodePath +
+			std::to_string(postcodeDataHolderObj->node)) +
+		sdbusplus::bus::match::rules::interface(
+                    postcodeDataHolderObj->PropertiesIntf),
             [this](sdbusplus::message_t &msg) {
                 std::string objectName;
                 std::map<std::string, std::variant<postcode_t>> msgData;
@@ -120,10 +128,10 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
             sdbusplus::bus::match::rules::type::signal() +
                 sdbusplus::bus::match::rules::member("PropertiesChanged") +
                 sdbusplus::bus::match::rules::path(
-                    postcodeDataHolderObj.HostStatePathPrefix +
-                    std::to_string(postcodeDataHolderObj.node)) +
+                    postcodeDataHolderObj->HostStatePathPrefix +
+                    std::to_string(postcodeDataHolderObj->node)) +
                 sdbusplus::bus::match::rules::interface(
-                    postcodeDataHolderObj.PropertiesIntf),
+                    postcodeDataHolderObj->PropertiesIntf),
             [this](sdbusplus::message_t &msg) {
                 std::string objectName;
                 std::map<std::string, std::variant<std::string>> msgData;
@@ -153,15 +161,61 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
                         }
                     }
                 }
+            }),
+        propertiesChangedSignalCurrentOsState(
+            bus,
+            sdbusplus::bus::match::rules::type::signal() +
+                sdbusplus::bus::match::rules::member("PropertiesChanged") +
+                sdbusplus::bus::match::rules::path(
+                    postcodeDataHolderObj->osStatePathPrefix) +
+                sdbusplus::bus::match::rules::interface(
+                    postcodeDataHolderObj->PropertiesIntf),
+            [this](sdbusplus::message::message &msg) {
+                std::string objectName;
+                std::map<std::string, std::variant<std::string>> msgData;
+                msg.read(objectName, msgData);
+                // Check if it was the Value property that changed.
+                auto valPropMap = msgData.find("OperatingSystemState");
+                {
+                    if (valPropMap != msgData.end())
+                    {
+                        std::string currentHostState =
+                            std::get<std::string>(valPropMap->second);
+                        if (currentHostState == "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive")
+                        {
+                            const std::string &path =
+                                fs::path(strPostCodeListPath);
+                            int prev = currentCycleCount();
+                            previousCycleCount(prev);
+                            currentCycleCount(0);
+
+                            fs::path prevCntPath(path +
+                                                 strPreviousCycleCountName);
+                            std::ofstream prevOsCnt(prevCntPath.c_str(),
+                                                    std::ios::binary);
+                            cereal::JSONOutputArchive cntPrevArchive(prevOsCnt);
+                            cntPrevArchive(prev);
+
+                            fs::path curCntPath(path +
+                                                strCurrentCycleCountName);
+                            std::ofstream curOsCnt(curCntPath.c_str(),
+                                                   std::ios::binary);
+                            cereal::JSONOutputArchive cntCurArchive(curOsCnt);
+                            cntCurArchive(0);
+                        }
+                    }
+                }
             })
+
     {
         phosphor::logging::log<phosphor::logging::level::INFO>(
             "PostCode is created");
-        auto dir = fs::path(postcodeDataHolderObj.PostCodeListPathPrefix +
-                            std::to_string(postcodeDataHolderObj.node));
+	firstCode = false;
+        auto dir = fs::path(postcodeDataHolderObj->PostCodeListPathPrefix +
+                            std::to_string(postcodeDataHolderObj->node));
         fs::create_directories(dir);
-        strPostCodeListPath = postcodeDataHolderObj.PostCodeListPathPrefix +
-                              std::to_string(postcodeDataHolderObj.node) + "/";
+        strPostCodeListPath = postcodeDataHolderObj->PostCodeListPathPrefix +
+                              std::to_string(postcodeDataHolderObj->node) + "/";
         strCurrentBootCycleIndexName = CurrentBootCycleIndexName;
         uint16_t index = 0;
         deserialize(
@@ -173,6 +227,17 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
         deserialize(
             fs::path(strPostCodeListPath + strCurrentBootCycleCountName),
             count);
+        strCurrentCycleCountName = currentCycleCountName;
+        uint16_t currentcount = 0;
+        deserialize(fs::path(strPostCodeListPath + strCurrentCycleCountName),
+                    currentcount);
+        currentCycleCount(currentcount);
+
+        strPreviousCycleCountName = previousCycleCountName;
+        uint16_t prevcount = 0;
+        deserialize(fs::path(strPostCodeListPath + strPreviousCycleCountName),
+                    prevcount);
+        previousCycleCount(prevcount);
         currentBootCycleCount(count);
         maxBootCycleNum(MAX_BOOT_CYCLE_COUNT);
     }
@@ -188,7 +253,8 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
   private:
     void incrBootCycle();
     uint16_t getBootNum(const uint16_t index) const;
-
+    void bootCount();
+    
     sdbusplus::bus_t &bus;
     std::chrono::time_point<std::chrono::steady_clock> firstPostCodeTimeSteady;
     uint64_t firstPostCodeUsSinceEpoch;
@@ -197,9 +263,13 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
     std::string strCurrentBootCycleIndexName;
     uint16_t currentBootCycleIndex;
     std::string strCurrentBootCycleCountName;
+    std::string strCurrentCycleCountName;
+    std::string strPreviousCycleCountName;
+    bool firstCode;
     void savePostCodes(postcode_t code);
     sdbusplus::bus::match_t propertiesChangedSignalRaw;
     sdbusplus::bus::match_t propertiesChangedSignalCurrentHostState;
+    sdbusplus::bus::match_t propertiesChangedSignalCurrentOsState;
     fs::path serialize(const std::string &path);
     bool deserialize(const fs::path &path, uint16_t &index);
     bool deserializePostCodes(const fs::path &path,
diff --git a/src/main.cpp b/src/main.cpp
index 7048dd2..2a7a62e 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -19,8 +19,8 @@
 
 int main(int argc, char* argv[])
 {
-    PostCodeDataHolder postcodeDataHolderObj =
-        PostCodeDataHolder::getInstance();
+    PostCodeDataHolder* postcodeDataHolderObj =
+        postcodeDataHolderObj->getInstance();
 
     int arg;
     int optIndex = 0;
@@ -36,7 +36,7 @@ int main(int argc, char* argv[])
         switch (arg)
         {
             case 'h':
-                postcodeDataHolderObj.node = std::stoi(optarg);
+                postcodeDataHolderObj->node = std::stoi(optarg);
                 break;
             default:
                 break;
@@ -60,7 +60,7 @@ int main(int argc, char* argv[])
     sdbusplus::bus_t bus = sdbusplus::bus::new_default();
     sdbusplus::server::manager_t m{bus, DBUS_OBJECT_NAME};
 
-    intfName = DBUS_INTF_NAME + std::to_string(postcodeDataHolderObj.node);
+    intfName = DBUS_INTF_NAME + std::to_string(postcodeDataHolderObj->node);
 
     bus.request_name(intfName.c_str());
 
diff --git a/src/post_code.cpp b/src/post_code.cpp
index b1ffab8..53e3442 100644
--- a/src/post_code.cpp
+++ b/src/post_code.cpp
@@ -17,14 +17,16 @@
 
 #include "iomanip"
 
+PostCodeDataHolder* PostCodeDataHolder::instance = 0;
+
 void PostCode::deleteAll()
 {
-    auto dir = fs::path(postcodeDataHolderObj.PostCodeListPathPrefix +
-                        std::to_string(postcodeDataHolderObj.node));
+    auto dir = fs::path(postcodeDataHolderObj->PostCodeListPathPrefix +
+                        std::to_string(postcodeDataHolderObj->node));
     std::uintmax_t n = fs::remove_all(dir);
     std::cerr << "clearPostCodes deleted " << n << " files in "
-              << postcodeDataHolderObj.PostCodeListPathPrefix +
-                     std::to_string(postcodeDataHolderObj.node)
+              << postcodeDataHolderObj->PostCodeListPathPrefix +
+                     std::to_string(postcodeDataHolderObj->node)
               << std::endl;
     fs::create_directories(dir);
     postCodes.clear();
@@ -69,6 +71,17 @@ std::map<uint64_t, postcode_t>
     return codes;
 }
 
+void PostCode::bootCount()
+{
+    const std::string& path = strPostCodeListPath;
+    int cur = currentCycleCount() + 1;
+    currentCycleCount(cur);
+    fs::path cntPath(path + strCurrentCycleCountName);
+    std::ofstream osCnt(cntPath.c_str(), std::ios::binary);
+    cereal::JSONOutputArchive cntArchive(osCnt);
+    cntArchive(cur);
+}
+
 void PostCode::savePostCodes(postcode_t code)
 {
     // steady_clock is a monotonic clock that is guaranteed to never be adjusted
@@ -77,11 +90,14 @@ void PostCode::savePostCodes(postcode_t code)
                         std::chrono::system_clock::now().time_since_epoch())
                         .count();
 
-    if (postCodes.empty())
+    if (postCodes.empty() && firstCode == false)
     {
         firstPostCodeTimeSteady = postCodeTimeSteady;
         firstPostCodeUsSinceEpoch = tsUS; // uS since epoch for 1st post code
         incrBootCycle();
+	bootCount();
+        firstCode = true;
+
     }
     else
     {
@@ -91,6 +107,15 @@ void PostCode::savePostCodes(postcode_t code)
                    postCodeTimeSteady - firstPostCodeTimeSteady)
                    .count();
     }
+    if (firstCode)
+    {
+        primarycode_t tmpCode = std::get<0>(code);
+        if (tmpCode != 1)
+        {
+            return;
+        }
+        firstCode = false;
+    }
 
     postCodes.insert(std::make_pair(tsUS, code));
     serialize(fs::path(strPostCodeListPath));
-- 
2.25.1

