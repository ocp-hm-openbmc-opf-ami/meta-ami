From 32f1688b6284f5fc1d55bc5fb3002dda5ebf3506 Mon Sep 17 00:00:00 2001
From: Jason Messer <jasonm@ami.com>
Date: Wed, 10 Jan 2024 03:41:05 +0000
Subject: [PATCH] PFR update task state modifications - OT-2950

---
 redfish-core/lib/update_service.hpp | 129 +++++++++++++++++++++++++---
 1 file changed, 118 insertions(+), 11 deletions(-)

diff --git a/redfish-core/lib/update_service.hpp b/redfish-core/lib/update_service.hpp
index 51a357b061..1fd4bbb41b 100644
--- a/redfish-core/lib/update_service.hpp
+++ b/redfish-core/lib/update_service.hpp
@@ -67,12 +67,83 @@ static constexpr const char* reqActivationsStandBySpare =
 static constexpr const char* activationsStandBySpare =
     "xyz.openbmc_project.Software.Activation.Activations.StandbySpare";
 
+// PFR image types (pcType)
+enum pfrImgPCType
+{
+    pfrCPLDUpdateCap = 0x00,
+    pfrPCHPFM = 0x01,
+    pfrPCHUpdateCap = 0x02,
+    pfrBMCPFM = 0x03,
+    pfrBMCUpdateCap = 0x04,
+    seamlessPCHUpdateCap = 0x05,
+    pfrAFMUpdateCap = 0x06,
+    pfrCmpstCPLDUpdateCap = 0x07,
+    pfrCmpstRetimerUpdateCap = 0x09
+};
+
+static constexpr const uint32_t pfrBlock0MagicTag = 0xB6EAFD19;
+
+// PFR block 0 structure (the very first data in PFR image)
+struct pfrImgBlock0
+{
+    uint32_t tag;
+    uint8_t pcLength[4];
+    uint8_t pcType[4];
+    uint8_t reserved1[4];
+    uint8_t hash256[32];
+    uint8_t hash384[48];
+} __attribute__((packed));
+
+// Read the PFR image pcType 
+static int readPfrImageType(std::filesystem::path imgPath)
+{
+    uint32_t imgMagic {};
+    constexpr size_t readBufferSize = sizeof(pfrImgBlock0);
+    std::array<char, readBufferSize> readBuffer = {};
+    pfrImgBlock0* block0Data = nullptr;
+
+    if (std::filesystem::exists(imgPath))
+    {
+        try
+        {
+            std::ifstream imgFile(imgPath, std::ios::binary | std::ios::in);
+
+            if (!imgFile.good())
+            {
+                BMCWEB_LOG_ERROR("Image file read failed: {}", imgPath.string());
+                return -1;
+            }
+
+            imgFile.read(readBuffer.data(), readBufferSize);
+
+            block0Data = reinterpret_cast<pfrImgBlock0*>(readBuffer.data());
+
+            imgMagic = block0Data->tag;
+            if (imgMagic != pfrBlock0MagicTag)
+            {
+                BMCWEB_LOG_ERROR("Staged image magic number match failed");
+                return -1;
+            }
+        }
+        catch (std::exception& e)
+        {
+            BMCWEB_LOG_ERROR("EXCEPTION: {}", e.what());
+            return -1;
+        }
+
+        return static_cast<int>(block0Data->pcType[0]); // return the pcType byte
+    }
+    BMCWEB_LOG_ERROR("Image file does not exist: {}", imgPath.string());
+    return -1;
+}
+
 inline static void cleanUp()
 {
     fwUpdateInProgress = false;
     fwUpdateMatcher = nullptr;
     fwUpdateErrorMatcher = nullptr;
 }
+
 inline static void activateImage(const std::string& objPath,
                                  const std::string& service,
                                  const std::vector<std::string>& imgUriTargets)
@@ -285,19 +356,55 @@ static void
                                 return task::completed;
                             }
 
+                            // Staged activation is a PFR concept, Therefore, if Activation = "Staged",
+                            // we can assume a PFR related update is in progress.
                             if (state->ends_with("Staged"))
                             {
-                                taskData->state = "Stopping";
-                                taskData->messages.emplace_back(
-                                    messages::taskPaused(index));
-
-                                // its staged, set a long timer to
-                                // allow them time to complete the
-                                // update (probably cycle the
-                                // system) if this expires then
-                                // task will be cancelled
-                                taskData->extendTimer(std::chrono::hours(5));
-                                return !task::completed;
+                                // Get staged PFR image type 
+                                int imageType = readPfrImageType(std::filesystem::path{"/dev/mtd/image-stg"});
+                                BMCWEB_LOG_DEBUG("Update capsule staged. imageType = {}", imageType);
+
+                                // If an error occurred determining staged image type
+                                // perhaps it is not a PFR image (doh).  
+                                // I'm unaware of any use cases for this. 
+                                if (imageType < 0)
+                                {
+                                    BMCWEB_LOG_ERROR("Non-PFR image staged!");
+                                    taskData->state = "Exception";
+                                    taskData->status = "Warning";
+                                    taskData->messages.emplace_back(
+                                    messages::taskAborted(index));
+                                    return task::completed;
+
+                                } // If staged image is seamless update capsule 
+                                else if (seamlessPCHUpdateCap == imageType)
+                                {
+                                    // For seamless updates, we will pause task here.
+                                    // However, when the seamless update completes, the  
+                                    // task progress and state will be updated 
+                                    taskData->state = "Stopping";
+                                    taskData->messages.emplace_back(
+                                        messages::taskPaused(index));
+
+                                    BMCWEB_LOG_DEBUG("Task state = Paused");
+
+                                    // Set long timer to allow seamless update time to complete
+                                    taskData->extendTimer(std::chrono::hours(1));
+                                    return !task::completed;
+
+                                } // Non seamless update.  Image is staged so mark task as complete
+                                else
+                                {
+                                    // If we made it here, it most likely means ApplyTime = OnReset, image is  
+                                    // staged, and BMC is still running. Note: ApplyTime = Immediate causes
+                                    // BMC to be held in reset while CPLD performs update (aka T-1 mode).
+                                    // Therefore, task will never complete and not exist when BMC starts back up.
+                                    BMCWEB_LOG_DEBUG("Task state = Complete");
+                                    taskData->messages.emplace_back(
+                                        messages::taskCompletedOK(index));
+                                    taskData->state = "Completed";
+                                    return task::completed;
+                                }
                             }
 
                             if (state->ends_with("Active"))
-- 
2.34.1

