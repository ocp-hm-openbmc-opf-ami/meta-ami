From 5fe3963e07fa4cdf19a39a0b171c8a81bc0ff2e2 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Fri, 16 Feb 2024 16:49:42 +0530
Subject: [PATCH 206/206] Added post call for BRCM PCIE switch

Description:
Added support for StartFirmwareUpdate, Refresh, StartTraceBuffer, StartCoreDump

Test Case:
1) Post Call
https://{{BMCIP}}/redfish/v1/Oem/Ami/PcieSwitch/1/Actions/PcieSwitch.StartFWUpdate
Need to upload firmware image
body
Response
{
    "@odata.id": "/redfish/v1/TaskService/Tasks/4",
    "@odata.type": "#Task.v1_4_3.Task",
    "Id": "4",
    "TaskState": "New",
    "TaskStatus": "OK"
}
Need to check status call
https://{{BMCIP}}/redfish/v1/TaskService/Tasks/4
In progress stage
{
    "@odata.id": "/redfish/v1/TaskService/Tasks/4",
    "@odata.type": "#Task.v1_4_3.Task",
    "HidePayload": false,
    "Id": "4",
    "Messages": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '4' has started.",
            "MessageArgs": [
                "4"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskStarted",
            "MessageSeverity": "OK",
            "Resolution": "None."
        },
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '4' has started.",
            "MessageArgs": [
                "4"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskStarted",
            "MessageSeverity": "OK",
            "Resolution": "None."
        }
    ],
    "Name": "Task 4",
    "Payload": {
        "HttpHeaders": [],
        "HttpOperation": "POST",
        "JsonBody": "null",
        "TargetUri": "/redfish/v1/Oem/Ami/PcieSwitch/1/Actions/PcieSwitch.StartFWUpdate"
    },
    "PercentComplete": 0,
    "StartTime": "2024-02-20T14:51:13+00:00",
    "TaskMonitor": "/redfish/v1/TaskService/Tasks/4/Monitor",
    "TaskState": "COMMAND_IN_PROGRESS",
    "TaskStatus": "OK"
}

Completed stage

{
    "@odata.id": "/redfish/v1/TaskService/Tasks/4",
    "@odata.type": "#Task.v1_4_3.Task",
    "EndTime": "2024-02-20T14:53:16+00:00",
    "HidePayload": false,
    "Id": "4",
    "Messages": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '4' has started.",
            "MessageArgs": [
                "4"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskStarted",
            "MessageSeverity": "OK",
            "Resolution": "None."
        },
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '4' has started.",
            "MessageArgs": [
                "4"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskStarted",
            "MessageSeverity": "OK",
            "Resolution": "None."
        },
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '4' has completed.",
            "MessageArgs": [
                "4"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskCompletedOK",
            "MessageSeverity": "OK",
            "Resolution": "None."
        }
    ],
    "Name": "Task 4",
    "Payload": {
        "HttpHeaders": [],
        "HttpOperation": "POST",
        "JsonBody": "null",
        "TargetUri": "/redfish/v1/Oem/Ami/PcieSwitch/1/Actions/PcieSwitch.StartFWUpdate"
    },
    "PercentComplete": 100,
    "StartTime": "2024-02-20T14:51:13+00:00",
    "TaskMonitor": "/redfish/v1/TaskService/Tasks/4/Monitor",
    "TaskState": "SUCCESS",
    "TaskStatus": "OK"
}

2) Post Call
https://{{BMCIP}}/redfish/v1/Oem/Ami/PcieSwitch/1/Actions/PcieSwitch.StartCoreDump
Body
{
    "CoreDumpPath" : "/home/coredump"
}
{
    "@odata.id": "/redfish/v1/TaskService/Tasks/3",
    "@odata.type": "#Task.v1_4_3.Task",
    "Id": "1",
    "TaskState": "New",
    "TaskStatus": "OK"
}
https://{{BMCIP}}/redfish/v1/TaskService/Tasks/<>
{
    "@odata.id": "/redfish/v1/TaskService/Tasks/3",
    "@odata.type": "#Task.v1_4_3.Task",
    "EndTime": "2024-02-20T14:49:33+00:00",
    "HidePayload": false,
    "Id": "3",
    "Messages": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '3' has started.",
            "MessageArgs": [
                "3"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskStarted",
            "MessageSeverity": "OK",
            "Resolution": "None."
        },
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '3' has started.",
            "MessageArgs": [
                "3"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskStarted",
            "MessageSeverity": "OK",
            "Resolution": "None."
        },
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '3' has completed with errors.",
            "MessageArgs": [
                "3"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskAborted",
            "MessageSeverity": "Critical",
            "Resolution": "None."
        }
    ],
    "Name": "Task 3",
    "Payload": {
        "HttpHeaders": [
            "User-Agent: PostmanRuntime/7.36.3",
            "Accept: */*",
            "Host: 172.31.2.245",
            "Accept-Encoding: gzip, deflate, br",
            "Connection: keep-alive",
            "Content-Length: 43"
        ],
        "HttpOperation": "POST",
        "JsonBody": "{\n  \"CoreDumpPath\": \"/home/coredump\"\n}",
        "TargetUri": "/redfish/v1/Oem/Ami/PcieSwitch/1/Actions/PcieSwitch.StartCoreDump"
    },
    "PercentComplete": 100,
    "StartTime": "2024-02-20T14:49:33+00:00",
    "TaskMonitor": "/redfish/v1/TaskService/Tasks/3/Monitor",
    "TaskState": "OP_STATUS_NO_COREDUMP_DATA",
    "TaskStatus": "OK"
}
3) Post Call
https://{{BMCIP}}/redfish/v1/Oem/Ami/PcieSwitch/1/Actions/PcieSwitch.StartTraceBuffer
Body
{
    "TraceBufferPath" : "/home/tracebuff"
}
{
    "@odata.id": "/redfish/v1/TaskService/Tasks/2",
    "@odata.type": "#Task.v1_4_3.Task",
    "Id": "1",
    "TaskState": "New",
    "TaskStatus": "OK"
}
https://{{BMCIP}}/redfish/v1/TaskService/Tasks/<>
{
    "@odata.id": "/redfish/v1/TaskService/Tasks/2",
    "@odata.type": "#Task.v1_4_3.Task",
    "EndTime": "2024-02-20T14:45:57+00:00",
    "HidePayload": false,
    "Id": "2",
    "Messages": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '2' has started.",
            "MessageArgs": [
                "2"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskStarted",
            "MessageSeverity": "OK",
            "Resolution": "None."
        },
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '2' has started.",
            "MessageArgs": [
                "2"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskStarted",
            "MessageSeverity": "OK",
            "Resolution": "None."
        },
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The task with Id '2' has completed.",
            "MessageArgs": [
                "2"
            ],
            "MessageId": "TaskEvent.1.0.3.TaskCompletedOK",
            "MessageSeverity": "OK",
            "Resolution": "None."
        }
    ],
    "Name": "Task 2",
    "Payload": {
        "HttpHeaders": [
            "User-Agent: PostmanRuntime/7.36.3",
            "Accept: */*",
            "Host: 172.31.2.245",
            "Accept-Encoding: gzip, deflate, br",
            "Connection: keep-alive",
            "Content-Length: 46"
        ],
        "HttpOperation": "POST",
        "JsonBody": "{\n  \"TraceBufferPath\": \"/home/trasebuff\"\n}",
        "TargetUri": "/redfish/v1/Oem/Ami/PcieSwitch/1/Actions/PcieSwitch.StartTraceBuffer"
    },
    "PercentComplete": 100,
    "StartTime": "2024-02-20T14:45:57+00:00",
    "TaskMonitor": "/redfish/v1/TaskService/Tasks/2/Monitor",
    "TaskState": "SUCCESS",
    "TaskStatus": "OK"
}
4) Post call
https://{{BMCIP}}/redfish/v1/Oem/Ami/PcieSwitch/0/Actions/PcieSwitch.Refresh
Response 
200k

5) Post Call
https://{{BMCIP}}/redfish/v1/Oem/Ami/PcieSwitch/0/Actions/PcieSwitch.StartFWUpdate
{
    "error": {
        "@Message.ExtendedInfo": [
            {
                "@odata.type": "#Message.v1_1_1.Message",
                "Message": "The action StartFwUpdate for the Base mode is not supported by the resource.",
                "MessageArgs": [
                    "StartFwUpdate for the Base mode"
                ],
                "MessageId": "Base.1.16.0.ActionNotSupported",
                "MessageSeverity": "Critical",
                "Resolution": "The action supplied cannot be resubmitted to the implementation.  Perhaps the action was invalid, the wrong resource was the target or the implementation documentation may be of assistance."
            }
        ],
        "code": "Base.1.16.0.ActionNotSupported",
        "message": "The action StartFwUpdate for the Base mode is not supported by the resource."
    }
}


Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 http/http_connection.hpp             |   5 +
 redfish-core/include/redfish.hpp     |   4 +
 redfish-core/lib/oem_pcie_switch.hpp | 284 ++++++++++++++++++++++++++-
 3 files changed, 287 insertions(+), 6 deletions(-)

diff --git a/http/http_connection.hpp b/http/http_connection.hpp
index ec36178d..5d4e1bc2 100644
--- a/http/http_connection.hpp
+++ b/http/http_connection.hpp
@@ -452,6 +452,11 @@ class Connection :
                     maxBodySize = limit.second;
                 }
             }
+            std::size_t found = target.find("/Actions/PcieSwitch.StartFWUpdate");
+            if (found!=std::string::npos)
+            {
+                maxBodySize = maxPayloadLimit;
+            }
         }
 
         return maxBodySize;
diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index 85d21cd3..9be5fc32 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -314,6 +314,10 @@ class RedfishService
         requestRoutesPcieSwitchInstanceCollection(app);
         requestRoutesPcieSwitchPortsCollection(app);
         requestRoutesPcieSwitchPortsInstanceCollection(app);
+        requestRoutesPcieSwitchRefresh(app);
+        requestRoutesPcieSwitchCoreDump(app);
+        requestRoutesPcieSwitchTraseBuffer(app);
+        requestRoutesPcieSwitchFWUpdate(app);
         // Note, this must be the last route registered
         requestRoutesRedfish(app);
     }
diff --git a/redfish-core/lib/oem_pcie_switch.hpp b/redfish-core/lib/oem_pcie_switch.hpp
index 7986ce65..efc74b81 100644
--- a/redfish-core/lib/oem_pcie_switch.hpp
+++ b/redfish-core/lib/oem_pcie_switch.hpp
@@ -15,8 +15,6 @@
 */
 #pragma once
 
-// #include "bmcweb_config.h"
-
 #include "bmcweb_config.h"
 
 #include "app.hpp"
@@ -53,6 +51,99 @@
 namespace redfish
 {
 
+static constexpr const char* serviceName = "com.ami.PcieSwMgmt.BrcmAtlas";
+
+void pcieStatusTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                    task::Payload&& payload, const std::string& propertyName,
+                    const std::string& objPath)
+{
+    std::shared_ptr<task::TaskData> task = task::TaskData::createTask(
+        [propertyName](const boost::system::error_code ec,
+                       sdbusplus::message_t& msg,
+                       const std::shared_ptr<task::TaskData>& taskData) {
+        if (ec)
+        {
+            taskData->messages.emplace_back(messages::internalError());
+            taskData->state = "Cancelled";
+            return task::completed;
+        }
+
+        std::string iface;
+        dbus::utility::DBusPropertiesMap values;
+
+        std::string index = std::to_string(taskData->index);
+        msg.read(iface, values);
+
+        if (iface == "com.ami.PcieSwMgmt.BrcmAtlas.Manager")
+        {
+            const std::string* status = nullptr;
+            for (const auto& property : values)
+            {
+                if (property.first == "LastOpStatus")
+                {
+                    status = std::get_if<std::string>(&property.second);
+                    if (status == nullptr)
+                    {
+                        taskData->messages.emplace_back(
+                            messages::internalError());
+                        return task::completed;
+                    }
+                }
+            }
+
+            if (status == nullptr)
+            {
+                return !task::completed;
+            }
+
+            if (*status == "In Progress")
+            {
+                taskData->state = "COMMAND_IN_PROGRESS";
+                taskData->messages.emplace_back(messages::taskStarted(index));
+                taskData->extendTimer(std::chrono::minutes(3));
+                return !task::completed;
+            }
+            if (*status == "Success")
+            {
+                taskData->state = "SUCCESS";
+                taskData->messages.emplace_back(
+                    messages::taskCompletedOK(index));
+                taskData->percentComplete = 100;
+                return task::completed;
+            }
+            if (*status == "Failed")
+            {
+                taskData->state = "OP_STATUS_FAIL";
+                taskData->messages.emplace_back(messages::taskAborted(index));
+                taskData->percentComplete = 100;
+                return task::completed;
+            }
+            if (*status == "CoreDump Unavailable")
+            {
+                taskData->state = "OP_STATUS_NO_COREDUMP_DATA";
+                taskData->messages.emplace_back(messages::taskAborted(index));
+                taskData->percentComplete = 100;
+                return task::completed;
+            }
+            if (*status == "Unsupported Feature")
+            {
+                taskData->state = "OP_STATUS_UNSUPPORTED";
+                taskData->messages.emplace_back(messages::taskAborted(index));
+                taskData->percentComplete = 100;
+                return task::completed;
+            }
+        }
+
+        return !task::completed;
+    },
+        "type='signal',interface='org.freedesktop.DBus.Properties',"
+        "member='PropertiesChanged',path='" +
+            objPath + "'");
+    task->startTimer(std::chrono::minutes(3));
+    task->populateResp(asyncResp->res);
+    task->payload.emplace(std::move(payload));
+}
+
 inline void handleOemPcieSwitchCollectionGet(
     App& app, const crow::Request& req,
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
@@ -118,7 +209,22 @@ inline void handleOemPcieSwitchInstanceGet(
     asyncResp->res.jsonValue["Port"]["@odata.id"] = boost::urls::format(
         "/redfish/v1/Oem/Ami/PcieSwitch/{}/Ports", switchId);
 
-    const std::string& serviceName = "com.ami.PcieSwMgmt.BrcmAtlas" + switchId;
+    asyncResp->res.jsonValue["Actions"]["#PcieSwitch.Refresh"] = {
+        {"target", "/redfish/v1/Oem/Ami/PcieSwitch/" + switchId +
+                       "/Actions/PcieSwitch.Refresh"}};
+
+    asyncResp->res.jsonValue["Actions"]["#PcieSwitch.StartCoreDump"] = {
+        {"target", "/redfish/v1/Oem/Ami/PcieSwitch/" + switchId +
+                       "/Actions/PcieSwitch.StartCoreDump"}};
+
+    asyncResp->res.jsonValue["Actions"]["#PcieSwitch.StartTraceBuffer"] = {
+        {"target", "/redfish/v1/Oem/Ami/PcieSwitch/" + switchId +
+                       "/Actions/PcieSwitch.StartTraceBuffer"}};
+
+    asyncResp->res.jsonValue["Actions"]["#PcieSwitch.StartFWUpdate"] = {
+        {"target", "/redfish/v1/Oem/Ami/PcieSwitch/" + switchId +
+                       "/Actions/PcieSwitch.StartFWUpdate"}};
+
     const std::string& objPath = "/com/ami/PcieSwMgmt/BrcmAtlas/" + switchId;
     crow::connections::systemBus->async_method_call(
         [asyncResp](
@@ -212,7 +318,6 @@ inline void handleOemPcieSwitchPortCollectionGet(
                                             switchId + "/Ports";
     asyncResp->res.jsonValue["Name"] = "PCIE Switch Ports";
 
-    const std::string& serviceName = "com.ami.PcieSwMgmt.BrcmAtlas" + switchId;
     const std::string& objPath = "/com/ami/PcieSwMgmt/BrcmAtlas/" + switchId;
 
     crow::connections::systemBus->async_method_call(
@@ -224,7 +329,6 @@ inline void handleOemPcieSwitchPortCollectionGet(
             BMCWEB_LOG_DEBUG("failed to get property Value  ", ec);
             return;
         }
-        BMCWEB_LOG_DEBUG("## insideeeeBefore Dbus call");
         nlohmann::json& switchArray = asyncResp->res.jsonValue["Members"];
         switchArray = nlohmann::json::array();
         auto& count = asyncResp->res.jsonValue["Members@odata.count"];
@@ -262,7 +366,6 @@ inline void handleOemPcieSwitchPortInstanceGet(
                                             switchId + "/Ports/" + portId;
     asyncResp->res.jsonValue["Name"] = "PCIE Switch Ports instance";
     asyncResp->res.jsonValue["Id"] = portId;
-    const std::string& serviceName = "com.ami.PcieSwMgmt.BrcmAtlas" + switchId;
     const std::string& objPath = "/com/ami/PcieSwMgmt/BrcmAtlas/" + switchId +
                                  "/port/" + portId;
     crow::connections::systemBus->async_method_call(
@@ -308,6 +411,29 @@ inline void handleOemPcieSwitchPortInstanceGet(
         "com.ami.PcieSwMgmt.BrcmAtlas.Ports.Manager");
 }
 
+inline void uploadImage(crow::Response& res, std::string_view body,
+                        std::string& fileName)
+{
+    constexpr const char* imageUploadDir = "/tmp/images_pciesw/";
+    std::filesystem::path filepath(imageUploadDir + bmcweb::getRandomUUID());
+
+    BMCWEB_LOG_DEBUG("Writing file to {}", filepath.string());
+    std::ofstream out(filepath, std::ofstream::out | std::ofstream::binary |
+                                    std::ofstream::trunc);
+    // set the permission of the file to 640
+    std::filesystem::perms permission = std::filesystem::perms::owner_read |
+                                        std::filesystem::perms::group_read;
+    std::filesystem::permissions(filepath, permission);
+    out << body;
+
+    fileName = filepath.generic_string();
+
+    if (out.bad())
+    {
+        messages::internalError(res);
+    }
+}
+
 inline void requestRoutesPcieSwitchCollection(App& app)
 {
     BMCWEB_ROUTE(app, "/redfish/v1/Oem/Ami/PcieSwitch")
@@ -340,4 +466,150 @@ inline void requestRoutesPcieSwitchPortsInstanceCollection(App& app)
             std::bind_front(handleOemPcieSwitchPortInstanceGet, std::ref(app)));
 }
 
+inline void requestRoutesPcieSwitchRefresh(App& app)
+{
+    BMCWEB_ROUTE(
+        app, "/redfish/v1/Oem/Ami/PcieSwitch/<str>/Actions/PcieSwitch.Refresh")
+        .privileges({{"ConfigureComponents"}})
+        .methods(boost::beast::http::verb::post)(
+            [](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const std::string& switchId) {
+        const std::string& objPath = "/com/ami/PcieSwMgmt/BrcmAtlas/" +
+                                     switchId;
+
+        //task::Payload payload(req);
+        //pcieStatusTask(asyncResp, std::move(payload), "LastOpStatus", objPath);
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, req, objPath](const boost::system::error_code ec) {
+            if (ec)
+            {
+                BMCWEB_LOG_ERROR("Bad D-Bus request error: ", ec);
+                return;
+            }
+        },
+            serviceName, objPath, "com.ami.PcieSwMgmt.BrcmAtlas.Manager",
+            "Refresh");
+    });
+}
+
+inline void requestRoutesPcieSwitchCoreDump(App& app)
+{
+    BMCWEB_ROUTE(
+        app,
+        "/redfish/v1/Oem/Ami/PcieSwitch/<str>/Actions/PcieSwitch.StartCoreDump")
+        .privileges({{"ConfigureComponents"}})
+        .methods(boost::beast::http::verb::post)(
+            [](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const std::string& switchId) {
+        const std::string& objPath = "/com/ami/PcieSwMgmt/BrcmAtlas/" +
+                                     switchId;
+        std::string coreDumpPath;
+
+        if (!json_util::readJsonAction(req, asyncResp->res, "CoreDumpPath",
+                                       coreDumpPath))
+        {
+            BMCWEB_LOG_DEBUG("Paramaters are not provided");
+            return;
+        }
+        task::Payload payload(req);
+        pcieStatusTask(asyncResp, std::move(payload), "LastOpStatus", objPath);
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, req, objPath](const boost::system::error_code ec) {
+            if (ec)
+            {
+                BMCWEB_LOG_ERROR("Bad D-Bus request error: ", ec);
+                return;
+            }
+        },
+            serviceName, objPath, "com.ami.PcieSwMgmt.BrcmAtlas.Manager",
+            "StartCoreDump", coreDumpPath);
+    });
+}
+
+inline void requestRoutesPcieSwitchTraseBuffer(App& app)
+{
+    BMCWEB_ROUTE(
+        app,
+        "/redfish/v1/Oem/Ami/PcieSwitch/<str>/Actions/PcieSwitch.StartTraceBuffer")
+        .privileges({{"ConfigureComponents"}})
+        .methods(boost::beast::http::verb::post)(
+            [](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const std::string& switchId) {
+        const std::string& objPath = "/com/ami/PcieSwMgmt/BrcmAtlas/" +
+                                     switchId;
+        std::string traceBufferPath;
+
+        if (!json_util::readJsonAction(req, asyncResp->res, "TraceBufferPath",
+                                       traceBufferPath))
+        {
+            BMCWEB_LOG_DEBUG("Paramaters are not provided");
+            return;
+        }
+        task::Payload payload(req);
+        pcieStatusTask(asyncResp, std::move(payload), "LastOpStatus", objPath);
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, req, objPath](const boost::system::error_code ec) {
+            if (ec)
+            {
+                BMCWEB_LOG_ERROR("Bad D-Bus request error: ", ec);
+                return;
+            }
+        },
+            serviceName, objPath, "com.ami.PcieSwMgmt.BrcmAtlas.Manager",
+            "StartTraceBuffer", traceBufferPath);
+    });
+}
+
+inline void requestRoutesPcieSwitchFWUpdate(App& app)
+{
+    BMCWEB_ROUTE(
+        app,
+        "/redfish/v1/Oem/Ami/PcieSwitch/<str>/Actions/PcieSwitch.StartFWUpdate")
+        .privileges({{"ConfigureComponents"}})
+        .methods(boost::beast::http::verb::post)(
+            [&app](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const std::string& switchId) {
+        if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+        {
+            return;
+        }
+
+        std::string_view contentType = req.getHeaderValue("Content-Type");
+        const std::string& objPath = "/com/ami/PcieSwMgmt/BrcmAtlas/" +
+                                     switchId;
+        std::string fileName;
+
+        BMCWEB_LOG_DEBUG("doPost: contentType={}", contentType);
+
+        // Make sure that content type is application/octet-stream
+        if (boost::iequals(contentType, "application/octet-stream"))
+        {
+            BMCWEB_LOG_DEBUG("upload image \n");
+            uploadImage(asyncResp->res, req.body(), fileName);
+        }
+        else
+        {
+            BMCWEB_LOG_DEBUG("Bad content type specified:{}", contentType);
+            asyncResp->res.result(boost::beast::http::status::bad_request);
+            return;
+        }
+        task::Payload payload(req);
+        pcieStatusTask(asyncResp, std::move(payload), "LastOpStatus", objPath);
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, req, objPath](const boost::system::error_code ec) {
+            if (ec)
+            {
+                BMCWEB_LOG_ERROR("Bad D-Bus request error: ", ec);
+                return;
+            }
+        },
+            serviceName, objPath, "com.ami.PcieSwMgmt.BrcmAtlas.Manager",
+            "StartFWUpdate", fileName);
+    });
+}
+
 } // namespace redfish
-- 
2.34.1

