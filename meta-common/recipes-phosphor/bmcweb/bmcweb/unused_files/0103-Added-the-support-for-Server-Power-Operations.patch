From ce65ae43a4e3ef7eb64d6f946af79a4898b0f5ca Mon Sep 17 00:00:00 2001
From: ramadevip <ramadevip@ami.com>
Date: Thu, 31 Aug 2023 10:20:48 +0530
Subject: [PATCH] Added the support for Server Power Operations while  Host in
 Bios Setup page

Signed-off-by: ramadevip <ramadevip@ami.com>
---
 redfish-core/lib/chassis.hpp | 18 +++++++++---------
 redfish-core/lib/systems.hpp | 36 ++++++++++++++++++------------------
 2 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index e8327ce..3bb1d23 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -802,7 +802,7 @@ inline void NoOperation(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
  asyncResp->res.jsonValue["Resolution"] = "Add properties in the JSON object and resubmit the request.";
 }
 
-const PropertyValue getOperatingSystemState(
+const PropertyValue getHostState(
                             const std::string& processName,
                             const std::string& objectPath,
                              const std::string& interfaceName,
@@ -1064,24 +1064,24 @@ inline void handleChassisResetActionInfoPost(
 
                             task::Payload payload(req);
 
-                            const char* processName = "xyz.openbmc_project.State.Host0";
-                            const char* interfaceName = "xyz.openbmc_project.State.OperatingSystem.Status";
-                            const char* propName = "OperatingSystemState";
-                            const char* objectPath = "/xyz/openbmc_project/state/os";
+			    const char* processName = "xyz.openbmc_project.State.Host";
+                            const char* interfaceName = "xyz.openbmc_project.State.Host";
+                            const char* propName = "CurrentHostState";
+                            const char* objectPath = "/xyz/openbmc_project/state/host0";
 
                             const char* servicePath = "xyz.openbmc_project.State.Chassis";
                             const char* interfacePath = "xyz.openbmc_project.State.Chassis";
                             const char* property_Name = "ChassisHostTransitionTimeOut";
                             const char* objectName = "/xyz/openbmc_project/state/chassis0";
 
-                            auto value = getOperatingSystemState(processName, objectPath, interfaceName, propName);
-                            auto requestedOperatingSystemState = std::get<std::string>(value);
+			    auto value = getHostState(processName, objectPath, interfaceName, propName);
+                            auto reqHostState = std::get<std::string>(value);
 
                             auto timeOut_value = getchassisHostTransitionTimeOut(servicePath, objectName, interfacePath, property_Name);
                             auto reqchassisHostTransitionTimeOut = std::get<uint16_t>(timeOut_value);
 
-                            if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
-                            {
+                            if (reqHostState != "xyz.openbmc_project.State.Host.HostState.Running")
+			    {
 				    NoOperation(asyncResp);
                                     return;
                             }
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 6202fa1..3310e27 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -3409,21 +3409,21 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
 {
         BMCWEB_LOG_DEBUG << "systemResetAction";
 
-        const char* processName = "xyz.openbmc_project.State.Host0";
-        const char* interfaceName = "xyz.openbmc_project.State.OperatingSystem.Status";
-        const char* propName = "OperatingSystemState";
-        const char* objectPath = "/xyz/openbmc_project/state/os";
+	const char* processName = "xyz.openbmc_project.State.Host";
+        const char* interfaceName = "xyz.openbmc_project.State.Host";
+        const char* propName = "CurrentHostState";
+        const char* objectPath = "/xyz/openbmc_project/state/host0";
 
-        auto value = getOperatingSystemState(processName, objectPath, interfaceName, propName);
-        auto requestedOperatingSystemState = std::get<std::string>(value);
+        auto value = getHostState(processName, objectPath, interfaceName, propName);
+        auto reqHostState = std::get<std::string>(value);
 
         std::string command;
         bool hostCommand = true;
 
         if ((resetType == "On") || (resetType == "ForceOn"))
         {
-                if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive")
-                {
+                if (reqHostState == "xyz.openbmc_project.State.Host.HostState.Running")
+		{
                         BMCWEB_LOG_DEBUG << " Host is in Standby state";
                         NoOperation(asyncResp);
                         flag = false;
@@ -3437,8 +3437,8 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
 
         else if(resetType == "ForceOff")
         {
-                if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
-                {
+                if (reqHostState != "xyz.openbmc_project.State.Host.HostState.Running")
+		{
                         BMCWEB_LOG_DEBUG << " Host is in Inactive state";
                         NoOperation(asyncResp);
                         flag = false;
@@ -3452,8 +3452,8 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
 
         else if (resetType == "ForceRestart")
         {
-                 if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
-                 {
+                 if (reqHostState != "xyz.openbmc_project.State.Host.HostState.Running")
+		 {
                          NoOperation(asyncResp);
                          flag = false;
                  }
@@ -3466,8 +3466,8 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
 
         else if (resetType == "GracefulShutdown")
         {
-                if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
-                {
+                if (reqHostState != "xyz.openbmc_project.State.Host.HostState.Running")
+		{
                         BMCWEB_LOG_DEBUG << " Host is in Inactive state";
                         NoOperation(asyncResp);
                         flag = false;
@@ -3481,8 +3481,8 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
 
         else if (resetType == "GracefulRestart")
         {
-                if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
-                {
+                if (reqHostState != "xyz.openbmc_project.State.Host.HostState.Running")
+		{
                         NoOperation(asyncResp);
                         flag = false;
                 }
@@ -3495,8 +3495,8 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
 
         else if (resetType == "PowerCycle")
         {
-                if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
-                {
+                if (reqHostState != "xyz.openbmc_project.State.Host.HostState.Running")
+		{
                         NoOperation(asyncResp);
                         flag = false;
                 }
-- 
2.9.5

