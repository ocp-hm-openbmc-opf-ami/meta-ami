From 4049c3fe2226e57f69946996b0b8762e520dce5d Mon Sep 17 00:00:00 2001
From: ramadevip <ramadevip@ami.com>
Date: Tue, 19 Sep 2023 04:24:46 -0400
Subject: [PATCH] Added the Task States New, Running & Completed

Signed-off-by: ramadevip <ramadevip@ami.com>
---
 redfish-core/lib/chassis.hpp | 19 +++++++++++++++----
 redfish-core/lib/systems.hpp | 35 +++++++++++++++++++++++++++--------
 redfish-core/lib/task.hpp    |  2 +-
 3 files changed, 43 insertions(+), 13 deletions(-)

diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 3bb1d231..3ef92eb7 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -879,7 +879,17 @@ void createImmediateResetTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
                                 return !task::completed;
                             }
 
-                            if(*osState == "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
+			     if(*osState == "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive")
+                            {
+                                            BMCWEB_LOG_DEBUG << " Running case" ;
+                                            taskData->state = "Running";
+                                            taskData->messages.emplace_back(
+                                                            messages::taskStarted(index));
+                                            taskData->extendTimer(std::chrono::minutes(5));
+                                            return !task::completed;
+                            }
+
+                           if(*osState == "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
                             {
                                              taskData->messages.emplace_back(
                                              messages::taskCompletedOK(index));
@@ -903,7 +913,7 @@ void createImmediateResetTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
  * @param[in] asyncResp - Shared pointer for completing asynchronous call
  * @param[in] payload - Double pointer to get the task Data
  */
-void createMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp, task::Payload&& payload)
+/*void createMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp, task::Payload&& payload)
 {
         BMCWEB_LOG_DEBUG << " after do Task creartion ";
 
@@ -972,7 +982,7 @@ void createMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>& async
                     task->startTimer(std::chrono::minutes(5));
                     task->populateResp(asyncResp->res);
                     task->payload.emplace(std::move(payload));
-}
+}*/
 
 const PropertyValue getchassisHostTransitionTimeOut(
                             const std::string& servicePath,
@@ -1174,7 +1184,8 @@ inline void handleChassisResetActionInfoPost(
                                                 timeOut = handleDifferenceTime(posixTime_1, redfishDateTimeOffset);
 
                                                setPowerTransitionTimer(asyncResp, timeOut);
-                                               createMaintenanceWindowTask(asyncResp, std::move(payload));
+                                              // createMaintenanceWindowTask(asyncResp, std::move(payload));
+					      createImmediateResetTask(asyncResp, std::move(payload));
                                                doChassisPowerCycle(asyncResp);
                                                return;
                                 }
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 3310e274..cd652a93 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -3036,7 +3036,7 @@ inline void requestRoutesSystemsCollection(App& app)
  * @param[in] asyncResp - Shared pointer for completing asynchronous call
  * @param[in] payload - Double pointer to get the task Data
  */
-void createResetMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp, task::Payload&& payload)
+/*void createResetMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp, task::Payload&& payload)
 {
         BMCWEB_LOG_DEBUG << "after do Task creartion ";
 
@@ -3103,7 +3103,7 @@ void createResetMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>&
                     task->startTimer(std::chrono::minutes(5));
                     task->populateResp(asyncResp->res);
                     task->payload.emplace(std::move(payload));
-}
+}*/
 
 /*
  * Function to create the reboot status task
@@ -3111,7 +3111,7 @@ void createResetMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>&
  * @param[in] asyncResp - Shared pointer for completing asynchronous call
  * @param[in] payload - Double pointer to get the task Data
  */
-void createSystemMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp, task::Payload&& payload)
+/*void createSystemMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp, task::Payload&& payload)
 {
         BMCWEB_LOG_DEBUG << "after do Task creartion ";
 
@@ -3179,7 +3179,7 @@ void createSystemMaintenanceWindowTask(const std::shared_ptr<bmcweb::AsyncResp>&
                     task->startTimer(std::chrono::minutes(5));
                     task->populateResp(asyncResp->res);
                     task->payload.emplace(std::move(payload));
-}
+}*/
 
 /*
  * Function to create the reboot status task
@@ -3242,7 +3242,25 @@ void SystemsImmediateResetTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncRe
                                 return !task::completed;
                             }
 
-                            if (resetType != "ForceOff" && *osState == "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
+			    if ((resetType != "ForceOff" && resetType != "GracefulShutdown" ) && *osState == "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive")
+                            {
+                                    taskData->state = "Running";
+                                            taskData->messages.emplace_back(
+                                                            messages::taskStarted(index));
+                                            taskData->extendTimer(std::chrono::minutes(5));
+                                            return !task::completed;
+                            }
+
+                            if ((resetType == "ForceOff" || resetType == "GracefulShutdown" ) && *osState == "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
+                            {
+                                    taskData->state = "Running";
+                                            taskData->messages.emplace_back(
+                                                            messages::taskStarted(index));
+                                            taskData->extendTimer(std::chrono::minutes(5));
+                                            return !task::completed;
+                            }
+
+                            if ((resetType != "ForceOff" || resetType != "GracefulShutdown" ) && *osState == "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
                             {
 
                                              taskData->messages.emplace_back(
@@ -3258,7 +3276,6 @@ void SystemsImmediateResetTask(const std::shared_ptr<bmcweb::AsyncResp>& asyncRe
                                              taskData->state = "Completed";
                                              return task::completed;
                             }
-
                             taskData->extendTimer(std::chrono::minutes(5));
                         }
                         return !task::completed;
@@ -3717,7 +3734,8 @@ inline void requestRoutesSystemActionsReset(App& app)
                                         systemResetAction(asyncResp, resetType);
                                         if(flag == true)
                                         {
-                                                createSystemMaintenanceWindowTask(asyncResp, std::move(payload));
+                                           //     createSystemMaintenanceWindowTask(asyncResp, std::move(payload));
+					           SystemsImmediateResetTask(asyncResp, std::move(payload), resetType);
                                                 return;
                                         }
                                         else
@@ -3733,7 +3751,8 @@ inline void requestRoutesSystemActionsReset(App& app)
                                         systemResetAction(asyncResp, resetType);
                                         if(flag == true)
                                         {
-                                                createResetMaintenanceWindowTask(asyncResp, std::move(payload));
+                                               // createResetMaintenanceWindowTask(asyncResp, std::move(payload));
+					        SystemsImmediateResetTask(asyncResp, std::move(payload), resetType);
                                                 return;
                                         }
                                         else
diff --git a/redfish-core/lib/task.hpp b/redfish-core/lib/task.hpp
index e3680ba6..bfd86355 100644
--- a/redfish-core/lib/task.hpp
+++ b/redfish-core/lib/task.hpp
@@ -101,7 +101,7 @@ struct TaskData : std::enable_shared_from_this<TaskData>
         matchStr(matchIn), index(idx),
         startTime(std::chrono::system_clock::to_time_t(
             std::chrono::system_clock::now())),
-        status("OK"), state("Running"), messages(nlohmann::json::array()),
+        status("OK"), state("New"), messages(nlohmann::json::array()),
         timer(crow::connections::systemBus->get_io_context())
 
     {}
-- 
2.34.1

