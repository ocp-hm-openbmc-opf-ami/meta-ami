From 497b350467b35b18cc3d920438303a25347e83be Mon Sep 17 00:00:00 2001
From: Sandeep <sandeepap@ami.com>
Date: Tue, 18 Jul 2023 15:20:42 +0530
Subject: [PATCH] ADDING propertyNotWritable Error Message for ReadOnlyProperty
 Recreation

Signed-off-by: Sandeep <sandeepap@ami.com>
---
 redfish-core/lib/account_service.hpp  |  9 ++++++++-
 redfish-core/lib/chassis.hpp          | 10 +++++++++-
 redfish-core/lib/event_service.hpp    | 11 +++++++++--
 redfish-core/lib/managers.hpp         | 10 +++++++++-
 redfish-core/lib/network_protocol.hpp | 10 +++++++++-
 redfish-core/lib/pef_service.hpp      | 10 +++++++++-
 redfish-core/lib/systems.hpp          | 10 +++++++++-
 7 files changed, 62 insertions(+), 8 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index 6b6e44ae..7ec0121e 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1454,16 +1454,23 @@ inline void handleAccountServicePatch(
     std::optional<nlohmann::json> oemObject;
     std::optional<std::string> passwordcomplexity;
     std::optional<uint8_t> RememberOldPasswordTimes;
+    std::optional<std::string> vId;
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "AccountLockoutDuration", unlockTimeout,
             "AccountLockoutThreshold", lockoutThreshold, "MaxPasswordLength",
             maxPasswordLength, "MinPasswordLength", minPasswordLength, "LDAP",
             ldapObject, "ActiveDirectory", activeDirectoryObject, "Oem",
-            oemObject))
+            oemObject, "Id", vId))
     {
         return;
     }
+    if(vId)
+    {
+         messages::propertyNotWritable(asyncResp->res, "Id");
+         asyncResp->res.result(boost::beast::http::status::bad_request);
+        return;
+    }
 
     if (minPasswordLength)
     {
diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 68d581e6..656c1820 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -529,6 +529,7 @@ inline void
     }
     std::optional<bool> locationIndicatorActive;
     std::optional<std::string> indicatorLed;
+    std::optional<std::string> vId;
 
     if (param.empty())
     {
@@ -537,10 +538,17 @@ inline void
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "LocationIndicatorActive",
-            locationIndicatorActive, "IndicatorLED", indicatorLed))
+            locationIndicatorActive, "IndicatorLED", indicatorLed, 
+	    "Id", vId))
     {
         return;
     }
+    if(vId)
+    {
+         messages::propertyNotWritable(asyncResp->res, "Id");
+         asyncResp->res.result(boost::beast::http::status::bad_request);
+        return;
+    }
 	
     asyncResp->res.result(boost::beast::http::status::no_content);
 
diff --git a/redfish-core/lib/event_service.hpp b/redfish-core/lib/event_service.hpp
index 8d2b56af..06ba6324 100644
--- a/redfish-core/lib/event_service.hpp
+++ b/redfish-core/lib/event_service.hpp
+++ b/redfish-core/lib/event_service.hpp
@@ -339,7 +339,7 @@ inline void requestRoutesEventDestinationCollection(App& app)
             return;
         }
         std::string destUrl;
-        std::string protocol;
+        std::string protocol;std::optional<std::string> vId;
         std::optional<std::string> context;
         std::optional<std::string> subscriptionType;
         std::optional<std::string> eventFormatType2;
@@ -353,7 +353,7 @@ inline void requestRoutesEventDestinationCollection(App& app)

         if (!json_util::readJsonPatch(
                 req, asyncResp->res, "Destination", destUrl, "Context", context,
-                "Protocol", protocol, "SubscriptionType", subscriptionType,
+                "Protocol", protocol, "SubscriptionType", subscriptionType, "Id", vId,
                 "EventFormatType", eventFormatType2, "HttpHeaders", headers,
                 "RegistryPrefixes", regPrefixes, "MessageIds", msgIds,
                 "DeliveryRetryPolicy", retryPolicy, "MetricReportDefinitions",
@@ -375,7 +375,12 @@ inline void requestRoutesEventDestinationCollection(App& app)
             messages::propertySizeExceeded(asyncResp->res, "Destination");
             return;
         }
-
+       if(vId)
+        {
+             messages::propertyNotWritable(asyncResp->res, "Id");
+             asyncResp->res.result(boost::beast::http::status::bad_request);
+            return;
+        }
         if (regPrefixes && msgIds)
         {
             if (!regPrefixes->empty() && !msgIds->empty())
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index 10b3bb0b..193854bb 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -2501,13 +2501,21 @@ inline void requestRoutesManager(App& app)
         std::optional<std::string> datetime;
         std::optional<std::string> timeZone;
 	std::optional<bool> locationIndicatorActive;
+	std::optional<std::string> vId;
 
         if (!json_util::readJsonPatch(req, asyncResp->res, "Oem", oem,
                                       "DateTime", datetime, "Links", links, "DateTimeLocalOffset", timeZone,
-				      "LocationIndicatorActive", locationIndicatorActive))
+				      "LocationIndicatorActive", locationIndicatorActive,
+				      "Id", vId))
         {
             return;
         }
+	if(vId)
+	{
+            messages::propertyNotWritable(asyncResp->res, "Id");
+            asyncResp->res.result(boost::beast::http::status::bad_request);
+            return;
+	}
         asyncResp->res.result(boost::beast::http::status::no_content);
         if (oem)
         {
diff --git a/redfish-core/lib/network_protocol.hpp b/redfish-core/lib/network_protocol.hpp
index be842462..5353a4fe 100644
--- a/redfish-core/lib/network_protocol.hpp
+++ b/redfish-core/lib/network_protocol.hpp
@@ -511,6 +511,7 @@ inline void handleManagersNetworkProtocolPatch(
     std::optional<bool> ntpEnabled;
     std::optional<bool> ipmiEnabled;
     std::optional<bool> sshEnabled;
+    std::optional<std::string> vId;
 
     // clang-format off
         if (!json_util::readJsonPatch(
@@ -519,10 +520,17 @@ inline void handleManagersNetworkProtocolPatch(
                 "NTP/NTPServers", ntpServerObjects,
                 "NTP/ProtocolEnabled", ntpEnabled,
                 "IPMI/ProtocolEnabled", ipmiEnabled,
-                "SSH/ProtocolEnabled", sshEnabled))
+                "SSH/ProtocolEnabled", sshEnabled,
+		"Id", vId))
         {
             return;
         }
+	if(vId)
+	{
+            messages::propertyNotWritable(asyncResp->res, "Id");
+            asyncResp->res.result(boost::beast::http::status::bad_request);
+            return;
+	}
     // clang-format on
 
     asyncResp->res.result(boost::beast::http::status::no_content);
diff --git a/redfish-core/lib/pef_service.hpp b/redfish-core/lib/pef_service.hpp
index 62744b2c..7233188a 100644
--- a/redfish-core/lib/pef_service.hpp
+++ b/redfish-core/lib/pef_service.hpp
@@ -313,13 +313,21 @@ inline void requestRoutesPefService(App& app)
                 std::string recipient;
                 std::string subject;
                 std::string mailBuf;
+		std::optional<std::string> vId;
 
                 if (!json_util::readJsonPatch(req, aResp->res, "Recipient",
                                          recipient, "Subject", subject,
-                                         "MailContent", mailBuf))
+                                         "MailContent", mailBuf,
+					 "Id", vId))
                 {
                     return;
                 }
+		if(vId)
+		{
+ 		    messages::propertyNotWritable(aResp->res, "Id");
+       		    aResp->res.result(boost::beast::http::status::bad_request);
+      		    return;
+		}
                 if (recipient.empty())
                 {
                     BMCWEB_LOG_ERROR << "SendMail: Empty recipent error";
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 89544ea7..6202fa11 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -4000,6 +4000,7 @@ inline void requestRoutesSystems(App& app)
 	std::optional<nlohmann::json> serialConsole;
 	std::optional<nlohmann::json> virtualMediaConfig;
 	std::optional<nlohmann::json> kvmConfig;
+	std::optional<std::string> vId;
 
         // clang-format off
                 if (!json_util::readJsonPatch(
@@ -4024,10 +4025,17 @@ inline void requestRoutesSystems(App& app)
                         "IdlePowerSaver/ExitDwellTimeSeconds", ipsExitTime,
 			"SerialConsole", serialConsole,
 			"VirtualMediaConfig", virtualMediaConfig,
-			"GraphicalConsole", kvmConfig))
+			"GraphicalConsole", kvmConfig,
+			"Id", vId))
                 {
                     return;
                 }
+		if(vId)
+		{
+     		    messages::propertyNotWritable(asyncResp->res, "Id");
+      		    asyncResp->res.result(boost::beast::http::status::bad_request);
+    		    return;
+		}
         // clang-format on
 
         asyncResp->res.result(boost::beast::http::status::no_content);
-- 
2.25.1

