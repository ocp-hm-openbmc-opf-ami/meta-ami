From c33da37f70d3a43b59ea593f3af5c242e98acfbd Mon Sep 17 00:00:00 2001
From: Sandeep <sandeepap@ami.com>
Date: Thu, 25 Jan 2024 10:46:45 +0530
Subject: [PATCH] ADDING propertyNotWritable Error Message for ReadOnlyProperty

Tested :

Tested on IND_ARCH :

URI :

https://{{ip}}/redfish/v1/Chassis/AC_Baseboard
https://{{ip}}/ redfish/v1/Systems/system
https://{{ip}}/redfish/v1/Managers/bmc
https://{{ip}}/redfish/v1/Managers/bmc/NetworkProtocol
https://{{ip}}/redfish/v1/AccountService
https://{{ip}}/redfish/v1/EventService
https://{{ip}}/redfish/v1/PefService

Method : PATCH

Body :

{
"Id": "UCBoard"
}

Signed-off-by: Sandeep <sandeepap@ami.com>
---
 redfish-core/lib/account_service.hpp  |  9 ++++++++-
 redfish-core/lib/chassis.hpp          |  9 ++++++++-
 redfish-core/lib/event_service.hpp    | 11 ++++++++---
 redfish-core/lib/managers.hpp         |  9 ++++++++-
 redfish-core/lib/network_protocol.hpp | 10 +++++++++-
 redfish-core/lib/systems.hpp          |  4 +++-
 6 files changed, 44 insertions(+), 8 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index e2a3704c..4a69c5e6 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1716,16 +1716,23 @@ inline void handleAccountServicePatch(
     std::optional<nlohmann::json> oemObject;
     std::optional<std::string> passwordcomplexity;
     std::optional<uint8_t> RememberOldPasswordTimes;
+    std::optional<std::string> vId;
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "AccountLockoutDuration", unlockTimeout,
             "AccountLockoutThreshold", lockoutThreshold, "MaxPasswordLength",
             maxPasswordLength, "MinPasswordLength", minPasswordLength, "LDAP",
             ldapObject, "ActiveDirectory", activeDirectoryObject, "Oem",
-            oemObject))
+            oemObject, "Id", vId))
     {
         return;
     }
+    if (vId)
+    {
+        messages::propertyNotWritable(asyncResp->res, "Id");
+        asyncResp->res.result(boost::beast::http::status::bad_request);
+        return;
+    }
 
     if (minPasswordLength)
     {
diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 83150db2..cd7feb70 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -660,6 +660,7 @@ inline void
     }
     std::optional<bool> locationIndicatorActive;
     std::optional<std::string> indicatorLed;
+    std::optional<std::string> vId;
 
     if (param.empty())
     {
@@ -668,10 +669,16 @@ inline void
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "LocationIndicatorActive",
-            locationIndicatorActive, "IndicatorLED", indicatorLed))
+            locationIndicatorActive, "IndicatorLED", indicatorLed, "Id", vId))
     {
         return;
     }
+    if (vId)
+    {
+        messages::propertyNotWritable(asyncResp->res, "Id");
+        asyncResp->res.result(boost::beast::http::status::bad_request);
+        return;
+    }
 
     asyncResp->res.result(boost::beast::http::status::no_content);
 
diff --git a/redfish-core/lib/event_service.hpp b/redfish-core/lib/event_service.hpp
index 07924e1e..10cb78e8 100644
--- a/redfish-core/lib/event_service.hpp
+++ b/redfish-core/lib/event_service.hpp
@@ -368,7 +368,7 @@ inline void requestRoutesEventDestinationCollection(App& app)
             return;
         }
         std::string destUrl;
-        std::string protocol;
+        std::string protocol; std::optional<std::string> vId;
         std::optional<std::string> context;
         std::optional<std::string> subscriptionType;
         std::optional<std::string> eventFormatType2;
@@ -384,13 +384,18 @@ inline void requestRoutesEventDestinationCollection(App& app)
                 req, asyncResp->res, "Destination", destUrl, "Context", context,
                 "Protocol", protocol, "SubscriptionType", subscriptionType,
                 "EventFormatType", eventFormatType2, "HttpHeaders", headers,
-                "RegistryPrefixes", regPrefixes, "MessageIds", msgIds,
+                "RegistryPrefixes", regPrefixes, "MessageIds", msgIds, "Id", vId,
                 "DeliveryRetryPolicy", retryPolicy, "MetricReportDefinitions",
                 mrdJsonArray, "ResourceTypes", resTypes, "Oem", oemObj))
         {
             return;
         }
-
+	if (vId)
+     	{
+           messages::propertyNotWritable(asyncResp->res, "Id");
+           asyncResp->res.result(boost::beast::http::status::bad_request);
+           return;
+     	}
         if (protocol == "Oem")
         {
             // Handle to support Kafka streaming support
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index e96b9467..0d58b926 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -2252,14 +2252,21 @@ inline void requestRoutesManager(App& app)
         std::optional<std::string> datetime;
         std::optional<bool> locationIndicatorActive;
         std::optional<std::string> timeZone;
+	std::optional<std::string> vId;
 
         if (!json_util::readJsonPatch(
                 req, asyncResp->res, "Oem", oem, "DateTime", datetime, "Links",
                 links, "LocationIndicatorActive", locationIndicatorActive,
-                "DateTimeLocalOffset", timeZone))
+                "DateTimeLocalOffset", timeZone, "Id", vId))
         {
             return;
         }
+	if (vId)
+     	{
+           messages::propertyNotWritable(asyncResp->res, "Id");
+           asyncResp->res.result(boost::beast::http::status::bad_request);
+           return;
+     	}
         asyncResp->res.result(boost::beast::http::status::no_content);
         if (oem)
         {
diff --git a/redfish-core/lib/network_protocol.hpp b/redfish-core/lib/network_protocol.hpp
index aefaca89..851a3ace 100644
--- a/redfish-core/lib/network_protocol.hpp
+++ b/redfish-core/lib/network_protocol.hpp
@@ -538,6 +538,7 @@ inline void handleManagersNetworkProtocolPatch(
     std::optional<bool> ntpEnabled;
     std::optional<bool> ipmiEnabled;
     std::optional<bool> sshEnabled;
+    std::optional<std::string> vId;
 
     // clang-format off
         if (!json_util::readJsonPatch(
@@ -546,10 +547,17 @@ inline void handleManagersNetworkProtocolPatch(
                 "NTP/NTPServers", ntpServerObjects,
                 "NTP/ProtocolEnabled", ntpEnabled,
                 "IPMI/ProtocolEnabled", ipmiEnabled,
-                "SSH/ProtocolEnabled", sshEnabled))
+                "SSH/ProtocolEnabled", sshEnabled,
+		"Id", vId))
         {
             return;
         }
+	if (vId)
+     	{
+          messages::propertyNotWritable(asyncResp->res, "Id");
+          asyncResp->res.result(boost::beast::http::status::bad_request);
+          return;
+     	}
     // clang-format on
 
     asyncResp->res.result(boost::beast::http::status::no_content);
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 2de26113..ea5a98ea 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -3600,6 +3600,7 @@ inline void handleComputerSystemPatch(
     std::optional<nlohmann::json> serialConsole;
     std::optional<nlohmann::json> virtualMediaConfig;
     std::optional<nlohmann::json> kvmConfig;
+    std::optional<std::string> vId;
 
     // clang-format off
                 if (!json_util::readJsonPatch(
@@ -3625,7 +3626,8 @@ inline void handleComputerSystemPatch(
                         "IdlePowerSaver/ExitDwellTimeSeconds", ipsExitTime,
                         "SerialConsole", serialConsole,
                         "VirtualMediaConfig", virtualMediaConfig,
-                        "GraphicalConsole", kvmConfig))
+                        "GraphicalConsole", kvmConfig,
+			"Id", vId))
                 {
                     return;
                 }
-- 
2.34.1

