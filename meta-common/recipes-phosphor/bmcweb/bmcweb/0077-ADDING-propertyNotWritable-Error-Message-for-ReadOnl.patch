From 99bc1e26be5b19755d296f8675e8e6c66281563a Mon Sep 17 00:00:00 2001
From: Sandeep <sandeepap@ami.com>
Date: Mon, 16 Oct 2023 16:32:57 +0530
Subject: [PATCH] ADDING propertyNotWritable Error Message for ReadOnlyProperty

Tested :

Tested on IND_ARCH :

URI :

https://{{ip}}/redfish/v1/Chassis/AC_Baseboard
https://{{ip}}/ redfish/v1/Systems/system
https://{{ip}}/redfish/v1/Managers/bmc
https://{{ip}}/redfish/v1/Managers/bmc/NetworkProtocol
https://{{ip}}/redfish/v1/AccountService
https://{{ip}}/redfish/v1/EventService
https://{{ip}}/redfish/v1/PefService

Method : PATCH

Body :

{
"Id": "UCBoard"
}

Signed-off-by: Sandeep <sandeepap@ami.com>
---
 redfish-core/lib/account_service.hpp  | 16 +++++++++++----
 redfish-core/lib/chassis.hpp          | 28 ++++++++++++++++++---------
 redfish-core/lib/event_service.hpp    | 11 +++++++++--
 redfish-core/lib/managers.hpp         | 15 +++++++++++---
 redfish-core/lib/network_protocol.hpp | 11 ++++++++++-
 redfish-core/lib/systems.hpp          | 13 +++++++++++--
 6 files changed, 73 insertions(+), 21 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index 327991fd..d8b8ceb6 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -377,7 +377,8 @@ inline void handleRoleMapPatch(
                     if (ec)
                     {
                         BMCWEB_LOG_ERROR("DBUS response error: {}", ec);
-                        messages::propertyValueFormatError(asyncResp->res,"Missing","Invalid");
+                        messages::propertyValueFormatError(
+                            asyncResp->res, "Missing", "Invalid");
                         return;
                     }
                     asyncResp->res.jsonValue[serverType]["RemoteRoleMapping"]
@@ -1381,8 +1382,8 @@ inline void updateUserProperties(
         }
         if ((username == "root") && roleId)
         {
-            BMCWEB_LOG_ERROR
-                ("Not able to change privilage level for root user");
+            BMCWEB_LOG_ERROR(
+                "Not able to change privilage level for root user");
             const std::string& arg = "redfish/v1/AccountService/Accounts/" +
                                      username;
             messages::accessDenied(asyncResp->res, boost::urls::format(arg));
@@ -1615,14 +1616,21 @@ inline void handleAccountServicePatch(
     std::optional<nlohmann::json> oemObject;
     std::optional<std::string> passwordcomplexity;
     std::optional<uint8_t> RememberOldPasswordTimes;
+    std::optional<std::string> vId;
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "AccountLockoutDuration", unlockTimeout,
             "AccountLockoutThreshold", lockoutThreshold, "MaxPasswordLength",
             maxPasswordLength, "MinPasswordLength", minPasswordLength, "LDAP",
             ldapObject, "ActiveDirectory", activeDirectoryObject, "Oem",
-            oemObject))
+            oemObject, "Id", vId))
+    {
+        return;
+    }
+    if (vId)
     {
+        messages::propertyNotWritable(asyncResp->res, "Id");
+        asyncResp->res.result(boost::beast::http::status::bad_request);
         return;
     }
 
diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 788e0258..3cffcf96 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -597,14 +597,17 @@ inline void
                     boost::urls::format(
                         "/redfish/v1/Chassis/{}/EnvironmentMetrics", chassisId);
 #endif
-		//FRU Device
-                asyncResp->res.jsonValue["Oem"]["AMI"]["FRU"]["@odata.id"]=  boost::urls::format("/redfish/v1/Chassis/{}/FRU",chassisId);
-                asyncResp->res.jsonValue["Oem"]["AMI"]["@odata.type"]= "OemAMIChassis.v1_0_0.OemAMIChassis";
-                asyncResp->res.jsonValue["Oem"]["AMI"]["@odata.id"]=
-                            boost::urls::format("/redfish/v1/Chassis/{}#/Oem/AMI",
-                                               chassisId);
-
-		// SensorCollection
+                // FRU Device
+                asyncResp->res.jsonValue["Oem"]["AMI"]["FRU"]["@odata.id"] =
+                    boost::urls::format("/redfish/v1/Chassis/{}/FRU",
+                                        chassisId);
+                asyncResp->res.jsonValue["Oem"]["AMI"]["@odata.type"] =
+                    "OemAMIChassis.v1_0_0.OemAMIChassis";
+                asyncResp->res.jsonValue["Oem"]["AMI"]["@odata.id"] =
+                    boost::urls::format("/redfish/v1/Chassis/{}#/Oem/AMI",
+                                        chassisId);
+
+                // SensorCollection
                 asyncResp->res.jsonValue["Sensors"]["@odata.id"] =
                     boost::urls::format("/redfish/v1/Chassis/{}/Sensors",
                                         chassisId);
@@ -661,6 +664,7 @@ inline void
     }
     std::optional<bool> locationIndicatorActive;
     std::optional<std::string> indicatorLed;
+    std::optional<std::string> vId;
 
     if (param.empty())
     {
@@ -669,8 +673,14 @@ inline void
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "LocationIndicatorActive",
-            locationIndicatorActive, "IndicatorLED", indicatorLed))
+            locationIndicatorActive, "IndicatorLED", indicatorLed, "Id", vId))
+    {
+        return;
+    }
+    if (vId)
     {
+        messages::propertyNotWritable(asyncResp->res, "Id");
+        asyncResp->res.result(boost::beast::http::status::bad_request);
         return;
     }
 
diff --git a/redfish-core/lib/event_service.hpp b/redfish-core/lib/event_service.hpp
index b3282be3..d1b88941 100644
--- a/redfish-core/lib/event_service.hpp
+++ b/redfish-core/lib/event_service.hpp
@@ -367,6 +367,7 @@ inline void requestRoutesEventDestinationCollection(App& app)
         }
         std::string destUrl;
         std::string protocol;
+        std::optional<std::string> vId;
         std::optional<std::string> context;
         std::optional<std::string> subscriptionType;
         std::optional<std::string> eventFormatType2;
@@ -381,13 +382,19 @@ inline void requestRoutesEventDestinationCollection(App& app)
         if (!json_util::readJsonPatch(
                 req, asyncResp->res, "Destination", destUrl, "Context", context,
                 "Protocol", protocol, "SubscriptionType", subscriptionType,
-                "EventFormatType", eventFormatType2, "HttpHeaders", headers,
-                "RegistryPrefixes", regPrefixes, "MessageIds", msgIds,
+                "Id", vId, "EventFormatType", eventFormatType2, "HttpHeaders",
+                headers, "RegistryPrefixes", regPrefixes, "MessageIds", msgIds,
                 "DeliveryRetryPolicy", retryPolicy, "MetricReportDefinitions",
                 mrdJsonArray, "ResourceTypes", resTypes, "Oem", oemObj))
         {
             return;
         }
+        if (vId)
+        {
+            messages::propertyNotWritable(asyncResp->res, "Id");
+            asyncResp->res.result(boost::beast::http::status::bad_request);
+            return;
+        }
 
         if (protocol == "Oem")
         {
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index 00da6550..3c5972a2 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -2232,13 +2232,22 @@ inline void requestRoutesManager(App& app)
         std::optional<nlohmann::json> links;
         std::optional<std::string> datetime;
         std::optional<bool> locationIndicatorActive;
+        std::optional<std::string> vId;
 
-        if (!json_util::readJsonPatch(
-                req, asyncResp->res, "Oem", oem, "DateTime", datetime, "Links",
-                links, "LocationIndicatorActive", locationIndicatorActive))
+        if (!json_util::readJsonPatch(req, asyncResp->res, "Oem", oem,
+                                      "DateTime", datetime, "Links", links,
+                                      "LocationIndicatorActive",
+                                      locationIndicatorActive, "Id", vId))
         {
             return;
         }
+        if (vId)
+        {
+            messages::propertyNotWritable(asyncResp->res, "Id");
+            asyncResp->res.result(boost::beast::http::status::bad_request);
+            return;
+        }
+
         asyncResp->res.result(boost::beast::http::status::no_content);
         if (oem)
         {
diff --git a/redfish-core/lib/network_protocol.hpp b/redfish-core/lib/network_protocol.hpp
index 0649f108..de51166b 100644
--- a/redfish-core/lib/network_protocol.hpp
+++ b/redfish-core/lib/network_protocol.hpp
@@ -523,6 +523,7 @@ inline void handleManagersNetworkProtocolPatch(
     std::optional<bool> ntpEnabled;
     std::optional<bool> ipmiEnabled;
     std::optional<bool> sshEnabled;
+    std::optional<std::string> vId;
 
     // clang-format off
         if (!json_util::readJsonPatch(
@@ -531,10 +532,18 @@ inline void handleManagersNetworkProtocolPatch(
                 "NTP/NTPServers", ntpServerObjects,
                 "NTP/ProtocolEnabled", ntpEnabled,
                 "IPMI/ProtocolEnabled", ipmiEnabled,
-                "SSH/ProtocolEnabled", sshEnabled))
+                "SSH/ProtocolEnabled", sshEnabled,
+		 "Id", vId))
         {
             return;
         }
+	if(vId)
+       {
+            messages::propertyNotWritable(asyncResp->res, "Id");
+            asyncResp->res.result(boost::beast::http::status::bad_request);
+            return;
+       }
+
     // clang-format on
 
     asyncResp->res.result(boost::beast::http::status::no_content);
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index f578b034..4928eec8 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -1654,7 +1654,8 @@ inline void setTrustedModuleRequiredToBoot(
     }
     else
     {
-        messages::propertyValueNotInList(asyncResp->res, bootTrustedModuleRequired,
+        messages::propertyValueNotInList(asyncResp->res,
+                                         bootTrustedModuleRequired,
                                          "TrustedModuleRequiredToBoot");
         return;
     }
@@ -3609,6 +3610,7 @@ inline void handleComputerSystemPatch(
     std::optional<nlohmann::json> serialConsole;
     std::optional<nlohmann::json> virtualMediaConfig;
     std::optional<nlohmann::json> kvmConfig;
+    std::optional<std::string> vId;
 
     // clang-format off
                 if (!json_util::readJsonPatch(
@@ -3634,10 +3636,17 @@ inline void handleComputerSystemPatch(
                         "IdlePowerSaver/ExitDwellTimeSeconds", ipsExitTime,
                         "SerialConsole", serialConsole,
                         "VirtualMediaConfig", virtualMediaConfig,
-                        "GraphicalConsole", kvmConfig))
+                        "GraphicalConsole", kvmConfig,
+			"Id", vId))
                 {
                     return;
                 }
+		 if(vId)
+               {
+                   messages::propertyNotWritable(asyncResp->res, "Id");
+                   asyncResp->res.result(boost::beast::http::status::bad_request);
+                   return;
+    		}
     // clang-format on
 
     asyncResp->res.result(boost::beast::http::status::no_content);
-- 
2.25.1

