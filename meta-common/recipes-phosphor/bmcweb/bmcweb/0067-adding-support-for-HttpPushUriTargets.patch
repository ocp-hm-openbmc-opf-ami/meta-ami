From 2258555f0ebac8297ec36c308b40db6d93a3a163 Mon Sep 17 00:00:00 2001
From: Hemanth Kumar Mudunuri  <hemanthkumarm@ami.com>
Date: Mon, 16 Oct 2023 15:49:52 +0530
Subject: [PATCH 67/67] Adding support for HttpPushUriTargets
MR https://git.ami.com/core/ami-bmc/one-tree/core/meta-ami/-/merge_requests/437/

Signed-off-by: Hemanth Kumar Mudunuri <hemanthkumarm@ami.com>
---
 redfish-core/lib/update_service.hpp | 152 ++++++++++++++--------------
 1 file changed, 77 insertions(+), 75 deletions(-)

diff --git a/redfish-core/lib/update_service.hpp b/redfish-core/lib/update_service.hpp
index 51a357b0..3830fb02 100644
--- a/redfish-core/lib/update_service.hpp
+++ b/redfish-core/lib/update_service.hpp
@@ -79,99 +79,101 @@ inline static void activateImage(const std::string& objPath,
 {
     BMCWEB_LOG_DEBUG("Activate image for {} {}", objPath, service);
     // If targets is empty, it will apply to the active.
-    if (imgUriTargets.size() == 0)
+    if (!imgUriTargets.empty())
     {
+        // TODO: Now we support only one target becuase software-manager
+        // code support one activation per object. It will be enhanced
+        // to multiple targets for single image in future. For now,
+        // consider first target alone.
         crow::connections::systemBus->async_method_call(
-            [](const boost::system::error_code errorCode) {
-            if (errorCode)
+            [objPath, service, imgTarget{imgUriTargets[0]}](
+                const boost::system::error_code ec,
+                const dbus::utility::MapperGetSubTreeResponse& subtree) {
+            if (ec || !subtree.size())
             {
-                BMCWEB_LOG_DEBUG("RequestedActivation failed: error_code = {}",
-                                 errorCode);
-                BMCWEB_LOG_DEBUG("error msg = {}", errorCode.message());
-            }
-        },
-            service, objPath, "org.freedesktop.DBus.Properties", "Set",
-            activationIntf, reqActivationPropName,
-            std::variant<std::string>(reqActivationsActive));
-        return;
-    }
-
-    // TODO: Now we support only one target becuase software-manager
-    // code support one activation per object. It will be enhanced
-    // to multiple targets for single image in future. For now,
-    // consider first target alone.
-    crow::connections::systemBus->async_method_call(
-        [objPath, service, imgTarget{imgUriTargets[0]}](
-            const boost::system::error_code ec,
-            const dbus::utility::MapperGetSubTreeResponse& subtree) {
-        if (ec || !subtree.size())
-        {
-            return;
-        }
-
-        for (const auto& [invObjPath, invDict] : subtree)
-        {
-            std::size_t idPos = invObjPath.rfind("/");
-            if ((idPos == std::string::npos) ||
-                ((idPos + 1) >= invObjPath.size()))
-            {
-                BMCWEB_LOG_DEBUG("Can't parse firmware ID!!");
                 return;
             }
-            std::string swId = invObjPath.substr(idPos + 1);
-
-            if (swId != imgTarget)
-            {
-                continue;
-            }
 
-            if (invDict.size() < 1)
+            for (const auto& [invObjPath, invDict] : subtree)
             {
-                continue;
-            }
-            BMCWEB_LOG_DEBUG("Image target matched with object {}", invObjPath);
-            crow::connections::systemBus->async_method_call(
-                [objPath, service](const boost::system::error_code ec2,
-                                   const std::variant<std::string> value) {
-                if (ec2)
+                std::size_t idPos = invObjPath.rfind("/");
+                if ((idPos == std::string::npos) ||
+                    ((idPos + 1) >= invObjPath.size()))
                 {
-                    BMCWEB_LOG_DEBUG("Error in querying activation value");
-                    // not all fwtypes are updateable,
-                    // this is ok
+                    BMCWEB_LOG_DEBUG("Can't parse firmware ID!!");
                     return;
                 }
-                std::string activationValue = std::get<std::string>(value);
-                BMCWEB_LOG_DEBUG("Activation Value: {}", activationValue);
-                std::string reqActivation = reqActivationsActive;
-                if (activationValue == activationsStandBySpare)
+                std::string swId = invObjPath.substr(idPos + 1);
+
+                if (swId != imgTarget)
+                {
+                    continue;
+                }
+
+                if (invDict.size() < 1)
                 {
-                    reqActivation = reqActivationsStandBySpare;
+                    continue;
                 }
-                BMCWEB_LOG_DEBUG(
-                    "Setting RequestedActivation value as {} for {} {}",
-                    reqActivation, service, objPath);
+                BMCWEB_LOG_DEBUG("Image target matched with object {}",
+                                 invObjPath);
                 crow::connections::systemBus->async_method_call(
-                    [](const boost::system::error_code ec3) {
-                    if (ec3)
+                    [invObjPath,
+                     service](const boost::system::error_code ec2,
+                              const std::variant<std::string> value) {
+                    if (ec2)
                     {
-                        BMCWEB_LOG_DEBUG("RequestedActivation failed: ec = {}",
-                                         ec3);
+                        BMCWEB_LOG_DEBUG("Error in querying activation value");
+                        // not all fwtypes are updateable,
+                        // this is ok
+                        return;
                     }
-                    return;
+                    std::string activationValue = std::get<std::string>(value);
+                    BMCWEB_LOG_DEBUG("Activation Value: {}", activationValue);
+                    std::string reqActivation = reqActivationsActive;
+                    if (activationValue == activationsStandBySpare)
+                    {
+                        reqActivation = reqActivationsStandBySpare;
+                    }
+                    BMCWEB_LOG_DEBUG(
+                        "Setting RequestedActivation value as {} for {} {}",
+                        reqActivation, service, invObjPath);
+                    crow::connections::systemBus->async_method_call(
+                        [](const boost::system::error_code ec3) {
+                        if (ec3)
+                        {
+                            BMCWEB_LOG_DEBUG(
+                                "RequestedActivation failed: ec = {}", ec3);
+                        }
+                        return;
+                    },
+                        service, invObjPath, "org.freedesktop.DBus.Properties",
+                        "Set", activationIntf, reqActivationPropName,
+                        std::variant<std::string>(reqActivation));
                 },
-                    service, objPath, "org.freedesktop.DBus.Properties", "Set",
-                    activationIntf, reqActivationPropName,
-                    std::variant<std::string>(reqActivation));
-            },
-                invDict[0].first, "/xyz/openbmc_project/software/" + imgTarget,
-                "org.freedesktop.DBus.Properties", "Get", activationIntf,
-                "Activation");
+                    invDict[0].first,
+                    "/xyz/openbmc_project/software/" + imgTarget,
+                    "org.freedesktop.DBus.Properties", "Get", activationIntf,
+                    "Activation");
+            }
+        },
+            "xyz.openbmc_project.ObjectMapper",
+            "/xyz/openbmc_project/object_mapper",
+            "xyz.openbmc_project.ObjectMapper", "GetSubTree", "/",
+            static_cast<int32_t>(0), std::array<const char*, 1>{versionIntf});
+    }
+    crow::connections::systemBus->async_method_call(
+        [](const boost::system::error_code errorCode) {
+        if (errorCode)
+        {
+            BMCWEB_LOG_DEBUG("RequestedActivation failed: error_code = {}",
+                             errorCode);
+            BMCWEB_LOG_DEBUG("error msg = {}", errorCode.message());
         }
     },
-        "xyz.openbmc_project.ObjectMapper",
-        "/xyz/openbmc_project/object_mapper",
-        "xyz.openbmc_project.ObjectMapper", "GetSubTree", "/",
-        static_cast<int32_t>(0), std::array<const char*, 1>{versionIntf});
+        service, objPath, "org.freedesktop.DBus.Properties", "Set",
+        activationIntf, reqActivationPropName,
+        std::variant<std::string>(reqActivationsActive));
+    return;
 }
 
 // Note that asyncResp can be either a valid pointer or nullptr. If nullptr
-- 
2.34.1

