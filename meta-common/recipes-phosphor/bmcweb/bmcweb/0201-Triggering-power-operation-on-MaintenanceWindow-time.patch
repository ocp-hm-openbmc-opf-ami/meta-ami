From e39cfa7e21fe6f82435122b05e9aec60ee09c4e1 Mon Sep 17 00:00:00 2001
From: ramadevip <ramadevip@ami.com>
Date: Thu, 8 Feb 2024 13:49:09 +0530
Subject: [PATCH] Triggering power operation on MaintenanceWindow time

Signed-off-by: ramadevip <ramadevip@ami.com>
---
 redfish-core/lib/chassis.hpp  | 23 ++++++++++++-----------
 redfish-core/lib/managers.hpp |  2 +-
 redfish-core/lib/systems.hpp  | 34 ++++++++++++++++++----------------
 3 files changed, 31 insertions(+), 28 deletions(-)

diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 94a41e75..4337e5de 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -63,7 +63,7 @@ constexpr const char* mctpServiceName = "xyz.openbmc_project.NICMgt";
 using PropertiesType =
     boost::container::flat_map<std::string, dbus::utility::DbusVariantType>;
 
-using PropertyValue = std::variant<uint8_t, uint16_t, std::string,
+using PropertyValue = std::variant<uint8_t, uint16_t, uint64_t, std::string,
                                    std::vector<std::string>, bool>;
 
 /**
@@ -858,7 +858,7 @@ inline void handleChassisPowerCycleError(const boost::system::error_code& ec,
 
 inline void
     setPowerTransitionTimer(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-                            const uint16_t chassisHostTransitionTimeOut)
+                            const uint64_t chassisHostTransitionTimeOut)
 {
     BMCWEB_LOG_ERROR("setHostTransitionTimer");
     crow::connections::systemBus->async_method_call(
@@ -1175,18 +1175,18 @@ void createMaintenanceWindowTask(
             servicePath, objectName, interfacePath, property_Name);
 
         auto reqchassisHostTransitionTimeOut =
-            std::get<uint16_t>(timeOut_value);
+            std::get<uint64_t>(timeOut_value);
 
         if (iface == "xyz.openbmc_project.State.OperatingSystem.Status")
         {
-            const uint16_t* timeOutValue = nullptr;
+            const uint64_t* timeOutValue = nullptr;
             const std::string* osState = nullptr;
 
             for (const auto& property : values)
             {
                 if (property.first == "ChassisHostTransitionTimeOut")
                 {
-                    timeOutValue = std::get_if<uint16_t>(&property.second);
+                    timeOutValue = std::get_if<uint64_t>(&property.second);
 
                     if (timeOutValue == nullptr)
                     {
@@ -1215,7 +1215,8 @@ void createMaintenanceWindowTask(
                     "xyz.openbmc_project.Common.Task.OperationStatus.New");
                 taskData->state = "Pending";
                 taskData->messages.emplace_back(messages::taskPaused(index));
-                taskData->extendTimer(std::chrono::minutes(10));
+                taskData->extendTimer(
+                    std::chrono::seconds(reqchassisHostTransitionTimeOut));
                 return !task::completed;
             }
             if (reqchassisHostTransitionTimeOut == 0 && osState != nullptr)
@@ -1260,10 +1261,10 @@ void createMaintenanceWindowTask(
  * @param[in] posixTime_1 - MaintenanceWindowStarTime converted to posixtime
  * @param[in] redfishDateTimeOffset - Current BMC Timezone
  */
-inline uint16_t handleDifferenceTime(boost::posix_time::ptime posixTime_1,
+inline uint64_t handleDifferenceTime(boost::posix_time::ptime posixTime_1,
                                      std::string& redfishDateTimeOffset)
 {
-    uint16_t durSecs;
+    uint64_t durSecs;
 
     std::stringstream stream2(redfishDateTimeOffset);
     boost::posix_time::ptime posixTime_2;
@@ -1280,7 +1281,7 @@ inline uint16_t handleDifferenceTime(boost::posix_time::ptime posixTime_1,
     }
 
     boost::posix_time::time_duration dur = posixTime_1 - posixTime_2;
-    durSecs = static_cast<uint16_t>(dur.total_seconds());
+    durSecs = static_cast<uint64_t>(dur.total_seconds());
     return durSecs;
 }
 
@@ -1317,7 +1318,7 @@ inline void handleChassisResetActionInfoPost(
             std::optional<std::string> maintenanceWindowStartTime;
             std::string startTime;
 
-            uint16_t timeOut = 0;
+            uint64_t timeOut = 0;
 
             // Current BMC Timezone
             std::string redfishDateTimeOffset =
@@ -1343,7 +1344,7 @@ inline void handleChassisResetActionInfoPost(
             auto timeOut_value = getchassisHostTransitionTimeOut(
                 servicePath, objectName, interfacePath, property_Name);
             auto reqchassisHostTransitionTimeOut =
-                std::get<uint16_t>(timeOut_value);
+                std::get<uint64_t>(timeOut_value);
 
             if (reqHostState !=
                 "xyz.openbmc_project.State.Host.HostState.Running")
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index 0a727953..eaa4042c 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -51,7 +51,7 @@ namespace redfish
 constexpr const char* DBUS_PROPERTY_IFACE = "org.freedesktop.DBus.Properties";
 
 using namespace std;
-using PropertyValue = std::variant<uint8_t, uint16_t, std::string,
+using PropertyValue = std::variant<uint8_t, uint16_t, uint64_t, std::string,
                                    std::vector<std::string>, bool>;
 /**
  * Function to create the reboot status task
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 2297a44b..776d6328 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -3287,18 +3287,18 @@ void createResetMaintenanceWindowTask(
 
         auto host_Value = getHostTransitionTimeOut(processName, objectPath,
                                                    interfaceName, prop_Name);
-        auto requestedHostTransition = std::get<uint16_t>(host_Value);
+        auto requestedHostTransition = std::get<uint64_t>(host_Value);
 
         if (iface == "xyz.openbmc_project.State.OperatingSystem.Status")
         {
-            const uint16_t* timeOutValue = nullptr;
+            const uint64_t* timeOutValue = nullptr;
             const std::string* osState = nullptr;
 
             for (const auto& property : values)
             {
                 if (property.first == "HostTransitionTimeOut")
                 {
-                    timeOutValue = std::get_if<uint16_t>(&property.second);
+                    timeOutValue = std::get_if<uint64_t>(&property.second);
 
                     if (timeOutValue == nullptr)
                     {
@@ -3327,7 +3327,8 @@ void createResetMaintenanceWindowTask(
                     "xyz.openbmc_project.Common.Task.OperationStatus.New");
                 taskData->state = "Pending";
                 taskData->messages.emplace_back(messages::taskPaused(index));
-                taskData->extendTimer(std::chrono::minutes(10));
+                taskData->extendTimer(
+                    std::chrono::seconds(requestedHostTransition));
                 return !task::completed;
             }
 
@@ -3444,18 +3445,18 @@ void createSystemMaintenanceWindowTask(
 
         auto chassis_Value = getPowerTransitionTimeOut(processName, objectPath,
                                                        interfaceName, propName);
-        auto requestedPowerTransition = std::get<uint16_t>(chassis_Value);
+        auto requestedPowerTransition = std::get<uint64_t>(chassis_Value);
 
         if (iface == "xyz.openbmc_project.State.OperatingSystem.Status")
         {
-            const uint16_t* timeOutValue = nullptr;
+            const uint64_t* timeOutValue = nullptr;
             const std::string* osState = nullptr;
 
             for (const auto& property : values)
             {
                 if (property.first == "PowerTransitionTimeOut")
                 {
-                    timeOutValue = std::get_if<uint16_t>(&property.second);
+                    timeOutValue = std::get_if<uint64_t>(&property.second);
 
                     if (timeOutValue == nullptr)
                     {
@@ -3484,7 +3485,8 @@ void createSystemMaintenanceWindowTask(
                     "xyz.openbmc_project.Common.Task.OperationStatus.New");
                 taskData->state = "Pending";
                 taskData->messages.emplace_back(messages::taskPaused(index));
-                taskData->extendTimer(std::chrono::minutes(10));
+                taskData->extendTimer(
+                    std::chrono::seconds(requestedPowerTransition));
                 return !task::completed;
             }
 
@@ -3647,12 +3649,12 @@ void SystemsImmediateResetTask(
  * @param[in] posixTime_1 - MaintenanceWindowStarTime converted to posixtime
  * @param[in] redfishDateTimeOffset - Current BMC Timezone
  */
-inline uint16_t
+inline uint64_t
     handleSystemsDifferenceTime(boost::posix_time::ptime posixTime_1,
                                 std::string& redfishDateTimeOffset)
 {
     BMCWEB_LOG_ERROR("handleDifferenceTime");
-    uint16_t durSecs;
+    uint64_t durSecs;
 
     std::stringstream stream2(redfishDateTimeOffset);
     boost::posix_time::ptime posixTime_2;
@@ -3669,13 +3671,13 @@ inline uint16_t
     }
 
     boost::posix_time::time_duration dur = posixTime_1 - posixTime_2;
-    durSecs = static_cast<uint16_t>(dur.total_seconds());
+    durSecs = static_cast<uint64_t>(dur.total_seconds());
     return durSecs;
 }
 
 inline void setSystemsPowerTransitionTimer(
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-    const uint16_t powerTransitionTimeOut)
+    const uint64_t powerTransitionTimeOut)
 {
     BMCWEB_LOG_ERROR("setPowerTransitionTimer");
     crow::connections::systemBus->async_method_call(
@@ -3694,7 +3696,7 @@ inline void setSystemsPowerTransitionTimer(
 
 inline void
     setHostTransitionTimer(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-                           const uint16_t hostTransitionTimeOut)
+                           const uint64_t hostTransitionTimeOut)
 {
     BMCWEB_LOG_ERROR("setHostTransitionTimer");
     crow::connections::systemBus->async_method_call(
@@ -3888,11 +3890,11 @@ inline void handleComputerSystemResetActionPost(
     auto host_Value = getHostTransitionTimeOut(processName, objectPath,
                                                interfaceName, prop_Name);
 
-    auto requestedHostTransition = std::get<uint16_t>(host_Value);
+    auto requestedHostTransition = std::get<uint64_t>(host_Value);
 
     auto chassis_Value = getPowerTransitionTimeOut(processName, objectPath,
                                                    interfaceName, propName);
-    auto requestedPowerTransition = std::get<uint16_t>(chassis_Value);
+    auto requestedPowerTransition = std::get<uint64_t>(chassis_Value);
 
     auto value = getHostState(process_Name, object_Path, interface_Name,
                               propertyName);
@@ -3994,7 +3996,7 @@ inline void handleComputerSystemResetActionPost(
             }
 
             // Difference of BMCTime and MaintenanceWindowStartTime
-            uint16_t timeOut =
+            uint64_t timeOut =
                 handleSystemsDifferenceTime(posixTime_1, redfishDateTimeOffset);
 
             if (resetType == "ForceOff")
-- 
2.25.1

