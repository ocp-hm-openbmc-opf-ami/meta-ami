From 92d48b656ed42e0940990ef957ebbb0968be6796 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Wed, 24 Jan 2024 18:05:28 +0530
Subject: [PATCH 3/3] Add KVM VM status in user session info

Test:

If KVM is not open

https://x.x.x/kvm/kvmActiveStatus

{
"kvmActiveStatus": 0
}

IF KVM is open

https://x.x.x/kvm/kvmActiveStatus

{
"kvmActiveStatus": 1
}

Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 http/websocket.hpp                            |  2 +
 include/kvm_websocket.hpp                     | 28 ++++++++++--
 include/nbd_proxy.hpp                         | 13 +++++-
 include/sessions.hpp                          |  7 ++-
 redfish-core/lib/redfish_sessions.hpp         | 12 +++++
 static/redfish/v1/$metadata/index.xml         |  4 ++
 .../v1/JsonSchemas/AMIWebSession/index.json   | 44 +++++++++++++++++++
 static/redfish/v1/schema/AMIWebSession_v1.xml | 44 +++++++++++++++++++
 8 files changed, 149 insertions(+), 5 deletions(-)
 create mode 100644 static/redfish/v1/JsonSchemas/AMIWebSession/index.json
 create mode 100644 static/redfish/v1/schema/AMIWebSession_v1.xml
diff --git a/http/websocket.hpp b/http/websocket.hpp
index 4f5b3c18..b5ab46db 100644
--- a/http/websocket.hpp
+++ b/http/websocket.hpp
@@ -27,8 +27,10 @@ enum class MessageType
 struct Connection : std::enable_shared_from_this<Connection>
 {
   public:
-    Connection() = default;
-
+    explicit Connection(
+        const std::shared_ptr<persistent_data::UserSession>& sessionIn) :
+        session(sessionIn)
+    {}
     Connection(const Connection&) = delete;
     Connection(Connection&&) = delete;
     Connection& operator=(const Connection&) = delete;
@@ -46,6 +48,7 @@ struct Connection : std::enable_shared_from_this<Connection>
     virtual boost::asio::io_context& getIoContext() = 0;
     virtual ~Connection() = default;
     virtual boost::urls::url_view url() = 0;
+    std::shared_ptr<persistent_data::UserSession> session;
 };

 template <typename Adaptor>
@@ -66,8 +69,8 @@ class ConnectionImpl : public Connection
             messageExHandlerIn,
         std::function<void(Connection&, const std::string&)> closeHandlerIn,
         std::function<void(Connection&)> errorHandlerIn) :
-        uri(urlViewIn),
-        ws(std::move(adaptorIn)), inBuffer(inString, 131088),
+        Connection(sessionIn),
+        uri(urlViewIn), ws(std::move(adaptorIn)), inBuffer(inString, 131088),
         openHandler(std::move(openHandlerIn)),
         messageHandler(std::move(messageHandlerIn)),
         messageExHandler(std::move(messageExHandlerIn)),
#diff --git a/http/websocket.hpp b/http/websocket.hpp
#index 4f5b3c18..edbafbc3 100644
#--- a/http/websocket.hpp
#+++ b/http/websocket.hpp
#@@ -28,6 +28,7 @@ struct Connection : std::enable_shared_from_this<Connection>
# {
#   public:
#     Connection() = default;
#+    explicit Connection(const crow::Request& reqIn) : session(reqIn.session) {}
# 
#     Connection(const Connection&) = delete;
#     Connection(Connection&&) = delete;
#@@ -46,6 +47,7 @@ struct Connection : std::enable_shared_from_this<Connection>
#     virtual boost::asio::io_context& getIoContext() = 0;
#     virtual ~Connection() = default;
#     virtual boost::urls::url_view url() = 0;
#+    std::shared_ptr<persistent_data::UserSession> session;
# };
# 
# template <typename Adaptor>
diff --git a/include/kvm_websocket.hpp b/include/kvm_websocket.hpp
index f761773d..452b691c 100644
--- a/include/kvm_websocket.hpp
+++ b/include/kvm_websocket.hpp
@@ -13,7 +13,8 @@ namespace crow
 namespace obmc_kvm
 {
 
-static constexpr const uint maxSessions = 4;
+static constexpr const uint maxSessions = 1;
+int kvmActiveStatus = 0;
 
 class KvmSession : public std::enable_shared_from_this<KvmSession>
 {
@@ -66,7 +67,8 @@ class KvmSession : public std::enable_shared_from_this<KvmSession>
         BMCWEB_LOG_DEBUG("conn:{}, inputbuffer size {}", logPtr(&conn),
                          inputBuffer.size());
         doWrite();
-        lastActivityTime = persistent_data::SessionStore::getInstance().getTimeSinceLastTimeoutInSeconds();
+        lastActivityTime = persistent_data::SessionStore::getInstance()
+                               .getTimeSinceLastTimeoutInSeconds();
     }
 
     ~KvmSession()
@@ -171,7 +173,11 @@ class KvmSession : public std::enable_shared_from_this<KvmSession>
         if (!timerRunning) // Check if the timer is not already running
         {
             timerRunning = true;
-            lastActivityTime = persistent_data::SessionStore::getInstance().getTimeSinceLastTimeoutInSeconds(); // Get the current time and store it in lastActivityTime
+            lastActivityTime =
+                persistent_data::SessionStore::getInstance()
+                    .getTimeSinceLastTimeoutInSeconds(); // Get the current time
+                                                         // and store it in
+                                                         // lastActivityTime
 
             // Start a new thread (timeoutTimer) to handle the timeout logic
             timeoutTimer = std::thread([this]() {
@@ -263,9 +269,13 @@ inline void requestRoutes(App& app)
         }
 
         sessions[&conn] = std::make_shared<KvmSession>(conn);
+        conn.session->kvmConnections++;
+        kvmActiveStatus = 1;
     })
         .onclose([](crow::websocket::Connection& conn, const std::string&) {
         sessions.erase(&conn);
+        conn.session->kvmConnections--;
+        kvmActiveStatus = 0;
     })
         .onmessage([](crow::websocket::Connection& conn,
                       const std::string& data, bool) {
@@ -274,6 +284,18 @@ inline void requestRoutes(App& app)
             sessions[&conn]->onMessage(data);
         }
     });
+    BMCWEB_ROUTE(app, "/kvm/kvmActiveStatus")
+        .privileges({{"ConfigureComponents", "ConfigureManager"}})
+        .methods(boost::beast::http::verb::get)(
+            [](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& ares) {
+        if (req.session == nullptr)
+        {
+            BMCWEB_LOG_DEBUG("Internal Server Error");
+            return;
+        }
+        ares->res.jsonValue["kvmActiveStatus"] = kvmActiveStatus;
+    });
 }
 
 } // namespace obmc_kvm
diff --git a/include/nbd_proxy.hpp b/include/nbd_proxy.hpp
index 53feafbf..40f23641 100644
--- a/include/nbd_proxy.hpp
+++ b/include/nbd_proxy.hpp
@@ -48,7 +48,10 @@ struct NbdProxyServer : std::enable_shared_from_this<NbdProxyServer>
         peerSocket(connIn.getIoContext()),
         acceptor(connIn.getIoContext(), stream_protocol::endpoint(socketId)),
         connection(connIn)
-    {}
+    {
+        std::filesystem::path endpointPath(endpointIdIn);
+        endpointIndex = std::stoul(endpointPath.filename().string());
+    }
 
     NbdProxyServer(const NbdProxyServer&) = delete;
     NbdProxyServer(NbdProxyServer&&) = delete;
@@ -76,6 +79,11 @@ struct NbdProxyServer : std::enable_shared_from_this<NbdProxyServer>
         return endpointId;
     }
 
+    unsigned getEndpointIndex() const
+    {
+        return endpointIndex;
+    }
+
     void run()
     {
         acceptor.async_accept(
@@ -218,6 +226,7 @@ struct NbdProxyServer : std::enable_shared_from_this<NbdProxyServer>
     const std::string socketId;
     const std::string endpointId;
     const std::string path;
+    unsigned endpointIndex; // endpoint id represented in unsigned int
 
     bool uxWriteInProgress = false;
 
@@ -331,6 +340,7 @@ inline void
         conn, *socketValue, *endpointValue, *endpointObjectPath);
 
     sessions[&conn]->run();
+    conn.session->vmNbdActive[sessions[&conn]->getEndpointIndex()] = true;
 };
 inline void onOpen(crow::websocket::Connection& conn)
 {
@@ -360,6 +370,7 @@ inline void onClose(crow::websocket::Connection& conn,
         BMCWEB_LOG_DEBUG("No session to close");
         return;
     }
+    conn.session->vmNbdActive[sessions[&conn]->getEndpointIndex()] = false;
     // Remove reference to session in global map
     sessions.erase(session);
 }
diff --git a/include/sessions.hpp b/include/sessions.hpp
index 29eca463..f76874a1 100644
--- a/include/sessions.hpp
+++ b/include/sessions.hpp
@@ -44,6 +44,10 @@ struct UserSession
     bool isConfigureSelfOnly = false;
     std::string userRole{};
     std::vector<std::string> userGroups{};
+    // Use counter since one user can have multiple kvm connections
+    int kvmConnections = 0;
+    // currently there is only 2 nbd slots
+    std::array<bool, 2> vmNbdActive = {false, false};
 
     // There are two sources of truth for isConfigureSelfOnly:
     //  1. When pamAuthenticateUser() returns PAM_NEW_AUTHTOK_REQD.
@@ -365,7 +369,8 @@ class SessionStore
     {
         return std::chrono::seconds(timeoutInSeconds).count();
     }
-    std::chrono::time_point<std::chrono::steady_clock> getTimeSinceLastTimeoutInSeconds() const
+    std::chrono::time_point<std::chrono::steady_clock>
+        getTimeSinceLastTimeoutInSeconds() const
     {
         return lastTimeoutUpdate;
     }
diff --git a/redfish-core/lib/redfish_sessions.hpp b/redfish-core/lib/redfish_sessions.hpp
index d3faedd4..eb65b3bc 100644
--- a/redfish-core/lib/redfish_sessions.hpp
+++ b/redfish-core/lib/redfish_sessions.hpp
@@ -40,6 +40,17 @@ inline void fillSessionObject(crow::Response& res,
     res.jsonValue["Name"] = "User Session";
     res.jsonValue["Description"] = "Manager User Session";
     res.jsonValue["ClientOriginIPAddress"] = session.clientIp;
+    res.jsonValue["SessionType"] = "WebUI";
+    res.jsonValue["Oem"]["AMI_WebSession"]["@odata.type"] =
+        "#AMIWebSession.v1_0_0.WebSession";
+    res.jsonValue["Oem"]["AMI_WebSession"]["KvmActive"] =
+        static_cast<bool>(session.kvmConnections);
+    res.jsonValue["Oem"]["AMI_WebSession"]["VmActive"] =
+        nlohmann::json::array();
+    for (const bool status : session.vmNbdActive)
+    {
+        res.jsonValue["Oem"]["AMI_WebSession"]["VmActive"].push_back(status);
+    }
     res.jsonValue["SessionType"] = session.sessionType;
     if (session.clientId)
     {
@@ -168,6 +179,7 @@ inline void
                 ipAddr.s_addr = remoteIpAddr;
                 asyncResp->res.jsonValue["ClientOriginIPAddress"] =
                     inet_ntoa(ipAddr);
+                asyncResp->res.jsonValue["SessionType"] = "IPMI";
             }
             catch (const sdbusplus::exception::UnpackPropertyError& error)
             {
diff --git a/static/redfish/v1/$metadata/index.xml b/static/redfish/v1/$metadata/index.xml
index 3705c740..9d80afcd 100644
--- a/static/redfish/v1/$metadata/index.xml
+++ b/static/redfish/v1/$metadata/index.xml
@@ -3609,5 +3609,9 @@
             <EntityContainer Name="Service" Extends="ServiceRoot.v1_0_0.ServiceContainer"/>
         </Schema>
     </edmx:DataServices>
+    <edmx:Reference Uri="/redfish/v1/schema/AMIWebSession_v1.xml">
+        <edmx:Include Namespace="AMIWebSession"/>
+        <edmx:Include Namespace="AMIWebSession.v1_0_0"/>
+    </edmx:Reference>
 
 </edmx:Edmx>
diff --git a/static/redfish/v1/JsonSchemas/AMIWebSession/index.json b/static/redfish/v1/JsonSchemas/AMIWebSession/index.json
new file mode 100644
index 00000000..23604900
--- /dev/null
+++ b/static/redfish/v1/JsonSchemas/AMIWebSession/index.json
@@ -0,0 +1,44 @@
+{
+    "$id": "http://redfish.dmtf.org/schemas/v1/AMIWebSession.v1_0_0.json",
+    "$schema": "http://redfish.dmtf.org/schemas/v1/redfish-schema-v1.json",
+    "copyright": "Copyright 2014-2019 DMTF. For the full DMTF copyright policy, see http://www.dmtf.org/about/policies/copyright",
+    "definitions": {
+        "WebSession": {
+            "additionalProperties": false,
+            "description": "OEM Extension for Session",
+            "longDescription": "OEM Extension for Session to provide the Client details.",
+            "patternProperties": {
+                "^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\\.[a-zA-Z_][a-zA-Z0-9_]*$": {
+                    "description": "This property shall specify a valid odata or Redfish property.",
+                    "type": [
+                        "array",
+                        "boolean",
+                        "integer",
+                        "number",
+                        "null",
+                        "object",
+                        "string"
+                    ]
+                }
+            },
+            "properties": {
+                "KvmActive" : {
+                    "description" : "Keyboard-Video-Mouse active status.",
+                    "longDescription": "Active status of Keyboard-Video-Mouse in current session.",
+                    "readonly": true,
+                    "type" : "boolean"
+                },
+                "VmActive" : {
+                    "description" : "Virtual Media active status.",
+                    "longDescription": "Active status of Virtual Media in current session.",
+                    "readonly": true,
+                    "type" : "array"
+                }
+            },
+            "type": "object"
+        }
+    },
+    "owningEntity": "AMI_WebSession",
+    "release": "1.0",
+    "title": "#AMIWebSession.v1_0_0"
+}
diff --git a/static/redfish/v1/schema/AMIWebSession_v1.xml b/static/redfish/v1/schema/AMIWebSession_v1.xml
new file mode 100644
index 00000000..4803c5e8
--- /dev/null
+++ b/static/redfish/v1/schema/AMIWebSession_v1.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<edmx:Edmx xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" Version="4.0">
+
+  <edmx:Reference Uri="http://docs.oasis-open.org/odata/odata/v4.0/errata03/csd01/complete/vocabularies/Org.OData.Core.V1.xml">
+    <edmx:Include Namespace="Org.OData.Core.V1" Alias="OData"/>
+  </edmx:Reference>
+  <edmx:Reference Uri="http://docs.oasis-open.org/odata/odata/v4.0/errata03/csd01/complete/vocabularies/Org.OData.Measures.V1.xml">
+    <edmx:Include Namespace="Org.OData.Measures.V1" Alias="Measures"/>
+  </edmx:Reference>
+  <edmx:Reference Uri="http://redfish.dmtf.org/schemas/v1/RedfishExtensions_v1.xml">
+    <edmx:Include Namespace="RedfishExtensions.v1_0_0" Alias="Redfish"/>
+  </edmx:Reference>
+  <edmx:Reference Uri="http://redfish.dmtf.org/schemas/v1/Resource_v1.xml">
+    <edmx:Include Namespace="Resource"/>
+    <edmx:Include Namespace="Resource.v1_0_0"/>
+  </edmx:Reference>
+  <edmx:DataServices>
+
+    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="AMIWebSession">
+      <Annotation Term="Redfish.OwningEntity" String="AMI_WebSession"/>
+    </Schema>
+
+    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="AMIWebSession.v1_0_0">
+      <Annotation Term="Redfish.OwningEntity" String="AMI_WebSession"/>
+      <Annotation Term="Redfish.Release" String="1.0"/>
+
+      <EntityType Name="WebSession" BaseType="Resource.OemObject" Abstract="true">
+          <Annotation Term="OData.Description" String="AMI OEM Extension for Web Session"/>
+          <Annotation Term="OData.LongDescription" String="AMI OEM Extension for Web Session"/>
+
+            <Property Name="KvmActive" Type="Edm.Boolean">
+              <Annotation Term="OData.Description" String="Keyboard-Video-Mouse active status."/>
+              <Annotation Term="OData.LongDescription" String="Active status of Keyboard-Video-Mouse in current session."/>
+            </Property>
+
+            <Property Name="VmActive" Type="Collection(Edm.Boolean)">
+              <Annotation Term="OData.Description" String="Virtual Media active status."/>
+              <Annotation Term="OData.LongDescription" String="Active status of Virtual Media in current session."/>
+            </Property>
+
+      </EntityType>
+    </Schema>
+  </edmx:DataServices>
+</edmx:Edmx>
-- 
2.34.1
