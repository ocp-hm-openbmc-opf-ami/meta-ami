From cb8fdfeed3704afcb5e7132415b3a7a2e25f8768 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Thu, 20 Oct 2022 11:31:01 +0530
Subject: [PATCH] Add_KVM_VM_status_in_user_session_info

---
 http/websocket.hpp                            |  6 ++-
 include/kvm_websocket.hpp                     | 19 ++++++++
 include/nbd_proxy.hpp                         | 19 +++++++-
 include/sessions.hpp                          |  5 +++
 redfish-core/lib/redfish_sessions.hpp         | 14 ++++++
 static/redfish/v1/$metadata/index.xml         |  4 ++
 .../v1/JsonSchemas/AMIWebSession/index.json   | 44 +++++++++++++++++++
 static/redfish/v1/schema/AMIWebSession_v1.xml | 44 +++++++++++++++++++
 8 files changed, 152 insertions(+), 3 deletions(-)
 create mode 100644 static/redfish/v1/JsonSchemas/AMIWebSession/index.json
 create mode 100644 static/redfish/v1/schema/AMIWebSession_v1.xml

diff --git a/http/websocket.hpp b/http/websocket.hpp
index beda2700..4b623148 100644
--- a/http/websocket.hpp
+++ b/http/websocket.hpp
@@ -21,11 +21,12 @@ struct Connection : std::enable_shared_from_this<Connection>
 {
   public:
     explicit Connection(const crow::Request& reqIn) :
-        req(reqIn.req), userdataPtr(nullptr)
+        req(reqIn.req), session(reqIn.session), userdataPtr(nullptr)
     {}
 
     explicit Connection(const crow::Request& reqIn, std::string user) :
-        req(reqIn.req), userName{std::move(user)}, userdataPtr(nullptr)
+        req(reqIn.req), session(reqIn.session), userName{std::move(user)},
+        userdataPtr(nullptr)
     {}
 
     Connection(const Connection&) = delete;
@@ -57,6 +58,7 @@ struct Connection : std::enable_shared_from_this<Connection>
 
     boost::beast::http::request<boost::beast::http::string_body> req;
     crow::Response res;
+    std::shared_ptr<persistent_data::UserSession> session;
 
   private:
     std::string userName{};
diff --git a/include/kvm_websocket.hpp b/include/kvm_websocket.hpp
index ede4d864..9dc55023 100644
--- a/include/kvm_websocket.hpp
+++ b/include/kvm_websocket.hpp
@@ -13,6 +13,7 @@ namespace obmc_kvm
 {
 
 static constexpr const uint maxSessions = 4;
+int kvmActiveStatus = 0;
 
 class KvmSession
 {
@@ -173,9 +174,13 @@ inline void requestRoutes(App& app)
             }
 
             sessions[&conn] = std::make_unique<KvmSession>(conn);
+            conn.session->kvmConnections++;
+	     kvmActiveStatus = 1;
         })
         .onclose([](crow::websocket::Connection& conn, const std::string&) {
             sessions.erase(&conn);
+            conn.session->kvmConnections--;
+	     kvmActiveStatus = 0;
         })
         .onmessage([](crow::websocket::Connection& conn,
                       const std::string& data, bool) {
@@ -184,6 +189,20 @@ inline void requestRoutes(App& app)
                 sessions[&conn]->onMessage(data);
             }
         });
+
+	BMCWEB_ROUTE(app, "/kvm/kvmActiveStatus")
+        .privileges({{"ConfigureComponents", "ConfigureManager"}})
+        .methods(boost::beast::http::verb::get)(
+            [](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& ares) {
+                if (req.session == nullptr)
+                {
+                    BMCWEB_LOG_DEBUG << "Internal Server Error";
+                    return;
+                }
+                ares->res.jsonValue["kvmActiveStatus"] = kvmActiveStatus;
+        });
+
 }
 
 } // namespace obmc_kvm
diff --git a/include/nbd_proxy.hpp b/include/nbd_proxy.hpp
index b6683f56..aabd690d 100644
--- a/include/nbd_proxy.hpp
+++ b/include/nbd_proxy.hpp
@@ -45,7 +45,10 @@ struct NbdProxyServer : std::enable_shared_from_this<NbdProxyServer>
         endpointId(endpointIdIn), path(pathIn),
         acceptor(connIn.getIoContext(), stream_protocol::endpoint(socketId)),
         connection(connIn)
-    {}
+    {
+        std::filesystem::path endpointPath(endpointIdIn);
+        endpointIndex = std::stoul(endpointPath.filename().string());
+    }
 
     NbdProxyServer(const NbdProxyServer&) = delete;
     NbdProxyServer(NbdProxyServer&&) = delete;
@@ -62,6 +65,11 @@ struct NbdProxyServer : std::enable_shared_from_this<NbdProxyServer>
         return endpointId;
     }
 
+    unsigned getEndpointIndex() const
+    {
+        return endpointIndex;
+    }
+
     void run()
     {
         acceptor.async_accept(
@@ -230,6 +238,9 @@ struct NbdProxyServer : std::enable_shared_from_this<NbdProxyServer>
     const std::string endpointId;
     const std::string path;
 
+    // endpoint id represented in unsigned int
+    unsigned endpointIndex;
+
     bool uxWriteInProgress = false;
 
     // UNIX => WebSocket buffer
@@ -399,6 +410,9 @@ inline void requestRoutes(App& app)
                     conn, *socketValue, *endpointValue, *endpointObjectPath);
 
                 sessions[&conn]->run();
+                    conn.session
+                        ->vmNbdActive[sessions[&conn]->getEndpointIndex()] =
+                        true;
             };
             crow::connections::systemBus->async_method_call(
                 std::move(openHandler), "xyz.openbmc_project.VirtualMedia",
@@ -422,6 +436,9 @@ inline void requestRoutes(App& app)
             return;
         }
         session->second->close();
+        conn.session->vmNbdActive[sessions[&conn]->getEndpointIndex()] =
+           false;
+
         // Remove reference to session in global map
         sessions.erase(session);
         })
diff --git a/include/sessions.hpp b/include/sessions.hpp
index 3dabff4b..fd18c9f7 100644
--- a/include/sessions.hpp
+++ b/include/sessions.hpp
@@ -40,6 +40,11 @@ struct UserSession
     bool cookieAuth = false;
     bool isConfigureSelfOnly = false;
 
+    // Use counter since one user can have multiple kvm connections
+    int kvmConnections = 0;
+    // currently there is only 2 nbd slots
+    std::array<bool, 2> vmNbdActive = {false, false};
+
     // There are two sources of truth for isConfigureSelfOnly:
     //  1. When pamAuthenticateUser() returns PAM_NEW_AUTHTOK_REQD.
     //  2. D-Bus User.Manager.GetUserInfo property UserPasswordExpired.
diff --git a/redfish-core/lib/redfish_sessions.hpp b/redfish-core/lib/redfish_sessions.hpp
index 7d9e7fa5..908573da 100644
--- a/redfish-core/lib/redfish_sessions.hpp
+++ b/redfish-core/lib/redfish_sessions.hpp
@@ -38,6 +38,17 @@ inline void fillSessionObject(crow::Response& res,
     res.jsonValue["Name"] = "User Session";
     res.jsonValue["Description"] = "Manager User Session";
     res.jsonValue["ClientOriginIPAddress"] = session.clientIp;
+    res.jsonValue["SessionType"] = "WebUI";
+    res.jsonValue["Oem"]["AMI_WebSession"]["@odata.type"] =
+        "#AMIWebSession.v1_0_0.WebSession";
+    res.jsonValue["Oem"]["AMI_WebSession"]["KvmActive"] =
+        static_cast<bool>(session.kvmConnections);
+    res.jsonValue["Oem"]["AMI_WebSession"]["VmActive"] =
+        nlohmann::json::array();
+    for (const bool status : session.vmNbdActive)
+    {
+        res.jsonValue["Oem"]["AMI_WebSession"]["VmActive"].push_back(status);
+    }
 #ifdef BMCWEB_ENABLE_IBM_MANAGEMENT_CONSOLE
     res.jsonValue["Oem"]["OpenBMC"]["@odata.type"] =
         "#OemSession.v1_0_0.Session";
@@ -164,6 +175,9 @@ inline void
                 ipAddr.s_addr = remoteIpAddr;
                 asyncResp->res.jsonValue["ClientOriginIPAddress"] =
                     inet_ntoa(ipAddr);
+                asyncResp->res.jsonValue["SessionType"] =
+                              "IPMI";
+
             }
             catch (const sdbusplus::exception::UnpackPropertyError& error)
             {
diff --git a/static/redfish/v1/$metadata/index.xml b/static/redfish/v1/$metadata/index.xml
index 52b01984..a0919ea1 100644
--- a/static/redfish/v1/$metadata/index.xml
+++ b/static/redfish/v1/$metadata/index.xml
@@ -2609,4 +2609,8 @@
         <edmx:Include Namespace="OemSession"/>
         <edmx:Include Namespace="OemSession.v1_0_0"/>
     </edmx:Reference>
+    <edmx:Reference Uri="/redfish/v1/schema/AMIWebSession_v1.xml">
+        <edmx:Include Namespace="AMIWebSession"/>
+        <edmx:Include Namespace="AMIWebSession.v1_0_0"/>
+    </edmx:Reference>
 </edmx:Edmx>
diff --git a/static/redfish/v1/JsonSchemas/AMIWebSession/index.json b/static/redfish/v1/JsonSchemas/AMIWebSession/index.json
new file mode 100644
index 00000000..23604900
--- /dev/null
+++ b/static/redfish/v1/JsonSchemas/AMIWebSession/index.json
@@ -0,0 +1,44 @@
+{
+    "$id": "http://redfish.dmtf.org/schemas/v1/AMIWebSession.v1_0_0.json",
+    "$schema": "http://redfish.dmtf.org/schemas/v1/redfish-schema-v1.json",
+    "copyright": "Copyright 2014-2019 DMTF. For the full DMTF copyright policy, see http://www.dmtf.org/about/policies/copyright",
+    "definitions": {
+        "WebSession": {
+            "additionalProperties": false,
+            "description": "OEM Extension for Session",
+            "longDescription": "OEM Extension for Session to provide the Client details.",
+            "patternProperties": {
+                "^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\\.[a-zA-Z_][a-zA-Z0-9_]*$": {
+                    "description": "This property shall specify a valid odata or Redfish property.",
+                    "type": [
+                        "array",
+                        "boolean",
+                        "integer",
+                        "number",
+                        "null",
+                        "object",
+                        "string"
+                    ]
+                }
+            },
+            "properties": {
+                "KvmActive" : {
+                    "description" : "Keyboard-Video-Mouse active status.",
+                    "longDescription": "Active status of Keyboard-Video-Mouse in current session.",
+                    "readonly": true,
+                    "type" : "boolean"
+                },
+                "VmActive" : {
+                    "description" : "Virtual Media active status.",
+                    "longDescription": "Active status of Virtual Media in current session.",
+                    "readonly": true,
+                    "type" : "array"
+                }
+            },
+            "type": "object"
+        }
+    },
+    "owningEntity": "AMI_WebSession",
+    "release": "1.0",
+    "title": "#AMIWebSession.v1_0_0"
+}
diff --git a/static/redfish/v1/schema/AMIWebSession_v1.xml b/static/redfish/v1/schema/AMIWebSession_v1.xml
new file mode 100644
index 00000000..4803c5e8
--- /dev/null
+++ b/static/redfish/v1/schema/AMIWebSession_v1.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<edmx:Edmx xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" Version="4.0">
+
+  <edmx:Reference Uri="http://docs.oasis-open.org/odata/odata/v4.0/errata03/csd01/complete/vocabularies/Org.OData.Core.V1.xml">
+    <edmx:Include Namespace="Org.OData.Core.V1" Alias="OData"/>
+  </edmx:Reference>
+  <edmx:Reference Uri="http://docs.oasis-open.org/odata/odata/v4.0/errata03/csd01/complete/vocabularies/Org.OData.Measures.V1.xml">
+    <edmx:Include Namespace="Org.OData.Measures.V1" Alias="Measures"/>
+  </edmx:Reference>
+  <edmx:Reference Uri="http://redfish.dmtf.org/schemas/v1/RedfishExtensions_v1.xml">
+    <edmx:Include Namespace="RedfishExtensions.v1_0_0" Alias="Redfish"/>
+  </edmx:Reference>
+  <edmx:Reference Uri="http://redfish.dmtf.org/schemas/v1/Resource_v1.xml">
+    <edmx:Include Namespace="Resource"/>
+    <edmx:Include Namespace="Resource.v1_0_0"/>
+  </edmx:Reference>
+  <edmx:DataServices>
+
+    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="AMIWebSession">
+      <Annotation Term="Redfish.OwningEntity" String="AMI_WebSession"/>
+    </Schema>
+
+    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="AMIWebSession.v1_0_0">
+      <Annotation Term="Redfish.OwningEntity" String="AMI_WebSession"/>
+      <Annotation Term="Redfish.Release" String="1.0"/>
+
+      <EntityType Name="WebSession" BaseType="Resource.OemObject" Abstract="true">
+          <Annotation Term="OData.Description" String="AMI OEM Extension for Web Session"/>
+          <Annotation Term="OData.LongDescription" String="AMI OEM Extension for Web Session"/>
+
+            <Property Name="KvmActive" Type="Edm.Boolean">
+              <Annotation Term="OData.Description" String="Keyboard-Video-Mouse active status."/>
+              <Annotation Term="OData.LongDescription" String="Active status of Keyboard-Video-Mouse in current session."/>
+            </Property>
+
+            <Property Name="VmActive" Type="Collection(Edm.Boolean)">
+              <Annotation Term="OData.Description" String="Virtual Media active status."/>
+              <Annotation Term="OData.LongDescription" String="Active status of Virtual Media in current session."/>
+            </Property>
+
+      </EntityType>
+    </Schema>
+  </edmx:DataServices>
+</edmx:Edmx>

