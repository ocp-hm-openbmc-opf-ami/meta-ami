From c4ecc54d67d8c08eadfb5d7f3437e3362ad7dd03 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>, Karthika R <rkarthika@ami.com>
Date: Wed, 24 Jan 2024 14:48:30 +0530
Subject: [PATCH 8/8] enhanced passwordPolicy

---
 redfish-core/lib/account_service.hpp | 74 +++++++++++++++++++++++++++-
 1 file changed, 72 insertions(+), 2 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index bcbea9e6..c6d2eb4f 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1525,12 +1525,16 @@ inline void
         const uint8_t* minPasswordLength = nullptr;
         const uint32_t* accountUnlockTimeout = nullptr;
         const uint16_t* maxLoginAttemptBeforeLockout = nullptr;
+        const uint8_t* rememberOldPasswordTimes = nullptr;
+        const std::string* passwordPolicyComplexity = nullptr;
 
         const bool success = sdbusplus::unpackPropertiesNoThrow(
             dbus_utils::UnpackErrorPrinter(), propertiesList,
             "MinPasswordLength", minPasswordLength, "AccountUnlockTimeout",
             accountUnlockTimeout, "MaxLoginAttemptBeforeLockout",
-            maxLoginAttemptBeforeLockout);
+            maxLoginAttemptBeforeLockout, "RememberOldPasswordTimes",
+           rememberOldPasswordTimes, "PasswordPolicyComplexity",
+	   passwordPolicyComplexity);
 
         if (!success)
         {
@@ -1554,6 +1558,21 @@ inline void
             asyncResp->res.jsonValue["AccountLockoutThreshold"] =
                 *maxLoginAttemptBeforeLockout;
         }
+        
+        if (rememberOldPasswordTimes != nullptr)
+        {
+           asyncResp->res.jsonValue["Oem"]["OpenBMC"]
+                                   ["RememberOldPasswordTimes"] =
+                *rememberOldPasswordTimes;
+        }
+
+        if (passwordPolicyComplexity != nullptr)
+        {
+           asyncResp->res.jsonValue["Oem"]["OpenBMC"]
+                                   ["PasswordPolicyComplexity"] =
+                *passwordPolicyComplexity;
+        }
+
     });
 
     auto callback = [asyncResp](bool success, const LDAPConfigData& confData,
@@ -1584,6 +1603,8 @@ inline void handleAccountServicePatch(
     std::optional<nlohmann::json> ldapObject;
     std::optional<nlohmann::json> activeDirectoryObject;
     std::optional<nlohmann::json> oemObject;
+    std::optional<std::string> passwordcomplexity;
+    std::optional<uint8_t> RememberOldPasswordTimes;
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "AccountLockoutDuration", unlockTimeout,
@@ -1629,12 +1650,61 @@ inline void handleAccountServicePatch(
         if (std::optional<nlohmann::json> authMethodsObject;
             oemOpenBMCObject &&
             json_util::readJson(*oemOpenBMCObject, asyncResp->res,
-                                "AuthMethods", authMethodsObject))
+                                "AuthMethods", authMethodsObject,
+                                "PasswordPolicyComplexity",passwordcomplexity,
+                                "RememberOldPasswordTimes",RememberOldPasswordTimes))
         {
             if (authMethodsObject)
             {
                 handleAuthMethodsPatch(*authMethodsObject, asyncResp);
             }
+            if (passwordcomplexity)
+            {
+                crow::connections::systemBus->async_method_call(
+                  [asyncResp, passwordcomplexity](
+                      const boost::system::error_code ec) {
+                      if (ec)
+                      {
+                          messages::internalError(asyncResp->res);
+                          return;
+                      }
+                      messages::success(asyncResp->res);
+                      },
+                      "xyz.openbmc_project.User.Manager",
+                      "/xyz/openbmc_project/user",
+                      "org.freedesktop.DBus.Properties", "Set",
+                      "xyz.openbmc_project.User.AccountPolicy",
+                      "PasswordPolicyComplexity",
+                      std::variant<std::string>(*passwordcomplexity));
+             }
+             if (RememberOldPasswordTimes)
+             {
+                uint8_t rememberRange = RememberOldPasswordTimes.value();
+                crow::connections::systemBus->async_method_call(
+                  [asyncResp, rememberRange](
+                     const boost::system::error_code ec) {
+                     if (ec)
+                     {
+                        messages::internalError(asyncResp->res);
+                        return;
+                     }
+                     if(rememberRange > 5)
+                     {
+                        std::string RemebrOldPasswdTimes = std::to_string(rememberRange);
+                        std::string_view RembrOldPasswdView(RemebrOldPasswdTimes);
+                        messages::propertyValueOutOfRange(asyncResp->res, RembrOldPasswdView, "RememberOldPasswordTimes");
+                        return;
+                     }
+                     messages::success(asyncResp->res);
+                     },
+                     "xyz.openbmc_project.User.Manager",
+                     "/xyz/openbmc_project/user",
+                     "org.freedesktop.DBus.Properties", "Set",
+                     "xyz.openbmc_project.User.AccountPolicy",
+                     "RememberOldPasswordTimes",
+                     std::variant<uint8_t>(
+                                 *RememberOldPasswordTimes));
+              }
         }
     }
 
-- 
2.34.1

