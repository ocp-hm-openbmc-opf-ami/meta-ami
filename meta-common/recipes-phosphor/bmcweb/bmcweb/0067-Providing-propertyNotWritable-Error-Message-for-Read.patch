From f6cee6562d296f427ee4d2f4970ae57e47f6fb7b Mon Sep 17 00:00:00 2001
From: sandeepap <sandeepap@ami.com>
Date: Wed, 28 Jun 2023 11:43:49 +0530
Subject: [PATCH] Providing propertyNotWritable Error Message for ReadOnly
 property

Signed-off-by: sandeepap <sandeepap@ami.com>
---
 redfish-core/lib/account_service.hpp  |  9 ++++++++-
 redfish-core/lib/chassis.hpp          |  9 ++++++++-
 redfish-core/lib/event_service.hpp    |  9 ++++++++-
 redfish-core/lib/managers.hpp         |  9 ++++++++-
 redfish-core/lib/network_protocol.hpp | 10 +++++++++-
 redfish-core/lib/pef_service.hpp      |  9 ++++++++-
 redfish-core/lib/systems.hpp          | 10 +++++++++-
 7 files changed, 58 insertions(+), 7 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index 77ee26a..f196e04 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1443,17 +1443,24 @@ inline void handleAccountServicePatch(
     std::optional<nlohmann::json> oemObject;
     std::optional<std::string> passwordcomplexity;
     std::optional<uint8_t> RememberOldPasswordTimes;
+    std::optional<std::string> id;
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "AccountLockoutDuration", unlockTimeout,
             "AccountLockoutThreshold", lockoutThreshold, "MaxPasswordLength",
             maxPasswordLength, "MinPasswordLength", minPasswordLength, "LDAP",
             ldapObject, "ActiveDirectory", activeDirectoryObject, "Oem",
-            oemObject))
+            oemObject, "Id", id))
     {
         return;
     }
 
+    if(id)
+    {
+	messages::propertyNotWritable(asyncResp->res, "Id");
	asyncResp->res.result(boost::beast::http::status::bad_request);
+	return;
+    }
+
     if (minPasswordLength)
     {
         crow::connections::systemBus->async_method_call(
diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 2005b10..7fd139e 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -497,6 +497,7 @@ inline void
     }
     std::optional<bool> locationIndicatorActive;
     std::optional<std::string> indicatorLed;
+    std::optional<std::string> id;
 
     if (param.empty())
     {
@@ -505,10 +506,16 @@ inline void
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "LocationIndicatorActive",
-            locationIndicatorActive, "IndicatorLED", indicatorLed))
+            locationIndicatorActive, "IndicatorLED", indicatorLed, "Id", id))
     {
         return;
     }
+
+    if(id)
+    {
+	messages::propertyNotWritable(asyncResp->res, "Id");
	asyncResp->res.result(boost::beast::http::status::bad_request);
+	return;
+    }
 	
     asyncResp->res.result(boost::beast::http::status::no_content);
 
diff --git a/redfish-core/lib/event_service.hpp b/redfish-core/lib/event_service.hpp
index 6956b8e..ed6af45 100644
--- a/redfish-core/lib/event_service.hpp
+++ b/redfish-core/lib/event_service.hpp
@@ -179,16 +179,23 @@ inline void requestRoutesEventService(App& app)
         std::optional<uint32_t> retryAttemps;
         std::optional<uint32_t> retryInterval;
 	std::optional<nlohmann::json> smtpProps;
+	std::optional<std::string> id;
 
         if (!json_util::readJsonPatch(
                 req, asyncResp->res, "ServiceEnabled", serviceEnabled,
                 "DeliveryRetryAttempts", retryAttemps,
                 "DeliveryRetryIntervalSeconds", retryInterval,
-		"SMTP", smtpProps))
+		"SMTP", smtpProps, "Id", id))
         {
             return;
         }
 
+	if(id)
+	{
+		messages::propertyNotWritable(asyncResp->res, "Id");
		asyncResp->res.result(boost::beast::http::status::bad_request);
+		return;
+	}
+
         persistent_data::EventServiceConfig eventServiceConfig =
             persistent_data::EventServiceStore::getInstance()
                 .getEventServiceConfig();
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index 7024263..3b437c2 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -2557,14 +2557,21 @@ inline void requestRoutesManager(App& app)
         std::optional<std::string> datetime;
        std::optional<std::string> timeZone;
 	std::optional<bool> locationIndicatorActive;
+	std::optional<std::string> id;
 
         if (!json_util::readJsonPatch(req, asyncResp->res, "Oem", oem,
                                       "DateTime", datetime, "Links", links, "DateTimeLocalOffset", timeZone,
-				      "LocationIndicatorActive", locationIndicatorActive))
+				      "LocationIndicatorActive", locationIndicatorActive, "Id", id))
         {
             return;
         }
 
+	if(id)
+	{
+	    messages::propertyNotWritable(asyncResp->res, "Id");
	    asyncResp->res.result(boost::beast::http::status::bad_request);
+	    return;
+	}
+
         if (oem)
         {
 #ifdef BMCWEB_ENABLE_REDFISH_OEM_MANAGER_FAN_DATA
diff --git a/redfish-core/lib/network_protocol.hpp b/redfish-core/lib/network_protocol.hpp
index 8d3b048..30b0cca 100644
--- a/redfish-core/lib/network_protocol.hpp
+++ b/redfish-core/lib/network_protocol.hpp
@@ -473,6 +473,7 @@ inline void requestRoutesNetworkProtocol(App& app)
         std::optional<bool> ntpEnabled;
         std::optional<bool> ipmiEnabled;
         std::optional<bool> sshEnabled;
+	std::optional<std::string> id;
 
         // clang-format off
         if (!json_util::readJsonPatch(
@@ -481,10 +482,17 @@ inline void requestRoutesNetworkProtocol(App& app)
                 "NTP/NTPServers", ntpServerObjects,
                 "NTP/ProtocolEnabled", ntpEnabled,
                 "IPMI/ProtocolEnabled", ipmiEnabled,
-                "SSH/ProtocolEnabled", sshEnabled))
+                "SSH/ProtocolEnabled", sshEnabled, "Id", id))
         {
             return;
         }
+	
+	if(id)
+	{
+	    messages::propertyNotWritable(asyncResp->res, "Id");
	    asyncResp->res.result(boost::beast::http::status::bad_request);
+	    return;
+	}
+
         // clang-format on
 
         asyncResp->res.result(boost::beast::http::status::no_content);
diff --git a/redfish-core/lib/pef_service.hpp b/redfish-core/lib/pef_service.hpp
index 62744b2..65e27a6 100644
--- a/redfish-core/lib/pef_service.hpp
+++ b/redfish-core/lib/pef_service.hpp
@@ -286,14 +286,21 @@ inline void requestRoutesPefService(App& app)
                 std::optional<std::vector<uint8_t>> filterEnable;
                 std::optional<uint8_t> pefActionGblControl;
                 std::optional<std::vector<std::string>> recipient;
+		std::optional<std::string> id;
 
                 if (!json_util::readJsonPatch(req, aResp->res, "FilterEnable",
                                          filterEnable, "PEFActionGblControl",
                                          pefActionGblControl, "Recipient",
-                                         recipient))
+                                         recipient, "Id", id))
                 {
                     return;
                 }
+		if(id)
+		{
+			messages::propertyNotWritable(aResp->res, "Id");
			aResp->res.result(boost::beast::http::status::bad_request);
+			return;
+		}
+
                 if (filterEnable)
                 {
                     setFilterEnable(aResp, *filterEnable);
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index a1c5c92..52b5707 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -3719,6 +3719,7 @@ inline void requestRoutesSystems(App& app)
 	std::optional<nlohmann::json> serialConsole;
 	std::optional<nlohmann::json> virtualMediaConfig;
 	std::optional<nlohmann::json> kvmConfig;
+	std::optional<std::string> id;
 
         // clang-format off
                 if (!json_util::readJsonPatch(
@@ -3742,10 +3743,17 @@ inline void requestRoutesSystems(App& app)
                         "IdlePowerSaver/ExitDwellTimeSeconds", ipsExitTime,
 		         "SerialConsole", serialConsole,
 		         "VirtualMediaConfig", virtualMediaConfig,
-		         "GraphicalConsole", kvmConfig))
+		         "GraphicalConsole", kvmConfig, "Id", id))
                 {
                     return;
                 }
+
+		if(id)
+		{
+			messages::propertyNotWritable(asyncResp->res, "Id");
			asyncResp->res.result(boost::beast::http::status::bad_request);
+			return;
+		}
+
         // clang-format on
 
         asyncResp->res.result(boost::beast::http::status::no_content);
-- 
2.9.5

