diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 47b507005..6ffff2bc9 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -652,10 +652,27 @@ inline void requestRoutesChassisResetAction(App& app)
         .methods(boost::beast::http::verb::post)(
             [&app](const crow::Request& req,
                    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-                   const std::string&) {
-                if (!redfish::setUpRedfishRoute(app, req, asyncResp->res))
+                   const std::string& chassisId) {
+
+           crow::connections::systemBus->async_method_call(
+                [&app,asyncResp, chassisId,req]
+                (const boost::system::error_code ec,
+                         const std::vector<std::string>& objects)
                 {
-                    return;
+                    if (ec)
+                    {
+                        messages::internalError(asyncResp->res);
+                        return;
+                    }
+                for (const std::string& object : objects)
+                {
+                    if (!boost::ends_with(object, chassisId))
+                    {
+                        continue;
+                    }
+               if (!redfish::setUpRedfishRoute(app, req, asyncResp->res))
+               {
+                     return;
                 }
                 BMCWEB_LOG_DEBUG << "Post Chassis Reset.";

@@ -664,11 +681,13 @@ inline void requestRoutesChassisResetAction(App& app)
                 if (!json_util::readJsonAction(req, asyncResp->res, "ResetType",
                                                resetType))
                 {
+
                     return;
                 }

                 if (resetType != "PowerCycle")
                 {
+
                     BMCWEB_LOG_DEBUG << "Invalid property value for ResetType: "
                                      << resetType;
                     messages::actionParameterNotSupported(
@@ -676,7 +695,22 @@ inline void requestRoutesChassisResetAction(App& app)

                     return;
                 }
+
                 doChassisPowerCycle(asyncResp);
+
+                return;
+                }
+                       messages::resourceNotFound(
+                        asyncResp->res, "#Chassis", chassisId);
+                   },
+                    "xyz.openbmc_project.ObjectMapper",
+                    "/xyz/openbmc_project/object_mapper",
+                    "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths",
+                    "/xyz/openbmc_project/inventory", 0,
+                    std::array<const char*, 2>{
+                       "xyz.openbmc_project.Inventory.Item.Board",
+                       "xyz.openbmc_project.Inventory.Item.Chassis"});
+                return;
             });
 }

