From bd5a041fefc177a8816916ef52619eee4c552d5f Mon Sep 17 00:00:00 2001
From: vamsikrishnak <vamsikrishnak@ami.com>
Date: Fri, 22 Mar 2024 19:39:08 +0530
Subject: [PATCH] Session Management Implementation under Redfish

- Added support to show session management sessions details
under SessionService/sessions.
- Added support to Unregister the sessions.

Signed-off-by: vamsikrishnak <vamsikrishnak@ami.com>
---
 redfish-core/lib/redfish_sessions.hpp | 237 +++++++++++++++++++++++++-
 1 file changed, 233 insertions(+), 4 deletions(-)

diff --git a/redfish-core/lib/redfish_sessions.hpp b/redfish-core/lib/redfish_sessions.hpp
index 32b19daf..4b6c13de 100644
--- a/redfish-core/lib/redfish_sessions.hpp
+++ b/redfish-core/lib/redfish_sessions.hpp
@@ -28,6 +29,34 @@
 namespace redfish
 {

+constexpr const char* SessionManagerService =
+    "xyz.openbmc_project.SessionManager";
+constexpr const char* SessionManagerObj = "/xyz/openbmc_project/SessionManager";
+std::vector<std::string> SessionInterfaces = {
+    "xyz.openbmc_project.SessionManager.Kvm",
+    "xyz.openbmc_project.SessionManager.Vmedia",
+    "xyz.openbmc_project.SessionManager.Web"};
+std::vector<std::string> SessionProperties = {
+    "KvmSessionInfo", "VmediaSessionInfo", "WebSessionInfo"};
+
+using sessionInfo =
+    std::tuple<uint16_t, std::string, std::string, uint8_t, uint8_t, uint8_t>;
+
+using sessionRet = std::vector<sessionInfo>;
+using propertyValue = std::variant<std::vector<sessionInfo>>;
+
+std::string getRole(std::string role)
+{
+   if(role == "priv-admin")
+       return "Administrator";
+   else if(role == "priv-operator")
+         return "Operator";
+   else if(role == "priv-user")
+          return "Readonly";
+   else
+          return "";
+}
+
 inline void fillSessionObject(crow::Response& res,
                               const persistent_data::UserSession& session)
 {
@@ -40,8 +56,10 @@ inline void fillSessionObject(crow::Response& res,
     res.jsonValue["Name"] = "User Session";
     res.jsonValue["Description"] = "Manager User Session";
     res.jsonValue["ClientOriginIPAddress"] = session.clientIp;
-    res.jsonValue["Oem"]["AMI_WebSession"]["@odata.id"]= boost::urls::format(
-         "/redfish/v1/SessionService/Sessions/{}#/Oem/AMI_WebSession",session.uniqueId);
+    res.jsonValue["Oem"]["AMI_WebSession"]["@odata.id"] = boost::urls::format(
+        "/redfish/v1/SessionService/Sessions/{}#/Oem/AMI_WebSession",
+        session.uniqueId);
+    res.jsonValue["Roles"] = getRole(session.userRole);
     res.jsonValue["Oem"]["AMI_WebSession"]["@odata.type"] =
         "#AMIWebSession.v1_0_0.WebSession";
     res.jsonValue["Oem"]["AMI_WebSession"]["KvmActive"] =
@@ -59,6 +76,88 @@ inline void fillSessionObject(crow::Response& res,
     }
 }
 
+inline std::string getSessionType(int sessionType)
+{
+    if (sessionType == 0)
+        return "KVM";
+    else if (sessionType == 1)
+        return "WEB";
+    else if (sessionType == 2)
+        return "VMEDIA";
+    else
+        return "";
+}
+
+inline std::string getprivilege(int priv)
+{
+    if (priv == 1)
+        return "Callback";
+    else if (priv == 2)
+        return "User";
+    else if (priv == 3)
+        return "Operator";
+    else if (priv == 4)
+        return "Administrator";
+    else if (priv == 5)
+        return "OEM Proprietary";
+    else
+        return "";
+}
+
+inline void getSessionInfo(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
+                           const std::string& interface,
+                           const std::string& propertyName,
+                           std::string sessionId, bool& found)
+{
+    size_t Pos = sessionId.find('_');
+    std::string num = sessionId.substr(Pos + 1);
+    int SessId = std::stoi(num);
+
+    propertyValue value;
+    auto b = sdbusplus::bus::new_default_system();
+    auto method = b.new_method_call(SessionManagerService, SessionManagerObj,
+                                    DBUS_PROPERTY_IFACE, "Get");
+    method.append(interface, propertyName);
+    auto reply = b.call(method);
+    reply.read(value);
+
+    if (std::holds_alternative<sessionRet>(value))
+    {
+        sessionRet& vec = std::get<sessionRet>(value);
+        for (const auto& tuple : vec)
+        {
+            int id;
+            std::string IpAddess;
+            std::string userName;
+            int SessionType;
+            int privilege;
+            int UserId;
+            std::tie(id, IpAddess, userName, SessionType, privilege,
+                     UserId) = tuple;
+            if (SessId == id)
+            {
+                found = true;
+                asyncResp->res.jsonValue["Id"] = sessionId;
+                asyncResp->res.jsonValue["UserName"] = userName;
+                asyncResp->res.jsonValue["@odata.id"] =
+                    "/redfish/v1/SessionService/"
+                    "Sessions/" +
+                    sessionId;
+                asyncResp->res.jsonValue["@odata.type"] =
+                    "#Session.v1_3_0.Session";
+                asyncResp->res.jsonValue["Name"] = "User Session";
+                asyncResp->res.jsonValue["Description"] =
+                    "Manager User Session";
+                asyncResp->res.jsonValue["ClientOriginIPAddress"] = IpAddess;
+                asyncResp->res.jsonValue["SessionType"] =
+                    getSessionType(SessionType);
+                asyncResp->res.jsonValue["Roles"] = getprivilege(privilege);
+                asyncResp->res.jsonValue["UserId"] = UserId;
+            }
+        }
+    }
+}
+
 inline void
     handleSessionHead(crow::App& app, const crow::Request& req,
                       const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -96,6 +195,19 @@ inline void
         return;
     }
 
+    bool found = false;
+    // Session management
+    if (sessionId.find("session_") != std::string::npos)
+    {
+        for (size_t i = 0; i < SessionInterfaces.size(); ++i)
+        {
+            getSessionInfo(asyncResp, SessionInterfaces[i],
+                           SessionProperties[i], sessionId, found);
+        }
+        // Session details found
+        if (found == true)
+            return;
+    }
     // Check the IPMI sessions and get session info
     std::array<std::string, 1> interfaces = {
         "xyz.openbmc_project.Ipmi.SessionInfo"};
@@ -296,6 +408,36 @@ inline nlohmann::json getSessionCollectionMembers()
     return ret;
 }
 
+inline void getSessions(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
+                        std::string interface, std::string Property,
+                        nlohmann::json& members)
+{
+    sdbusplus::asio::getProperty<std::vector<sessionInfo>>(
+        *crow::connections::systemBus, SessionManagerService, SessionManagerObj,
+        interface, Property,
+        [asyncResp, &members](const boost::system::error_code ec,
+                              const std::vector<sessionInfo>& Sessions) {
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("DBus response error:{}", ec);
+            return;
+        }
+        std::vector<uint16_t> sessionIds;
+        for (const auto& tuple : Sessions)
+        {
+            uint16_t sessionId = std::get<0>(tuple);
+            sessionIds.push_back(sessionId);
+        }
+
+        for (uint64_t value : sessionIds)
+        {
+            members.push_back(
+                {{"@odata.id", "/redfish/v1/SessionService/Sessions/session_" +
+                                   std::to_string(value)}});
+        }
+    });
+}
+
 inline void handleSessionCollectionHead(
     crow::App& app, const crow::Request& req,
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
@@ -361,13 +503,95 @@ inline void handleSessionCollectionGet(
                       "/redfish/v1/SessionService/Sessions/" + ipmiSessionID}});
             }
         }
-        asyncResp->res.jsonValue["Members@odata.count"] =
-            asyncResp->res.jsonValue["Members"].size();
     },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths", "/", 0,
         interfaces);
+    nlohmann::json& members = asyncResp->res.jsonValue["Members"];
+    for (size_t i = 0; i < SessionInterfaces.size(); ++i)
+    {
+        getSessions(asyncResp, SessionInterfaces[i], SessionProperties[i],
+                    members);
+    }
+    asyncResp->res.jsonValue["Members@odata.count"] = members.size();
+}
+
+const propertyValue getSessiondata(const std::string& interface,
+                                   const std::string& propertyName)
+{
+    propertyValue value;
+    auto b = sdbusplus::bus::new_default_system();
+    auto method = b.new_method_call(SessionManagerService, SessionManagerObj,
+                                    DBUS_PROPERTY_IFACE, "Get");
+    method.append(interface, propertyName);
+    auto reply = b.call(method);
+    reply.read(value);
+    return value;
+}
+
+inline void handleSessionManagerPost(
+    crow::App& app, const crow::Request& req,
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const std::string& sessionId)
+{
+    size_t Pos = sessionId.find('_');
+    std::string num = sessionId.substr(Pos + 1);
+    int SessId = std::stoi(num);
+    int sessType;
+    if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+    {
+        return;
+    }
+    bool found = false;
+
+    // Fetching sessionType with sessionId
+    for (size_t i = 0; i < SessionInterfaces.size(); ++i)
+    {
+        propertyValue data = getSessiondata(SessionInterfaces[i],
+                                            SessionProperties[i]);
+        if (std::holds_alternative<sessionRet>(data))
+        {
+            sessionRet& vec = std::get<sessionRet>(data);
+            for (const auto& tuple : vec)
+            {
+                int id;
+                std::string IpAddess;
+                std::string userName;
+                int SessionType;
+                int privilege;
+                int UserId;
+                std::tie(id, IpAddess, userName, SessionType, privilege,
+                         UserId) = tuple;
+                if (SessId == id)
+                {
+                    sessType = SessionType;
+                    found = true;
+                    break;
+                }
+            }
+        }
+        if (found)
+            break;
+    }
+    // Unregister session
+    crow::connections::systemBus->async_method_call(
+        [asyncResp](const boost::system::error_code& ec, bool value) {
+        if (ec)
+        {
+            BMCWEB_LOG_DEBUG("Failed to unRegister: {}", ec);
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        if (value)
+        {
+            messages::success(asyncResp->res);
+            return;
+        }
+    },
+        SessionManagerService, SessionManagerObj,
+        "xyz.openbmc_project.SessionManager", "SessionUnregister",
+        static_cast<uint8_t>(SessId), static_cast<uint8_t>(sessType), 1);
 }
 
 inline void handleSessionCollectionMembersGet(
@@ -542,6 +766,11 @@ inline void requestRoutesSession(App& app)
         .methods(boost::beast::http::verb::get)(
             std::bind_front(handleSessionGet, std::ref(app)));
 
+    BMCWEB_ROUTE(app, "/redfish/v1/SessionService/Sessions/<str>/")
+        .privileges(redfish::privileges::postSessionService)
+        .methods(boost::beast::http::verb::post)(
+            std::bind_front(handleSessionManagerPost, std::ref(app)));
+
     BMCWEB_ROUTE(app, "/redfish/v1/SessionService/Sessions/<str>/")
         .privileges(redfish::privileges::deleteSession)
         .methods(boost::beast::http::verb::delete_)(
-- 
2.43.2

