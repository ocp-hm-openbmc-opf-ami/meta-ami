From 774dacf3aba30b286f7fe183efe3504b8f172275 Mon Sep 17 00:00:00 2001
From: Sandeep <sandeepap@ami.com>
Date: Sun, 15 Oct 2023 23:53:27 +0530
Subject: [PATCH] TrustedModuleRequiredToBoot Property Patch Issue

Tested on IND_ACRCH.
URI :https://{{IP}}/redfish/v1/Systems/system
Method : PATCH
Body :

{
  "Boot": {
      "TrustedModuleRequiredToBoot" : "Required"
  }
}

{
  "Boot": {
      "TrustedModuleRequiredToBoot" : "Disabled"
  }
}

Signed-off-by: Sandeep <sandeepap@ami.com>
---
 redfish-core/lib/systems.hpp | 22 +++++++++++++++++++---
 1 file changed, 19 insertions(+), 3 deletions(-)

diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 2cc68923..f578b034 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -1639,9 +1639,25 @@ inline void getTrustedModuleRequiredToBoot(
  * @return None.
  */
 inline void setTrustedModuleRequiredToBoot(
-    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp, const bool tpmRequired)
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const std::string& bootTrustedModuleRequired)
 {
-    BMCWEB_LOG_DEBUG("Set TrustedModuleRequiredToBoot.");
+    bool tpmRequired = false;
+
+    if (bootTrustedModuleRequired == "Required")
+    {
+        tpmRequired = true;
+    }
+    else if (bootTrustedModuleRequired == "Disabled")
+    {
+        tpmRequired = false;
+    }
+    else
+    {
+        messages::propertyValueNotInList(asyncResp->res, bootTrustedModuleRequired,
+                                         "TrustedModuleRequiredToBoot");
+        return;
+    }
     constexpr std::array<std::string_view, 1> interfaces = {
         "xyz.openbmc_project.Control.TPM.Policy"};
     dbus::utility::getSubTree(
@@ -3583,7 +3599,7 @@ inline void handleComputerSystemPatch(
     std::optional<std::string> bootEnable;
     std::optional<std::string> bootAutomaticRetry;
     std::optional<uint32_t> bootAutomaticRetryAttempts;
-    std::optional<bool> bootTrustedModuleRequired;
+    std::optional<std::string> bootTrustedModuleRequired;
     std::optional<std::string> stopBootOnFault;
     std::optional<bool> ipsEnable;
     std::optional<uint8_t> ipsEnterUtil;
-- 
2.25.1

