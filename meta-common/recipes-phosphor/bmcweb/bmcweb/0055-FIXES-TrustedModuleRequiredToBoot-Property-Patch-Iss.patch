From 8f8a3d042c997ba51214dad82d4e490cecd3fd33 Mon Sep 17 00:00:00 2001
From: Sandeep <sandeepap@ami.com>
Date: Mon, 17 Jul 2023 20:38:11 +0530
Subject: [PATCH] FIXES TrustedModuleRequiredToBoot Property Patch Issue

Signed-off-by: Sandeep <sandeepap@ami.com>
---
 redfish-core/lib/systems.hpp | 26 ++++++++++++++++++++++++--
 1 file changed, 24 insertions(+), 2 deletions(-)

diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 71e52b69..9bc6ee74 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -1529,9 +1529,31 @@ inline void getTrustedModuleRequiredToBoot(
  * @return None.
  */
 inline void setTrustedModuleRequiredToBoot(
-    const std::shared_ptr<bmcweb::AsyncResp>& aResp, const bool tpmRequired)
+    const std::shared_ptr<bmcweb::AsyncResp>& aResp,
+    const std::string& bootTrustedModuleRequired)
 {
     BMCWEB_LOG_DEBUG << "Set TrustedModuleRequiredToBoot.";
+    
+    bool tpmRequired = false;
+
+    if (bootTrustedModuleRequired == "Required")
+    {
+        tpmRequired = true;
+    }
+    else if (bootTrustedModuleRequired == "Disabled")
+    {
+        tpmRequired = false;
+    }
+    else
+    {
+        BMCWEB_LOG_DEBUG
+            << "Invalid property value for bootTrustedModuleRequired: "
+            << bootTrustedModuleRequired;
+        messages::propertyValueNotInList(aResp->res, bootTrustedModuleRequired,
+                                         "TrustedModuleRequiredToBoot");
+        return;
+    }
+
     constexpr std::array<std::string_view, 1> interfaces = {
         "xyz.openbmc_project.Control.TPM.Policy"};
     dbus::utility::getSubTree(
@@ -3389,7 +3411,7 @@ inline void requestRoutesSystems(App& app)
         std::optional<std::string> bootEnable;
         std::optional<std::string> bootAutomaticRetry;
         std::optional<uint32_t> bootAutomaticRetryAttempts;
-        std::optional<bool> bootTrustedModuleRequired;
+        std::optional<std::string> bootTrustedModuleRequired;
         std::optional<bool> ipsEnable;
         std::optional<uint8_t> ipsEnterUtil;
         std::optional<uint64_t> ipsEnterTime;
-- 
2.25.1

