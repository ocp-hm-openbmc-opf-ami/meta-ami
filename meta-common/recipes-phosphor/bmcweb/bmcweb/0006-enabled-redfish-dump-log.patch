diff --git a/redfish-core/lib/log_services.hpp b/redfish-core/lib/log_services.hpp
index daf1ffe2..4bb0fbc5 100644
--- a/redfish-core/lib/log_services.hpp
+++ b/redfish-core/lib/log_services.hpp
@@ -668,67 +668,113 @@ inline void deleteDumpEntry(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         "xyz.openbmc_project.Object.Delete", "Delete");
 }
 
-inline void
-    createDumpTaskCallback(task::Payload&& payload,
-                           const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-                           const uint32_t& dumpId, const std::string& dumpPath,
-                           const std::string& dumpType)
+inline void createDumpTaskCallback(
+    const crow::Request& req,
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const sdbusplus::message::object_path& createdObjPath)
 {
-    std::shared_ptr<task::TaskData> task = task::TaskData::createTask(
-        [dumpId, dumpPath,
-         dumpType](boost::system::error_code err, sdbusplus::message_t& m,
-                   const std::shared_ptr<task::TaskData>& taskData) {
-        if (err)
-        {
-            BMCWEB_LOG_ERROR << "Error in creating a dump";
-            taskData->state = "Cancelled";
-            return task::completed;
-        }
+    const std::string& dumpPath = createdObjPath.parent_path().str;
+    const std::string& dumpId = createdObjPath.filename();
 
-        dbus::utility::DBusInteracesMap interfacesList;
+    if (dumpPath.empty() || dumpId.empty())
+    {
+        BMCWEB_LOG_ERROR << "Invalid path/Id received";
+        messages::internalError(asyncResp->res);
+        return;
+    }
 
-        sdbusplus::message::object_path objPath;
+    std::string dumpEntryPath;
+    if (dumpPath == "/xyz/openbmc_project/dump/bmc/entry")
+    {
+        dumpEntryPath = "/redfish/v1/Managers/bmc"
+                        "/LogServices/Dump/Entries/" +
+                        dumpId;
+    }
+    else if (dumpPath == "/xyz/openbmc_project/dump/system/entry")
+    {
+        dumpEntryPath = "/redfish/v1/Systems/system"
+                        "/LogServices/Dump/Entries/" +
+                        dumpId;
+    }
+    else
+    {
+        BMCWEB_LOG_ERROR << "Invalid dump type received";
+        messages::internalError(asyncResp->res);
+        return;
+    }
 
-        m.read(objPath, interfacesList);
+    std::shared_ptr<task::TaskData> task = task::TaskData::createTask(
+        [createdObjPath, dumpEntryPath](
+            boost::system::error_code err, sdbusplus::message::message& m,
+            const std::shared_ptr<task::TaskData>& taskData) {
+            if (err)
+            {
+                BMCWEB_LOG_ERROR << createdObjPath.str
+                                 << ": Error in creating dump";
+                taskData->messages.emplace_back(messages::internalError());
+                return task::completed;
+            }
+            std::vector<std::pair<
+                std::string, std::vector<std::pair<
+                                 std::string, dbus::utility::DbusVariantType>>>>
+                interfacesList;
+
+            std::vector<std::pair<std::string, std::variant<std::string>>>
+                values;
+            std::string prop;
+            m.read(prop, values);
+
+            auto stateFound = std::find_if(
+                values.begin(), values.end(),
+                [](const std::pair<std::string, std::variant<std::string>>&
+                       statusProp) {
+                    if (statusProp.first == "Status")
+                    {
+                        return true;
+                    }
+                    return false;
+                });
+
+            if ((stateFound == std::end(values)) ||
+                (std::get<std::string>(stateFound->second) !=
+                 "xyz.openbmc_project.Common.Progress.OperationStatus."
+                 "Completed"))
+            {
+                BMCWEB_LOG_ERROR << createdObjPath.str
+                                 << ": Dump creation task not completed";
+                return !task::completed;
+            }
 
-        if (objPath.str ==
-            "/xyz/openbmc_project/dump/" +
-                std::string(boost::algorithm::to_lower_copy(dumpType)) +
-                "/entry/" + std::to_string(dumpId))
-        {
             nlohmann::json retMessage = messages::success();
             taskData->messages.emplace_back(retMessage);
 
-            std::string headerLoc =
-                "Location: " + dumpPath + std::to_string(dumpId);
+            std::string headerLoc = "Location: " + dumpEntryPath + "/";
             taskData->payload->httpHeaders.emplace_back(std::move(headerLoc));
 
+            BMCWEB_LOG_DEBUG << createdObjPath.str
+                             << ": Dump creation task completed";
             taskData->state = "Completed";
+            taskData->percentComplete = 100;
             return task::completed;
-        }
-        return task::completed;
         },
-        "type='signal',interface='org.freedesktop.DBus.ObjectManager',"
-        "member='InterfacesAdded', "
-        "path='/xyz/openbmc_project/dump'");
+        "type='signal',interface='org.freedesktop.DBus.Properties',"
+        "member='PropertiesChanged',path='" +
+            createdObjPath.str +
+            "',arg0='xyz.openbmc_project.Common.Progress'");
 
-    task->startTimer(std::chrono::minutes(3));
+    task->startTimer(std::chrono::minutes(20));
     task->populateResp(asyncResp->res);
-    task->payload.emplace(std::move(payload));
+    task->payload.emplace(req);
 }
 
+
 inline void createDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                        const crow::Request& req, const std::string& dumpType)
 {
-    std::string dumpPath = getDumpEntriesPath(dumpType);
-    if (dumpPath.empty())
-    {
-        messages::internalError(asyncResp->res);
-        return;
-    }
-
     std::optional<std::string> diagnosticDataType;
     std::optional<std::string> oemDiagnosticDataType;
+    std::vector<
+            std::pair<std::string, std::variant<std::string, uint64_t>>> createDumpParamVec;
 
     if (!redfish::json_util::readJsonAction(
             req, asyncResp->res, "DiagnosticDataType", diagnosticDataType,
@@ -748,14 +794,12 @@ inline void createDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                 "DiagnosticDataType & OEMDiagnosticDataType");
             return;
         }
-        if ((*oemDiagnosticDataType != "System") ||
-            (*diagnosticDataType != "OEM"))
+        if ((*diagnosticDataType != "OEM"))
         {
             BMCWEB_LOG_ERROR << "Wrong parameter values passed";
             messages::internalError(asyncResp->res);
             return;
         }
-        dumpPath = "/redfish/v1/Systems/system/LogServices/Dump/";
     }
     else if (dumpType == "BMC")
     {
@@ -774,7 +818,6 @@ inline void createDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             messages::internalError(asyncResp->res);
             return;
         }
-        dumpPath = "/redfish/v1/Managers/bmc/LogServices/Dump/";
     }
     else
     {
@@ -784,10 +827,9 @@ inline void createDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     }
 
     crow::connections::systemBus->async_method_call(
-        [asyncResp, payload(task::Payload(req)), dumpPath,
-         dumpType](const boost::system::error_code ec,
-                   const sdbusplus::message::message& msg,
-                   const uint32_t& dumpId) mutable {
+        [asyncResp, req, dumpType](const boost::system::error_code ec,
+                 const sdbusplus::message::message& msg,
+                 const sdbusplus::message::object_path& objPath) {
         if (ec)
         {
             BMCWEB_LOG_ERROR << "CreateDump resp_handler got error " << ec;
@@ -811,7 +853,7 @@ inline void createDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                     "xyz.openbmc_project.Dump.Create.Error.Disabled") ==
                 dbusError->name)
             {
-                messages::serviceDisabled(asyncResp->res, dumpPath);
+                messages::serviceDisabled(asyncResp->res, dumpType);
                 return;
             }
             if (std::string_view(
@@ -831,15 +873,13 @@ inline void createDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             messages::internalError(asyncResp->res);
             return;
         }
-        BMCWEB_LOG_DEBUG << "Dump Created. Id: " << dumpId;
-
-        createDumpTaskCallback(std::move(payload), asyncResp, dumpId, dumpPath,
-                               dumpType);
+        BMCWEB_LOG_DEBUG << "Dump Created. Path: " << objPath.str;
+        createDumpTaskCallback(req, asyncResp, objPath);
         },
         "xyz.openbmc_project.Dump.Manager",
         "/xyz/openbmc_project/dump/" +
             std::string(boost::algorithm::to_lower_copy(dumpType)),
-        "xyz.openbmc_project.Dump.Create", "CreateDump");
+        "xyz.openbmc_project.Dump.Create", "CreateDump", createDumpParamVec);
 }
 
 inline void clearDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,

