From 77f2ff7dcda86b6e932f2d1fcfa911e14f3acb67 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Thu, 29 Jun 2023 12:36:03 +0530
Subject: [PATCH 71/71] Added new property(PasswordChangeRequired) to create
 user in redish

Description:
While Creating new user we are passing new paramater PasswordChangeRequired.
By default while creating new user PasswordChangeRequired true .
NOTE: we are restricting this property for "root" user

Test Cases:

1) Get https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : root
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts",
    "@odata.type": "#ManagerAccountCollection.ManagerAccountCollection",
    "Description": "BMC User Accounts",
    "Members": [
        {
            "@odata.id": "/redfish/v1/AccountService/Accounts/root"
        }
    ],
    "Members@odata.count": 1,
    "Name": "Accounts Collection"
}

2) Post https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : root
Password : XXXX

Json Body
{
    "UserName": "ami",
    "Password": "0penBmc123",
    "RoleId": "Administrator",
    "Enabled": true,
    "PasswordChangeRequired": true
}

response 201
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The resource has been created successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Created",
            "MessageSeverity": "OK",
            "Resolution": "None."
        }
    ]
}

3) Get https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "IPMI",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "HostConsole",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "Password": null,
    "PasswordChangeRequired": true,
    "RoleId": "Administrator",
    "UserName": "ami"
}

4) Get https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : ami
Password : XXXX

response 403
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The password provided for this account must be changed before access is granted.  PATCH the Password property for this account located at the target URI '/redfish/v1/AccountService/Accounts/ami' to complete this process.",
            "MessageArgs": [
                "/redfish/v1/AccountService/Accounts/ami"
            ],
            "MessageId": "Base.1.13.0.PasswordChangeRequired",
            "MessageSeverity": "Critical",
            "Resolution": "Change the password for this account using a PATCH to the Password property at the URI provided."
        }
    ]
}

5) patch https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

Json Body

{
    "PasswordChangeRequired": false
}

response 200

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The request completed successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Success",
            "MessageSeverity": "OK",
            "Resolution": "None"
        }
    ]
}

6) Get https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "IPMI",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "HostConsole",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "Password": null,
    "PasswordChangeRequired": false,
    "RoleId": "Administrator",
    "UserName": "ami"
}

7) Patch https://{{ip}}/redfish/v1/AccountService/Accounts/root

UserName : root
Password : XXXX

Json Body

{
    "PasswordChangeRequired": true
}

or

Json Body

{
    "PasswordChangeRequired": false
}

Response 403
{
    "error": {
        "@Message.ExtendedInfo": [
            {
                "@odata.type": "#Message.v1_1_1.Message",
                "Message": "While attempting to establish a connection to '/redfish/v1/AccountService/Accounts/root', the service denied access.",
                "MessageArgs": [
                    "/redfish/v1/AccountService/Accounts/root"
                ],
                "MessageId": "Base.1.13.0.AccessDenied",
                "MessageSeverity": "Critical",
                "Resolution": "Attempt to ensure that the URI is correct and that the service has the appropriate credentials."
            }
        ],
        "code": "Base.1.13.0.AccessDenied",
        "message": "While attempting to establish a connection to '/redfish/v1/AccountService/Accounts/root', the service denied access."
    }
}
Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 redfish-core/lib/account_service.hpp | 67 +++++++++++++++++++++++-----
 1 file changed, 57 insertions(+), 10 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index d9c57706..ee7424ff 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1157,7 +1157,8 @@ inline void updateUserProperties(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
                                  std::optional<std::string> password,
                                  std::optional<bool> enabled,
                                  std::optional<std::string> roleId,
-                                 std::optional<bool> locked)
+                                 std::optional<bool> locked,
+				 std::optional<bool> passwordChangeRequired)
 {
     sdbusplus::message::object_path tempObjPath(rootUserDbusPath);
     tempObjPath /= username;
@@ -1166,7 +1167,7 @@ inline void updateUserProperties(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
     dbus::utility::checkDbusPathExists(
         dbusObjectPath,
         [dbusObjectPath, username, password(std::move(password)),
-         roleId(std::move(roleId)), enabled, locked,
+         roleId(std::move(roleId)), enabled, locked, passwordChangeRequired,
          asyncResp{std::move(asyncResp)}](int rc) {
         if (rc <= 0)
         {
@@ -1221,6 +1222,35 @@ inline void updateUserProperties(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
                 dbus::utility::DbusVariantType{*enabled});
         }
 
+	if((username == "root") && passwordChangeRequired)
+        {
+              BMCWEB_LOG_ERROR << "Not able to patch passwordChangeRequired property for root user";
+              messages::accessDenied(
+                                asyncResp->res,
+                                crow::utility::urlFromPieces(
+                                    "redfish", "v1", "AccountService",
+                                    "Accounts", username));
+
+              return;
+        }
+	else if(passwordChangeRequired)
+        {
+            crow::connections::systemBus->async_method_call(
+                [asyncResp](const boost::system::error_code ec) {
+                if (ec)
+                {
+                    BMCWEB_LOG_ERROR << "D-Bus responses error: " << ec;
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+                messages::success(asyncResp->res);
+                return;
+                },
+                "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
+                "xyz.openbmc_project.User.Manager" , "SetPasswordExpired",
+		username, *passwordChangeRequired);
+        }
+
 	if((username == "root") && roleId)
 	{
 	      BMCWEB_LOG_ERROR << "Not able to change privilage level for root user";
@@ -1751,9 +1781,11 @@ inline void handleAccountCollectionPost(
     std::string password;
     std::optional<std::string> roleId("User");
     std::optional<bool> enabled = true;
+    std::optional<bool> passwordChangeRequired = true;
     if (!json_util::readJsonPatch(req, asyncResp->res, "UserName", username,
                                   "Password", password, "RoleId", roleId,
-                                  "Enabled", enabled))
+                                  "Enabled", enabled, 
+				  "PasswordChangeRequired", passwordChangeRequired))
     {
         return;
     }
@@ -1772,7 +1804,7 @@ inline void handleAccountCollectionPost(
         "/xyz/openbmc_project/user", "xyz.openbmc_project.User.Manager",
         "AllGroups",
         [asyncResp, username, password{std::move(password)}, roleId,
-         enabled](const boost::system::error_code ec,
+         enabled, passwordChangeRequired](const boost::system::error_code ec,
                   const std::vector<std::string>& allGroupsList) {
         if (ec)
         {
@@ -1788,7 +1820,8 @@ inline void handleAccountCollectionPost(
         }
 
         crow::connections::systemBus->async_method_call(
-            [asyncResp, username, password](const boost::system::error_code ec2,
+            [asyncResp, username, password, passwordChangeRequired]
+	    (const boost::system::error_code ec2,
                                             sdbusplus::message_t& m) {
             if (ec2)
             {
@@ -1825,6 +1858,20 @@ inline void handleAccountCollectionPost(
                 return;
             }
 
+	    if ( username != "root" )
+	    {
+                crow::connections::systemBus->async_method_call(
+                    [asyncResp, passwordChangeRequired](const boost::system::error_code ec4) {
+                    if (ec4)
+                    {
+                    //    messages::internalError(asyncResp->res);
+                        return;
+                    }
+                    },
+		    "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
+		    "xyz.openbmc_project.User.Manager", "SetPasswordExpired", 
+		    username, *passwordChangeRequired);
+	    }
             messages::created(asyncResp->res);
             asyncResp->res.addHeader(
                 "Location", "/redfish/v1/AccountService/Accounts/" + username);
@@ -2083,6 +2130,7 @@ inline void
     std::optional<bool> enabled;
     std::optional<std::string> roleId;
     std::optional<bool> locked;
+    std::optional<bool> passwordChangeRequired;
 
     if (req.session == nullptr)
     {
@@ -2101,7 +2149,7 @@ inline void
         if (!json_util::readJsonPatch(req, asyncResp->res, "UserName",
                                       newUserName, "Password", password,
                                       "RoleId", roleId, "Enabled", enabled,
-                                      "Locked", locked))
+                                      "Locked", locked, "PasswordChangeRequired", passwordChangeRequired))
         {
             return;
         }
@@ -2131,14 +2179,13 @@ inline void
     if (!newUserName || (newUserName.value() == username))
     {
         updateUserProperties(asyncResp, username, password, enabled, roleId,
-                             locked);
-	messages::success(asyncResp->res);
+                             locked, passwordChangeRequired);
         return;
     }
     crow::connections::systemBus->async_method_call(
         [asyncResp, username, password(std::move(password)),
          roleId(std::move(roleId)), enabled, newUser{std::string(*newUserName)},
-         locked](const boost::system::error_code ec, sdbusplus::message_t& m) {
+         locked, passwordChangeRequired](const boost::system::error_code ec, sdbusplus::message_t& m) {
         if (ec)
         {
             userErrorMessageHandler(m.get_error(), asyncResp, newUser,
@@ -2147,7 +2194,7 @@ inline void
         }
 
         updateUserProperties(asyncResp, newUser, password, enabled, roleId,
-                             locked);
+                             locked, passwordChangeRequired);
 	messages::success(asyncResp->res);
         },
         "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
-- 
2.17.1

