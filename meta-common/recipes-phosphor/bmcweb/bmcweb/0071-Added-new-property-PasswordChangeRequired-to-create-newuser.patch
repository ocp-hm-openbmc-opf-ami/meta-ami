From 34813cebf3c483d12d919e36927d716d31cb9596 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Mon, 16 Oct 2023 11:13:55 +0530
Subject: [PATCH 71/71] Added new property(PasswordChangeRequired) to create
 user in redish

Description:
While Creating new user we are passing new paramater PasswordChangeRequired.
By default while creating new user PasswordChangeRequired is false .
NOTE: we are restricting this property for "root" user

For passwordexpire, they are restricting/ removing all privileges except ConfigureSelf in bmcweb (during Authentication).
so for all users it will have configureSelf privilage and able to access that URL with expire password users.
So we need to pass only specfic user.

1) Get https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : root
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts",
    "@odata.type": "#ManagerAccountCollection.ManagerAccountCollection",
    "Description": "BMC User Accounts",
    "Members": [
        {
            "@odata.id": "/redfish/v1/AccountService/Accounts/root"
        }
    ],
    "Members@odata.count": 1,
    "Name": "Accounts Collection"
}

2) Post https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : root
Password : XXXX

Json Body
{
    "UserName": "ami",
    "Password": "0penBmc123",
    "RoleId": "Administrator",
    "Enabled": true,
    "PasswordChangeRequired": true
}

response 201
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The resource has been created successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Created",
            "MessageSeverity": "OK",
            "Resolution": "None."
        }
    ]
}

3) Get https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "IPMI",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "HostConsole",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "Password": null,
    "PasswordChangeRequired": true,
    "RoleId": "Administrator",
    "UserName": "ami"
}

4) Get https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : ami
Password : XXXX

response 403
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The password provided for this account must be changed before access is granted.  PATCH the Password property for this account located at the target URI '/redfish/v1/AccountService/Accounts/ami' to complete this process.",
            "MessageArgs": [
                "/redfish/v1/AccountService/Accounts/ami"
            ],
            "MessageId": "Base.1.13.0.PasswordChangeRequired",
            "MessageSeverity": "Critical",
            "Resolution": "Change the password for this account using a PATCH to the Password property at the URI provided."
        }
    ]
}

5) patch https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

Json Body

{
    "PasswordChangeRequired": false
}

or

{
    "PasswordChangeRequired": true
}

response 403

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The request completed successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Success",
            "MessageSeverity": "OK",
            "Resolution": "None"
        }
    ],
    "PasswordChangeRequired@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The property PasswordChangeRequired is a read only property and cannot be assigned a value.",
            "MessageArgs": [
                "PasswordChangeRequired"
            ],
            "MessageId": "Base.1.13.0.PropertyNotWritable",
            "MessageSeverity": "Warning",
            "Resolution": "Remove the property from the request body and resubmit the request if the operation failed."
        }
    ]
}

6) Get https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "IPMI",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "HostConsole",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "Password": null,
    "PasswordChangeRequired": false,
    "RoleId": "Administrator",
    "UserName": "ami"
}

7) after passsowrd exipire
 GET : https://{{ip}}/redfish/v1/AccountService/Accounts/root
UserName: testuser
Password : xxxxx

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The password provided for this account must be changed before access is granted.  PATCH the Password property for this account located at the target URI '/redfish/v1/AccountService/Accounts/testuser' to complete this process.",
            "MessageArgs": [
                "/redfish/v1/AccountService/Accounts/testuser"
            ],
            "MessageId": "Base.1.13.0.PasswordChangeRequired",
            "MessageSeverity": "Critical",
            "Resolution": "Change the password for this account using a PATCH to the Password property at the URI provided."
        }
    ]
}

8) patch https://{{ip}}/redfish/v1/AccountService/Accounts/root

UserName : root
Password : XXXX

Body Json

{
    "RoleId": "Administrator"
}

response 403Forbidden

{
    "error": {
        "@Message.ExtendedInfo": [
            {
                "@odata.type": "#Message.v1_1_1.Message",
                "Message": "While attempting to establish a connection to 'redfish/v1/AccountService/Accounts/root', the service denied access.",
                "MessageArgs": [
                    "redfish/v1/AccountService/Accounts/root"
                ],
                "MessageId": "Base.1.13.0.AccessDenied",
                "MessageSeverity": "Critical",
                "Resolution": "Attempt to ensure that the URI is correct and that the service has the appropriate credentials."
            }
        ],
        "code": "Base.1.13.0.AccessDenied",
        "message": "While attempting to establish a connection to 'redfish/v1/AccountService/Accounts/root', the service denied access."
    }
}

Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 http/routing.hpp                              |  23 +++-
 redfish-core/include/error_messages.hpp       |  10 ++
 .../registries/base_message_registry.hpp      |  11 ++
 redfish-core/lib/account_service.hpp          | 100 ++++++++++++++----
 redfish-core/src/error_messages.cpp           |  18 ++++
 5 files changed, 138 insertions(+), 24 deletions(-)

diff --git a/http/routing.hpp b/http/routing.hpp
index f28ccb3a..77dd96b5 100644
--- a/http/routing.hpp
+++ b/http/routing.hpp
@@ -605,10 +605,10 @@ class Router
         // appear to work with the std::move on adaptor.
         validatePrivilege(
             req, asyncResp, rule,
-            [&rule, asyncResp, &adaptor](
-                Request& thisReq) mutable {
-            rule.handleUpgrade(thisReq, asyncResp, std::forward<Adaptor>(adaptor));
-            });
+            [&rule, asyncResp, &adaptor](Request& thisReq) mutable {
+            rule.handleUpgrade(thisReq, asyncResp,
+                               std::forward<Adaptor>(adaptor));
+        });
     }
 
     void handle(Request& req,
@@ -676,6 +676,21 @@ class Router
         }
         validatePrivilege(req, asyncResp, rule,
                           [&rule, asyncResp, params](Request& thisReq) mutable {
+            if (!params.empty())
+            {
+                if ((thisReq.session->isConfigureSelfOnly) &&
+                    !(thisReq.session->username == params[0]))
+                {
+                    asyncResp->res.result(
+                        boost::beast::http::status::forbidden);
+                    redfish::messages::passwordChangeRequired(
+                        asyncResp->res,
+                        boost::urls::format(
+                            "/redfish/v1/AccountService/Accounts/{}",
+                            thisReq.session->username));
+                    return;
+                }
+            }
             rule.handle(thisReq, asyncResp, params);
         });
     }
diff --git a/redfish-core/include/error_messages.hpp b/redfish-core/include/error_messages.hpp
index a3bfeb8e..aae938e0 100644
--- a/redfish-core/include/error_messages.hpp
+++ b/redfish-core/include/error_messages.hpp
@@ -1095,6 +1095,16 @@ void invalidQueryFilter(crow::Response& res);
 nlohmann::json invalidip(std::string_view arg1, std::string_view arg2);
 void invalidip(crow::Response& res, std::string_view arg1,
                std::string_view arg2);
+
+/**
+ * @brief Formats PasswordResetFailed message into JSON
+ * Message body: "Last password cannot be used to reset the redfish account
+ * password. Please change the password value and resubmit the request"
+ *
+ *  @returns Message PasswordResetFailed formatted to JSON */
+nlohmann::json passwordResetFailed();
+
+void passwordResetFailed(crow::Response& res);
 } // namespace messages
 
 } // namespace redfish
diff --git a/redfish-core/include/registries/base_message_registry.hpp b/redfish-core/include/registries/base_message_registry.hpp
index 5c96042d..e4d6a659 100644
--- a/redfish-core/include/registries/base_message_registry.hpp
+++ b/redfish-core/include/registries/base_message_registry.hpp
@@ -1321,6 +1321,16 @@ constexpr std::array registry =
 		},
 		"Provide Valid IP address",
 	}},
+    MessageEntry{
+	    "PasswordResetFailed",
+        {
+		"Indicates that we cannot use or reset the previous password for the particular user",
+		"Last password cannot be used to reset the redfish account password. Please change the password value and resubmit the request",
+		"Critical",
+		0,
+		{},
+		"Change the password value and resubmit the request",
+	}},
 
 };
 
@@ -1437,5 +1447,6 @@ enum class Index
     undeterminedFault = 108,
     unrecognizedRequestBody = 109,
     invalidip=110,
+    passwordResetFailed=111,
 };
 } // namespace redfish::registries::base
diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index ab168867..2e19f941 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1303,16 +1303,18 @@ inline void updateUserProperties(
     const std::optional<std::string>& password,
     const std::optional<bool>& enabled,
     const std::optional<std::string>& roleId, const std::optional<bool>& locked,
-    std::optional<std::vector<std::string>> accountTypes, bool userSelf)
+    std::optional<std::vector<std::string>> accountTypes, bool userSelf,
+    const std::optional<bool>& passwordChangeRequired)
 {
     sdbusplus::message::object_path tempObjPath(rootUserDbusPath);
     tempObjPath /= username;
     std::string dbusObjectPath(tempObjPath);
 
     dbus::utility::checkDbusPathExists(
-        dbusObjectPath, [dbusObjectPath, username, password, roleId, enabled,
-                         locked, accountTypes(std::move(accountTypes)),
-                         userSelf, asyncResp{std::move(asyncResp)}](int rc) {
+        dbusObjectPath,
+        [dbusObjectPath, username, password, roleId, enabled, locked,
+         accountTypes(std::move(accountTypes)), passwordChangeRequired,
+         userSelf, asyncResp{std::move(asyncResp)}](int rc) {
         if (rc <= 0)
         {
             messages::resourceNotFound(asyncResp->res, "ManagerAccount",
@@ -1320,8 +1322,22 @@ inline void updateUserProperties(
             return;
         }
 
+        if (passwordChangeRequired)
+        {
+            messages::propertyNotWritable(asyncResp->res,
+                                          "PasswordChangeRequired");
+        }
+
         if (password)
         {
+            int pamrc = pamAuthenticateUser(username, *password);
+            if ((pamrc == PAM_NEW_AUTHTOK_REQD))
+            {
+                BMCWEB_LOG_ERROR("Need to provide new Password");
+                messages::passwordResetFailed(asyncResp->res);
+                return;
+            }
+
             int retval = pamUpdatePassword(username, *password);
 
             if (retval == PAM_USER_UNKNOWN)
@@ -1363,8 +1379,16 @@ inline void updateUserProperties(
                 messages::success(asyncResp->res);
             });
         }
-
-        if (roleId)
+        if ((username == "root") && roleId)
+        {
+            BMCWEB_LOG_ERROR
+                ("Not able to change privilage level for root user");
+            const std::string& arg = "redfish/v1/AccountService/Accounts/" +
+                                     username;
+            messages::accessDenied(asyncResp->res, boost::urls::format(arg));
+            return;
+        }
+        else if (roleId)
         {
             std::string priv = getPrivilegeFromRoleId(*roleId);
             if (priv.empty())
@@ -1833,7 +1857,8 @@ inline void handleAccountCollectionGet(
 inline void processAfterCreateUser(
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     const std::string& username, const std::string& password,
-    const boost::system::error_code& ec, sdbusplus::message_t& m)
+    const boost::system::error_code& ec, sdbusplus::message_t& m,
+    std::optional<bool> passwordChangeRequired)
 {
     if (ec)
     {
@@ -1870,6 +1895,22 @@ inline void processAfterCreateUser(
         return;
     }
 
+    if (username != "root")
+    {
+        crow::connections::systemBus->async_method_call(
+            [asyncResp,
+             passwordChangeRequired](const boost::system::error_code ec4) {
+            if (ec4)
+            {
+                //    messages::internalError(asyncResp->res);
+                return;
+            }
+        },
+            "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
+            "xyz.openbmc_project.User.Manager", "SetPasswordExpired", username,
+            *passwordChangeRequired);
+    }
+
     messages::created(asyncResp->res);
     asyncResp->res.addHeader("Location",
                              "/redfish/v1/AccountService/Accounts/" + username);
@@ -1880,7 +1921,8 @@ inline void processAfterGetAllGroups(
     const std::string& username, const std::string& password,
     const std::optional<std::string>& roleId, std::optional<bool> enabled,
     std::optional<std::vector<std::string>> accountTypes,
-    const std::vector<std::string>& allGroupsList)
+    const std::vector<std::string>& allGroupsList,
+    std::optional<bool> passwordChangeRequired)
 {
     std::vector<std::string> userGroups;
     std::vector<std::string> accountTypeUserGroups;
@@ -1945,9 +1987,10 @@ inline void processAfterGetAllGroups(
     }
 
     crow::connections::systemBus->async_method_call(
-        [asyncResp, username, password](const boost::system::error_code& ec2,
-                                        sdbusplus::message_t& m) {
-        processAfterCreateUser(asyncResp, username, password, ec2, m);
+        [asyncResp, username, password, passwordChangeRequired](
+            const boost::system::error_code& ec2, sdbusplus::message_t& m) {
+        processAfterCreateUser(asyncResp, username, password, ec2, m,
+                               passwordChangeRequired);
     },
         "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
         "xyz.openbmc_project.User.Manager", "CreateUser", username, userGroups,
@@ -1967,9 +2010,11 @@ inline void handleAccountCollectionPost(
     std::optional<std::string> roleId("User");
     std::optional<bool> enabled = true;
     std::optional<std::vector<std::string>> accountTypes;
+    std::optional<bool> passwordChangeRequired = false;
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "UserName", username, "Password", password,
-            "RoleId", roleId, "Enabled", enabled, "AccountTypes", accountTypes))
+            "RoleId", roleId, "Enabled", enabled, "AccountTypes", accountTypes,
+            "PasswordChangeRequired", passwordChangeRequired))
     {
         return;
     }
@@ -1988,8 +2033,9 @@ inline void handleAccountCollectionPost(
         "/xyz/openbmc_project/user", "xyz.openbmc_project.User.Manager",
         "AllGroups",
         [asyncResp, username, password{std::move(password)}, roleId, enabled,
-         accountTypes](const boost::system::error_code& ec,
-                       const std::vector<std::string>& allGroupsList) {
+         accountTypes, passwordChangeRequired](
+            const boost::system::error_code& ec,
+            const std::vector<std::string>& allGroupsList) {
         if (ec)
         {
             BMCWEB_LOG_DEBUG("ERROR with async_method_call");
@@ -2004,7 +2050,8 @@ inline void handleAccountCollectionPost(
         }
 
         processAfterGetAllGroups(asyncResp, username, password, roleId, enabled,
-                                 accountTypes, allGroupsList);
+                                 accountTypes, allGroupsList,
+                                 passwordChangeRequired);
     });
 }
 
@@ -2221,6 +2268,14 @@ inline void
     sdbusplus::message::object_path tempObjPath(rootUserDbusPath);
     tempObjPath /= username;
     const std::string userPath(tempObjPath);
+    if (username == "root")
+    {
+        BMCWEB_LOG_DEBUG("Not able to delete root user\n");
+        const std::string& arg = "redfish/v1/AccountService/Accounts/" +
+                                 username;
+        messages::accessDenied(asyncResp->res, boost::urls::format(arg));
+        return;
+    }
 
     crow::connections::systemBus->async_method_call(
         [asyncResp, username](const boost::system::error_code& ec) {
@@ -2258,6 +2313,7 @@ inline void
     std::optional<std::string> roleId;
     std::optional<bool> locked;
     std::optional<std::vector<std::string>> accountTypes;
+    std::optional<bool> passwordChangeRequired;
 
     bool userSelf = (username == req.session->username);
 
@@ -2278,7 +2334,8 @@ inline void
         if (!json_util::readJsonPatch(
                 req, asyncResp->res, "UserName", newUserName, "Password",
                 password, "RoleId", roleId, "Enabled", enabled, "Locked",
-                locked, "AccountTypes", accountTypes))
+                locked, "AccountTypes", accountTypes, "PasswordChangeRequired",
+                passwordChangeRequired))
         {
             return;
         }
@@ -2308,14 +2365,16 @@ inline void
     if (!newUserName || (newUserName.value() == username))
     {
         updateUserProperties(asyncResp, username, password, enabled, roleId,
-                             locked, accountTypes, userSelf);
+                             locked, accountTypes, userSelf,
+                             passwordChangeRequired);
         return;
     }
     crow::connections::systemBus->async_method_call(
         [asyncResp, username, password(std::move(password)),
          roleId(std::move(roleId)), enabled, newUser{std::string(*newUserName)},
-         locked, userSelf, accountTypes(std::move(accountTypes))](
-            const boost::system::error_code& ec, sdbusplus::message_t& m) {
+         locked, userSelf, accountTypes(std::move(accountTypes)),
+         passwordChangeRequired](const boost::system::error_code& ec,
+                                 sdbusplus::message_t& m) {
         if (ec)
         {
             userErrorMessageHandler(m.get_error(), asyncResp, newUser,
@@ -2324,7 +2383,8 @@ inline void
         }
 
         updateUserProperties(asyncResp, newUser, password, enabled, roleId,
-                             locked, accountTypes, userSelf);
+                             locked, accountTypes, userSelf,
+                             passwordChangeRequired);
         messages::success(asyncResp->res);
     },
         "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
diff --git a/redfish-core/src/error_messages.cpp b/redfish-core/src/error_messages.cpp
index d152e08a..e7ca63f1 100644
--- a/redfish-core/src/error_messages.cpp
+++ b/redfish-core/src/error_messages.cpp
@@ -1894,6 +1894,24 @@ void invalidip(crow::Response& res, std::string_view arg1,
     addMessageToErrorJson(res.jsonValue, invalidip(arg1, arg2));
 }
 
+/**
+ * @internal
+ * @brief Formats passwordResetFailed message into JSON
+ *
+ * See header file for more information
+ * @endinternal
+ */
+nlohmann::json passwordResetFailed(void)
+{
+    return getLog(redfish::registries::base::Index::passwordResetFailed, {});
+}
+
+void passwordResetFailed(crow::Response& res)
+{
+    res.result(boost::beast::http::status::bad_request);
+    addMessageToErrorJson(res.jsonValue, passwordResetFailed());
+}
+
 } // namespace messages
 
 } // namespace redfish
-- 
2.34.1

