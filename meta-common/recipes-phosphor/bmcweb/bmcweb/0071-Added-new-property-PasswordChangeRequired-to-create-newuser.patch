From 01aea4a985da5d11cef80aa426534ba600d19acb Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Thu, 27 Jul 2023 19:25:25 +0530
Subject: [PATCH 71/71] Added new property(PasswordChangeRequired) to create
 user in redish

Description:
While Creating new user we are passing new paramater PasswordChangeRequired.
By default while creating new user PasswordChangeRequired is false .
NOTE: we are restricting this property for "root" user

For passwordexpire, they are restricting/ removing all privileges except ConfigureSelf in bmcweb (during Authentication).
so for all users it will have configureSelf privilage and able to access that URL with expire password users.
So we need to pass only specfic user.

Test Cases:

1) Get https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : root
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts",
    "@odata.type": "#ManagerAccountCollection.ManagerAccountCollection",
    "Description": "BMC User Accounts",
    "Members": [
        {
            "@odata.id": "/redfish/v1/AccountService/Accounts/root"
        }
    ],
    "Members@odata.count": 1,
    "Name": "Accounts Collection"
}

2) Post https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : root
Password : XXXX

Json Body
{
    "UserName": "ami",
    "Password": "0penBmc123",
    "RoleId": "Administrator",
    "Enabled": true,
    "PasswordChangeRequired": true
}

response 201
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The resource has been created successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Created",
            "MessageSeverity": "OK",
            "Resolution": "None."
        }
    ]
}

3) Get https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "IPMI",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "HostConsole",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "Password": null,
    "PasswordChangeRequired": true,
    "RoleId": "Administrator",
    "UserName": "ami"
}

4) Get https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : ami
Password : XXXX

response 403
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The password provided for this account must be changed before access is granted.  PATCH the Password property for this account located at the target URI '/redfish/v1/AccountService/Accounts/ami' to complete this process.",
            "MessageArgs": [
                "/redfish/v1/AccountService/Accounts/ami"
            ],
            "MessageId": "Base.1.13.0.PasswordChangeRequired",
            "MessageSeverity": "Critical",
            "Resolution": "Change the password for this account using a PATCH to the Password property at the URI provided."
        }
    ]
}

5) patch https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

Json Body

{
    "PasswordChangeRequired": false
}

or

{
    "PasswordChangeRequired": true
}

response 403

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The request completed successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Success",
            "MessageSeverity": "OK",
            "Resolution": "None"
        }
    ],
    "PasswordChangeRequired@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The property PasswordChangeRequired is a read only property and cannot be assigned a value.",
            "MessageArgs": [
                "PasswordChangeRequired"
            ],
            "MessageId": "Base.1.13.0.PropertyNotWritable",
            "MessageSeverity": "Warning",
            "Resolution": "Remove the property from the request body and resubmit the request if the operation failed."
        }
    ]
}

6) Get https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "IPMI",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "HostConsole",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "Password": null,
    "PasswordChangeRequired": false,
    "RoleId": "Administrator",
    "UserName": "ami"
}

7) after passsowrd exipire
 GET : https://{{ip}}/redfish/v1/AccountService/Accounts/root
UserName: testuser
Password : xxxxx

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The password provided for this account must be changed before access is granted.  PATCH the Password property for this account located at the target URI '/redfish/v1/AccountService/Accounts/testuser' to complete this process.",
            "MessageArgs": [
                "/redfish/v1/AccountService/Accounts/testuser"
            ],
            "MessageId": "Base.1.13.0.PasswordChangeRequired",
            "MessageSeverity": "Critical",
            "Resolution": "Change the password for this account using a PATCH to the Password property at the URI provided."
        }
    ]
}

Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 redfish-core/lib/account_service.hpp | 52 +++++++++++++++++++++-------
 1 file changed, 39 insertions(+), 13 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index aa0ecc3c..213f1310 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1165,7 +1165,8 @@ inline void updateUserProperties(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
                                  const std::optional<std::string>& password,
                                  const std::optional<bool>& enabled,
                                  const std::optional<std::string>& roleId,
-                                 const std::optional<bool>& locked)
+                                 const std::optional<bool>& locked,
+				 const std::optional<bool>& passwordChangeRequired)
 {
     sdbusplus::message::object_path tempObjPath(rootUserDbusPath);
     tempObjPath /= username;
@@ -1173,7 +1174,7 @@ inline void updateUserProperties(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
 
     dbus::utility::checkDbusPathExists(
         dbusObjectPath, [dbusObjectPath, username, password, roleId, enabled,
-                         locked, asyncResp{std::move(asyncResp)}](int rc) {
+                         locked, passwordChangeRequired, asyncResp{std::move(asyncResp)}](int rc) {
             if (rc <= 0)
             {
                 messages::resourceNotFound(asyncResp->res, "ManagerAccount",
@@ -1262,6 +1263,11 @@ inline void updateUserProperties(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
                     dbus::utility::DbusVariantType{priv});
             }
 
+	    if (passwordChangeRequired)
+	    {
+	         messages::propertyNotWritable(asyncResp->res, "PasswordChangeRequired");
+	    }
+
             if (locked)
             {
                 // admin can unlock the account which is locked by
@@ -1775,7 +1781,8 @@ inline void handleAccountCollectionGet(
 inline void processAfterCreateUser(
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     const std::string& username, const std::string& password,
-    const boost::system::error_code& ec, sdbusplus::message_t& m)
+    const boost::system::error_code& ec, sdbusplus::message_t& m,
+    std::optional<bool> passwordChangeRequired)
 {
     if (ec)
     {
@@ -1812,6 +1819,21 @@ inline void processAfterCreateUser(
         return;
     }
 
+    if ( username != "root" )
+    {
+         crow::connections::systemBus->async_method_call(
+             [asyncResp, passwordChangeRequired](const boost::system::error_code ec4) {
+             if (ec4)
+             {
+                  //    messages::internalError(asyncResp->res);
+                  return;
+             }
+             },
+             "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
+             "xyz.openbmc_project.User.Manager", "SetPasswordExpired",
+             username, *passwordChangeRequired);
+    }
+
     messages::created(asyncResp->res);
     asyncResp->res.addHeader("Location",
                              "/redfish/v1/AccountService/Accounts/" + username);
@@ -1821,7 +1843,7 @@ inline void processAfterGetAllGroups(
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     const std::string& username, const std::string& password,
     const std::optional<std::string>& roleId, std::optional<bool> enabled,
-    const std::vector<std::string>& allGroupsList)
+    const std::vector<std::string>& allGroupsList, std::optional<bool> passwordChangeRequired)
 
 {
     std::vector<std::string> userGroups;
@@ -1837,9 +1859,9 @@ inline void processAfterGetAllGroups(
     }
 
     crow::connections::systemBus->async_method_call(
-        [asyncResp, username, password](const boost::system::error_code& ec2,
+        [asyncResp, username, password, passwordChangeRequired](const boost::system::error_code& ec2,
                                         sdbusplus::message_t& m) {
-        processAfterCreateUser(asyncResp, username, password, ec2, m);
+        processAfterCreateUser(asyncResp, username, password, ec2, m, passwordChangeRequired);
         },
         "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
         "xyz.openbmc_project.User.Manager", "CreateUser", username, userGroups,
@@ -1858,9 +1880,11 @@ inline void handleAccountCollectionPost(
     std::string password;
     std::optional<std::string> roleId("User");
     std::optional<bool> enabled = true;
+    std::optional<bool> passwordChangeRequired = false;
     if (!json_util::readJsonPatch(req, asyncResp->res, "UserName", username,
                                   "Password", password, "RoleId", roleId,
-                                  "Enabled", enabled))
+                                  "Enabled", enabled,
+				  "PasswordChangeRequired", passwordChangeRequired))
     {
         return;
     }
@@ -1879,7 +1903,7 @@ inline void handleAccountCollectionPost(
         "/xyz/openbmc_project/user", "xyz.openbmc_project.User.Manager",
         "AllGroups",
         [asyncResp, username, password{std::move(password)}, roleId,
-         enabled](const boost::system::error_code& ec,
+         enabled, passwordChangeRequired](const boost::system::error_code& ec,
                   const std::vector<std::string>& allGroupsList) {
         if (ec)
         {
@@ -1895,7 +1919,7 @@ inline void handleAccountCollectionPost(
         }
 
         processAfterGetAllGroups(asyncResp, username, password, roleId, enabled,
-                                 allGroupsList);
+                                 allGroupsList, passwordChangeRequired);
         });
 }
 
@@ -2157,6 +2181,7 @@ inline void
     std::optional<bool> enabled;
     std::optional<std::string> roleId;
     std::optional<bool> locked;
+    std::optional<bool> passwordChangeRequired;
 
     if (req.session == nullptr)
     {
@@ -2175,7 +2200,8 @@ inline void
         if (!json_util::readJsonPatch(req, asyncResp->res, "UserName",
                                       newUserName, "Password", password,
                                       "RoleId", roleId, "Enabled", enabled,
-                                      "Locked", locked))
+                                      "Locked", locked,
+				      "PasswordChangeRequired", passwordChangeRequired))
         {
             return;
         }
@@ -2205,14 +2231,14 @@ inline void
     if (!newUserName || (newUserName.value() == username))
     {
         updateUserProperties(asyncResp, username, password, enabled, roleId,
-                             locked);
+                             locked, passwordChangeRequired);
 //	messages::success(asyncResp->res);
         return;
     }
     crow::connections::systemBus->async_method_call(
         [asyncResp, username, password(std::move(password)),
          roleId(std::move(roleId)), enabled, newUser{std::string(*newUserName)},
-         locked](const boost::system::error_code& ec, sdbusplus::message_t& m) {
+         locked, passwordChangeRequired](const boost::system::error_code& ec, sdbusplus::message_t& m) {
         if (ec)
         {
             userErrorMessageHandler(m.get_error(), asyncResp, newUser,
@@ -2221,7 +2247,7 @@ inline void
         }
 
         updateUserProperties(asyncResp, newUser, password, enabled, roleId,
-                             locked);
+                             locked, passwordChangeRequired);
 	messages::success(asyncResp->res);
         },
         "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
-- 
2.34.1

