From 23b0dcf2cad16ec4e55dffb97b9fc666d05962e8 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Thu, 25 Jan 2024 01:00:54 +0530
Subject: [PATCH] Added Media account type in redfish

Description:
 Added new media group as OEM type in Redfish Test case:

1) Create new user "ami" either redfish Post Call

a) with media
Body
{
    "UserName": "ami",
    "Password": "admin@123",
    "RoleId": "Administrator",
    "Enabled": true,
    "OEMAccountTypes": [
        "media"
    ]
}
b) with by default media enable
Body
{
    "UserName": "ami",
    "Password": "admin@123",
    "RoleId": "Administrator",
    "Enabled": true
}
c) without Media enabled
Body
{
    "UserName": "ami1",
    "Password": "admin@123",
    "RoleId": "Administrator",
    "Enabled": true,
    "OEMAccountTypes": []
}
Response 201
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The resource has been created successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Created",
            "MessageSeverity": "OK",
            "Resolution": "None."
        }
    ]
}
d) error case
Body
{
    "UserName": "ami1",
    "Password": "admin@123",
    "RoleId": "Administrator",
    "Enabled": true,
    "OEMAccountTypes": [""]
}
Response 400
{
    "OEMAccountTypes@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The value 'provided' for the property OEMAccountTypes is not in the list of acceptable values.",
            "MessageArgs": [
                "provided",
                "OEMAccountTypes"
            ],
            "MessageId": "Base.1.13.0.PropertyValueNotInList",
            "MessageSeverity": "Warning",
            "Resolution": "Choose a value from the enumeration list that the implementation can support and resubmit the request if the operation failed."
        }
    ]
}
2) Get Call
   https://x.x.x.x/redfish/v1/AccountService/Accounts/ami

Response without Media
{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami1",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "HostConsole",
        "IPMI",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami1",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "OEMAccountTypes": [],
    "Password": null,
    "PasswordChangeRequired": false,
    "RoleId": "Administrator",
    "UserName": "ami1"
}

Response With Media
{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami1",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "HostConsole",
        "IPMI",
        "OEM",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami1",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "OEMAccountTypes": [
        "media"
    ],
    "Password": null,
    "PasswordChangeRequired": false,
    "RoleId": "Administrator",
    "UserName": "ami1"
}

3) Patch to Disable media

Get Call
https://{{BMCIP}}/redfish/v1/AccountService/Accounts/ami
Body
{
    "OEMAccountTypes": []
}
Response 200
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The request completed successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Success",
            "MessageSeverity": "OK",
            "Resolution": "None"
        }
    ]
}

4) Patch Call to Enable media
https://{{BMCIP}}/redfish/v1/AccountService/Accounts/ami
Body
{
    "OEMAccountTypes": ["media"]
}

Response 200

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The request completed successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Success",
            "MessageSeverity": "OK",
            "Resolution": "None"
        }
    ]
}

5) Error case for patch call
https://{{BMCIP}}/redfish/v1/AccountService/Accounts/ami
Body
{
    "OEMAccountTypes": [""]
}
{
    "OEMAccountTypes": ["mediiaiia"]
}
Response 400
{
    "OEMAccountTypes@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The value 'provided' for the property OEMAccountTypes is not in the list of acceptable values.",
            "MessageArgs": [
                "provided",
                "OEMAccountTypes"
            ],
            "MessageId": "Base.1.13.0.PropertyValueNotInList",
            "MessageSeverity": "Warning",
            "Resolution": "Choose a value from the enumeration list that the implementation can support and resubmit the request if the operation failed."
        }
    ]
}
6) If media group is not present for user then it will through error

a) Post Call
https://{{BMCIP}}/redfish/v1/Managers/bmc/VirtualMedia/Slot_3/Actions/VirtualMedia.InsertMedia
User : ami
Pswd : admin@123

Response 401

{
    "error": {
        "@Message.ExtendedInfo": [
            {
                "@odata.type": "#Message.v1_1_1.Message",
                "Message": "While accessing the resource at '/redfish/v1/Managers/bmc/VirtualMedia/Slot_3/Actions/VirtualMedia.InsertMedia', the service received an authorization error 'Insufficient privileges to access '.",
                "MessageArgs": [
                    "/redfish/v1/Managers/bmc/VirtualMedia/Slot_3/Actions/VirtualMedia.InsertMedia",
                    "Insufficient privileges to access "
                ],
                "MessageId": "Base.1.13.0.ResourceAtUriUnauthorized",
                "MessageSeverity": "Critical",
                "Resolution": "Ensure that the appropriate access is provided for the service in order for it to access the URI."
            }
        ],
        "code": "Base.1.13.0.ResourceAtUriUnauthorized",
        "message": "While accessing the resource at '/redfish/v1/Managers/bmc/VirtualMedia/Slot_3/Actions/VirtualMedia.InsertMedia', the service received an authorization error 'Insufficient privileges to access '."
    }
}
b) Get Call
https://{{BMCIP}}/redfish/v1/Managers/bmc/VirtualMedia/Slot_3

User : ami
Pswd : admin@123
Response 403

{
    "error": {
        "@Message.ExtendedInfo": [
            {
                "@odata.type": "#Message.v1_1_1.Message",
                "Message": "There are insufficient privileges for the account or credentials associated with the current session to perform the requested operation.",
                "MessageArgs": [],
                "MessageId": "Base.1.13.0.InsufficientPrivilege",
                "MessageSeverity": "Critical",
                "Resolution": "Either abandon the operation or change the associated access rights and resubmit the request if the operation failed."
            }
        ],
        "code": "Base.1.13.0.InsufficientPrivilege",
        "message": "There are insufficient privileges for the account or credentials associated with the current session to perform the requested operation."
    }
}
NOTE:
1) This is not applicable for root user
2) The Default value will be False for ReadOnly, Operator and true for Admin if we are not provided Media in Json Body.

Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 include/nbd_proxy.hpp                         |   2 +-
 .../include/registries/privilege_registry.hpp |  16 +-
 redfish-core/lib/account_service.hpp          | 150 ++++++++++++++++--
 redfish-core/lib/virtual_media.hpp            |  60 ++++++-
 4 files changed, 205 insertions(+), 23 deletions(-)

diff --git a/include/nbd_proxy.hpp b/include/nbd_proxy.hpp
index 40f23641..949c4f7d 100644
--- a/include/nbd_proxy.hpp
+++ b/include/nbd_proxy.hpp
@@ -396,7 +396,7 @@ inline void requestRoutes(App& app)
 {
     BMCWEB_ROUTE(app, "/nbd/<str>")
         .websocket()
-        .privileges(redfish::privileges::privilegeSetConfigureManager)
+        .privileges(redfish::privileges::privilegeSetLoginConfigureManager)
         .onopen(onOpen)
         .onclose(onClose)
         .onmessageex(onMessage);
diff --git a/redfish-core/include/registries/privilege_registry.hpp b/redfish-core/include/registries/privilege_registry.hpp
index d6f6dfc2..d5facd70 100644
--- a/redfish-core/include/registries/privilege_registry.hpp
+++ b/redfish-core/include/registries/privilege_registry.hpp
@@ -29,6 +29,10 @@ const std::array<Privileges, 1> privilegeSetConfigureUsers = {{
 const std::array<Privileges, 1> privilegeSetConfigureManager = {{
     {"ConfigureManager"}
 }};
+const std::array<Privileges, 2> privilegeSetLoginConfigureManager = {{
+    {"ConfigureManager"},
+    {"Login"}
+}};
 const std::array<Privileges, 2> privilegeSetConfigureManagerOrConfigureComponents = {{
     {"ConfigureManager"},
     {"ConfigureComponents"}
@@ -1584,10 +1588,14 @@ const static auto& postVLanNetworkInterfaceCollection = privilegeSetConfigureMan
 // VirtualMedia
 const static auto& getVirtualMedia = privilegeSetLogin;
 const static auto& headVirtualMedia = privilegeSetLogin;
-const static auto& patchVirtualMedia = privilegeSetConfigureManager;
-const static auto& putVirtualMedia = privilegeSetConfigureManager;
-const static auto& deleteVirtualMedia = privilegeSetConfigureManager;
-const static auto& postVirtualMedia = privilegeSetConfigureManager;
+// const static auto& patchVirtualMedia = privilegeSetConfigureManager;
+// const static auto& putVirtualMedia = privilegeSetConfigureManager;
+// const static auto& deleteVirtualMedia = privilegeSetConfigureManager;
+// const static auto& postVirtualMedia = privilegeSetConfigureManager;
+const static auto& patchVirtualMedia = privilegeSetLoginConfigureManager; // Added to Vmedia for OEM Extended 
+const static auto& putVirtualMedia = privilegeSetLoginConfigureManager;
+const static auto& deleteVirtualMedia = privilegeSetLoginConfigureManager;
+const static auto& postVirtualMedia = privilegeSetLoginConfigureManager;
 
 // VirtualMediaCollection
 const static auto& getVirtualMediaCollection = privilegeSetLogin;
diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index 375cfbf6..e2a3704c 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -121,6 +121,7 @@ inline bool translateUserGroup(const std::vector<std::string>& userGroups,
                                crow::Response& res)
 {
     std::vector<std::string> accountTypes;
+    std::vector<std::string> oemAccountTypes;
     for (const auto& userGroup : userGroups)
     {
         if (userGroup == "redfish")
@@ -151,6 +152,11 @@ inline bool translateUserGroup(const std::vector<std::string>& userGroups,
             // 'redfish' user group is mapped to 'Redfish'and 'WebUI'
             // AccountTypes, so do nothing here...
         }
+        else if (userGroup == "media")
+        {
+            accountTypes.emplace_back("OEM");
+            oemAccountTypes.emplace_back(userGroup);
+        }
         else
         {
             // Invalid user group name. Caller throws an excption.
@@ -159,6 +165,7 @@ inline bool translateUserGroup(const std::vector<std::string>& userGroups,
     }
 
     res.jsonValue["AccountTypes"] = std::move(accountTypes);
+    res.jsonValue["OEMAccountTypes"] = std::move(oemAccountTypes);
     return true;
 }
 
@@ -202,6 +209,10 @@ inline bool
         {
             userGroups.emplace_back("ssh");
         }
+        else if (accountType == "media")
+        {
+            userGroups.emplace_back("OEM");
+        }
         else
         {
             // Invalid Account Type
@@ -1311,13 +1322,36 @@ inline void handleLDAPPatch(nlohmann::json& input,
     });
 }
 
+inline void
+    setOEMAccountTypes(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                       const std::vector<std::string>& grpList,
+                       const std::string& dbusObjectPath)
+{
+    crow::connections::systemBus->async_method_call(
+        [asyncResp](const boost::system::error_code& ec) {
+        if (ec)
+        {
+            BMCWEB_LOG_DEBUG("D-Bus responses error: ", ec);
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        messages::success(asyncResp->res);
+        return;
+    },
+        "xyz.openbmc_project.User.Manager", dbusObjectPath,
+        "org.freedesktop.DBus.Properties", "Set",
+        "xyz.openbmc_project.User.Attributes", "UserGroups",
+        dbus::utility::DbusVariantType{grpList});
+}
+
 inline void updateUserProperties(
     std::shared_ptr<bmcweb::AsyncResp> asyncResp, const std::string& username,
     const std::optional<std::string>& password,
     const std::optional<bool>& enabled,
     const std::optional<std::string>& roleId, const std::optional<bool>& locked,
     std::optional<std::vector<std::string>> accountTypes, bool userSelf,
-    const std::optional<bool>& passwordChangeRequired)
+    const std::optional<bool>& passwordChangeRequired,
+    const std::optional<std::vector<std::string>>& oemAccountTypes)
 {
     sdbusplus::message::object_path tempObjPath(rootUserDbusPath);
     tempObjPath /= username;
@@ -1327,7 +1361,7 @@ inline void updateUserProperties(
         dbusObjectPath,
         [dbusObjectPath, username, password, roleId, enabled, locked,
          accountTypes(std::move(accountTypes)), passwordChangeRequired,
-         userSelf, asyncResp{std::move(asyncResp)}](int rc) {
+         userSelf, oemAccountTypes, asyncResp{std::move(asyncResp)}](int rc) {
         if (rc <= 0)
         {
             messages::resourceNotFound(asyncResp->res, "ManagerAccount",
@@ -1459,6 +1493,60 @@ inline void updateUserProperties(
             patchAccountTypes(*accountTypes, asyncResp, dbusObjectPath,
                               userSelf);
         }
+
+        if ((username == "root") && oemAccountTypes)
+        {
+            BMCWEB_LOG_ERROR(
+                "Not able to change oemAccountTypes for root user");
+            const std::string& arg = "redfish/v1/AccountService/Accounts/" +
+                                     username;
+            messages::accessDenied(asyncResp->res, boost::urls::format(arg));
+            return;
+        }
+        else if (oemAccountTypes)
+        {
+            sdbusplus::asio::getProperty<std::vector<std::string>>(
+                *crow::connections::systemBus,
+                "xyz.openbmc_project.User.Manager", dbusObjectPath,
+                "xyz.openbmc_project.User.Attributes", "UserGroups",
+                [asyncResp, oemAccountTypes,
+                 dbusObjectPath](const boost::system::error_code& ec,
+                                 const std::vector<std::string>& list) {
+                if (ec)
+                {
+                    return;
+                }
+                std::vector<std::string> grpList = list;
+                if (std::find(oemAccountTypes->begin(), oemAccountTypes->end(),
+                              "media") != oemAccountTypes->end()) // media found
+                {
+                    if (std::find(grpList.begin(), grpList.end(), "media") ==
+                        grpList.end()) // media not found
+                    {
+                        grpList.push_back("media");
+                    }
+                    setOEMAccountTypes(asyncResp, grpList, dbusObjectPath);
+                }
+                else if (oemAccountTypes->empty())
+                {
+                    if (std::find(grpList.begin(), grpList.end(), "media") !=
+                        grpList.end()) // media found
+                    {
+                        auto itr = std::find(grpList.begin(), grpList.end(),
+                                             "media");
+                        if (itr != grpList.end())
+                            grpList.erase(itr);
+                    }
+                    setOEMAccountTypes(asyncResp, grpList, dbusObjectPath);
+                }
+                else
+                {
+                    messages::propertyValueNotInList(asyncResp->res, "provided",
+                                                     "OEMAccountTypes");
+                    return;
+                }
+            });
+        }
     });
 }
 
@@ -1946,7 +2034,7 @@ inline void processAfterGetAllGroups(
     const std::string& roleId, bool enabled,
     std::optional<std::vector<std::string>> accountTypes,
     const std::vector<std::string>& allGroupsList,
-    std::optional<bool> passwordChangeRequired)
+    std::optional<bool> passwordChangeRequired, std::optional<bool> media)
 {
     std::vector<std::string> userGroups;
     std::vector<std::string> accountTypeUserGroups;
@@ -1998,7 +2086,8 @@ inline void processAfterGetAllGroups(
             }
             continue;
         }
-        userGroups.emplace_back(grp);
+        if ((grp != "media") || (media == true)) // Checking media is enabled
+            userGroups.emplace_back(grp);
     }
 
     // Make sure user specified groups are valid. This is internal error because
@@ -2034,10 +2123,13 @@ inline void handleAccountCollectionPost(
     std::optional<bool> enabledJson;
     std::optional<std::vector<std::string>> accountTypes;
     std::optional<bool> passwordChangeRequired = false;
+    std::optional<bool> media;
+    std::optional<std::vector<std::string>> oemAccountTypes;
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "UserName", username, "Password", password,
             "RoleId", roleIdJson, "Enabled", enabledJson, "AccountTypes",
-            accountTypes, "PasswordChangeRequired", passwordChangeRequired))
+            accountTypes, "PasswordChangeRequired", passwordChangeRequired,
+            "OEMAccountTypes", oemAccountTypes))
     {
         return;
     }
@@ -2052,6 +2144,35 @@ inline void handleAccountCollectionPost(
     roleId = priv;
 
     bool enabled = enabledJson.value_or(true);
+    if (oemAccountTypes)
+    {
+        if (oemAccountTypes->empty()) // Media is Disable Case
+        {
+            media = false;
+        }
+        else // Media is Enabled Case
+        {
+            if (std::find(oemAccountTypes->begin(), oemAccountTypes->end(),
+                          "media") != oemAccountTypes->end())
+            {
+                media = true;
+            }
+            else
+            {
+                messages::propertyValueNotInList(asyncResp->res, "provided",
+                                                 "OEMAccountTypes");
+                return;
+            }
+        }
+    }
+    else if ((!oemAccountTypes) && (roleId == "priv-admin"))
+    {
+        media = true; // Default value for Admin
+    }
+    else
+    {
+        media = false; // Default value for Readonly, Operator.
+    }
 
     // Reading AllGroups property
     sdbusplus::asio::getProperty<std::vector<std::string>>(
@@ -2059,9 +2180,9 @@ inline void handleAccountCollectionPost(
         "/xyz/openbmc_project/user", "xyz.openbmc_project.User.Manager",
         "AllGroups",
         [asyncResp, username, password{std::move(password)}, roleId, enabled,
-         accountTypes, passwordChangeRequired](
-            const boost::system::error_code& ec,
-            const std::vector<std::string>& allGroupsList) {
+         accountTypes, passwordChangeRequired,
+         media](const boost::system::error_code& ec,
+                const std::vector<std::string>& allGroupsList) {
         if (ec)
         {
             BMCWEB_LOG_DEBUG("ERROR with async_method_call");
@@ -2077,7 +2198,7 @@ inline void handleAccountCollectionPost(
 
         processAfterGetAllGroups(asyncResp, username, password, roleId, enabled,
                                  accountTypes, allGroupsList,
-                                 passwordChangeRequired);
+                                 passwordChangeRequired, media);
     });
 }
 
@@ -2340,6 +2461,7 @@ inline void
     std::optional<bool> locked;
     std::optional<std::vector<std::string>> accountTypes;
     std::optional<bool> passwordChangeRequired;
+    std::optional<std::vector<std::string>> oemAccountTypes;
 
     bool userSelf = (username == req.session->username);
 
@@ -2361,7 +2483,7 @@ inline void
                 req, asyncResp->res, "UserName", newUserName, "Password",
                 password, "RoleId", roleId, "Enabled", enabled, "Locked",
                 locked, "AccountTypes", accountTypes, "PasswordChangeRequired",
-                passwordChangeRequired))
+                passwordChangeRequired, "OEMAccountTypes", oemAccountTypes))
         {
             return;
         }
@@ -2392,15 +2514,15 @@ inline void
     {
         updateUserProperties(asyncResp, username, password, enabled, roleId,
                              locked, accountTypes, userSelf,
-                             passwordChangeRequired);
+                             passwordChangeRequired, oemAccountTypes);
         return;
     }
     crow::connections::systemBus->async_method_call(
         [asyncResp, username, password(std::move(password)),
          roleId(std::move(roleId)), enabled, newUser{std::string(*newUserName)},
          locked, userSelf, accountTypes(std::move(accountTypes)),
-         passwordChangeRequired](const boost::system::error_code& ec,
-                                 sdbusplus::message_t& m) {
+         passwordChangeRequired, oemAccountTypes](
+            const boost::system::error_code& ec, sdbusplus::message_t& m) {
         if (ec)
         {
             userErrorMessageHandler(m.get_error(), asyncResp, newUser,
@@ -2410,7 +2532,7 @@ inline void
 
         updateUserProperties(asyncResp, newUser, password, enabled, roleId,
                              locked, accountTypes, userSelf,
-                             passwordChangeRequired);
+                             passwordChangeRequired, oemAccountTypes);
         messages::success(asyncResp->res);
     },
         "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
diff --git a/redfish-core/lib/virtual_media.hpp b/redfish-core/lib/virtual_media.hpp
index a80ef520..8a9e708d 100644
--- a/redfish-core/lib/virtual_media.hpp
+++ b/redfish-core/lib/virtual_media.hpp
@@ -149,7 +149,7 @@ inline void
  */
 void findItemAndRunHandler(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
                            const std::string& name, const std::string& resName,
-                           CheckItemHandler&& handler)
+                           CheckItemHandler&& handler, const crow::Request& req)
 {
     if (name != "bmc")
     {
@@ -158,6 +158,18 @@ void findItemAndRunHandler(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
 
         return;
     }
+    if (req.session->username != "root")
+    {
+        auto result = find(req.session->userGroups.begin(),
+                           req.session->userGroups.end(), "media");
+        if (result == end(req.session->userGroups))
+        {
+            BMCWEB_LOG_ERROR("Unable to get access ");
+            messages::resourceAtUriUnauthorized(
+                aResp->res, req.url(), "Insufficient privileges to access ");
+            return;
+        }
+    }
 
     crow::connections::systemBus->async_method_call(
         [aResp, resName, handler = std::move(handler)](
@@ -927,6 +939,19 @@ inline void handleManagersVirtualMediaActionInsertPost(
 
         return;
     }
+    if (req.session->username != "root")
+    {
+        auto result = find(req.session->userGroups.begin(),
+                           req.session->userGroups.end(), "media");
+        if (result == end(req.session->userGroups))
+        {
+            BMCWEB_LOG_ERROR("Unable to get access ");
+            messages::resourceAtUriUnauthorized(
+                asyncResp->res, req.url(),
+                "Insufficient privileges to access ");
+            return;
+        }
+    }
     InsertMediaActionParams actionParams;
 
     // Read obligatory parameters (url of image)
@@ -1006,6 +1031,19 @@ inline void handleManagersVirtualMediaActionEject(
 
         return;
     }
+    if (req.session->username != "root")
+    {
+        auto result = find(req.session->userGroups.begin(),
+                           req.session->userGroups.end(), "media");
+        if (result == end(req.session->userGroups))
+        {
+            BMCWEB_LOG_ERROR("Unable to get access ");
+            messages::resourceAtUriUnauthorized(
+                asyncResp->res, req.url(),
+                "Insufficient privileges to access ");
+            return;
+        }
+    }
 
     dbus::utility::getDbusObject(
         "/xyz/openbmc_project/VirtualMedia", {},
@@ -1107,6 +1145,17 @@ inline void
 
         return;
     }
+    if (req.session->username != "root")
+    {
+        auto result = find(req.session->userGroups.begin(),
+                           req.session->userGroups.end(), "media");
+        if (result == end(req.session->userGroups))
+        {
+            BMCWEB_LOG_ERROR("Unable to get access ");
+            messages::insufficientPrivilege(asyncResp->res);
+            return;
+        }
+    }
 
     dbus::utility::getDbusObject(
         "/xyz/openbmc_project/VirtualMedia", {},
@@ -1163,7 +1212,8 @@ inline void requestNBDVirtualMediaRoutes(App& app)
             []([[maybe_unused]] const crow::Request& req,
                const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                const std::string& name, const std::string& resName) {
-        findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode);
+        findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode,
+                              req);
     });
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/<str>/VirtualMedia/<str>/Actions/"
                       "VirtualMedia.InsertMedia")
@@ -1172,7 +1222,8 @@ inline void requestNBDVirtualMediaRoutes(App& app)
             []([[maybe_unused]] const crow::Request& req,
                const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                const std::string& name, const std::string& resName) {
-        findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode);
+        findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode,
+                              req);
     });
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/<str>/VirtualMedia/<str>/Actions/"
                       "VirtualMedia.InsertMedia")
@@ -1181,7 +1232,8 @@ inline void requestNBDVirtualMediaRoutes(App& app)
             []([[maybe_unused]] const crow::Request& req,
                const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                const std::string& name, const std::string& resName) {
-        findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode);
+        findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode,
+                              req);
     });
     BMCWEB_ROUTE(
         app,
-- 
2.34.1

