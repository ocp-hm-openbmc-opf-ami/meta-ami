From 8358a4e549245297900302da354732c6013b0c31 Mon Sep 17 00:00:00 2001
From: vamsikrishnak <vamsikrishnak@ami.com>
Date: Fri, 13 Oct 2023 14:48:56 +0530
Subject: [PATCH] Added SessionType as Redfish for Created Redfish Session

Desccription:
   Added proper sessionType value in Redfish

Tested:

redfishtool raw -r 10.0.99.242:443 -u root -p 0penBmc -S Always POST /redfish/v1/SessionService/Sessions --data='{"UserName":"root","Password":"0penBmc"}'
{
    "@odata.id": "/redfish/v1/SessionService/Sessions/buIeaUyvwM",
    "@odata.type": "#Session.v1_5_0.Session",
    "ClientOriginIPAddress": "10.0.136.80",
    "Description": "Manager User Session",
    "Id": "buIeaUyvwM",
    "Name": "User Session",
    "Oem": {
        "AMI_WebSession": {
            "@odata.id": "/redfish/v1/SessionService/Sessions/buIeaUyvwM#/Oem/AMI_WebSession",
            "@odata.type": "#AMIWebSession.v1_0_0.WebSession",
            "KvmActive": false,
            "VmActive": [
                false,
                false
            ]
        }
    },
    "SessionType": "Redfish",
    "UserName": "root"
}

Signed-off-by: vamsikrishnak <vamsikrishnak@ami.com>
---
 include/sessions.hpp                  | 4 +++-
 redfish-core/lib/redfish_sessions.hpp | 2 ++
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/include/sessions.hpp b/include/sessions.hpp
index cb7f78e..69249a2 100644
--- a/include/sessions.hpp
+++ b/include/sessions.hpp
@@ -37,6 +37,7 @@ struct UserSession
     std::string csrfToken;
     std::optional<std::string> clientId;
     std::string clientIp;
+    std::string sessionType;
     std::chrono::time_point<std::chrono::steady_clock> lastUpdated;
     PersistenceType persistence{PersistenceType::TIMEOUT};
     bool cookieAuth = false;
@@ -256,9 +257,10 @@ class SessionStore
             }
         }
 
+        std::string sessionType = "WebUI";
         auto session = std::make_shared<UserSession>(UserSession{
             uniqueId, sessionToken, std::string(username), csrfToken, clientId,
-            redfish::ip_util::toString(clientIp),
+            redfish::ip_util::toString(clientIp), sessionType,
             std::chrono::steady_clock::now(), persistence, false,
             isConfigureSelfOnly});
         auto it = authTokens.emplace(sessionToken, session);
diff --git a/redfish-core/lib/redfish_sessions.hpp b/redfish-core/lib/redfish_sessions.hpp
index a4d71da..356d1fd 100644
--- a/redfish-core/lib/redfish_sessions.hpp
+++ b/redfish-core/lib/redfish_sessions.hpp
@@ -40,6 +40,7 @@ inline void fillSessionObject(crow::Response& res,
     res.jsonValue["Name"] = "User Session";
     res.jsonValue["Description"] = "Manager User Session";
     res.jsonValue["ClientOriginIPAddress"] = session.clientIp;
+    res.jsonValue["SessionType"] = session.sessionType;
     if (session.clientId)
     {
         res.jsonValue["Context"] = *session.clientId;
@@ -434,6 +435,7 @@ inline void handleSessionCollectionPost(
     else
     {
         asyncResp->res.result(boost::beast::http::status::created);
+        session->sessionType = "Redfish";
         fillSessionObject(asyncResp->res, *session);
     }
 }
-- 
2.9.5

