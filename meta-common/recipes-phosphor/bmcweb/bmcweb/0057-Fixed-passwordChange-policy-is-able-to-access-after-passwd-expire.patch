From d17291ed60343d99b71e011ac43a2bd9090a2316 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Thu, 22 Jun 2023 15:37:10 +0530
Subject: [PATCH 57/57] Fixed passwordChange policy is able to access after
 pswd exipre

Description:

EIP 748313 - [OT0.2][Archercity]After password expire of created user, able to get the Account/root(default)

[Root-Cause]:

For passwordexpire, they are restricting/ removing all privileges except ConfigureSelf in bmcweb (during Authentication).
so for all users it will have configureSelf privilage and able to access that URL with expire password users.
So we need to pass only specfic user.

[Resolution] ;

Added condition before calling the particular URL.

Test Case:

1) GET : https://{{ip}}/redfish/v1/AccountService/Accounts

UserName: testuser
Password : xxxxx
{
    "@odata.id": "/redfish/v1/AccountService/Accounts",
    "@odata.type": "#ManagerAccountCollection.ManagerAccountCollection",
    "Description": "BMC User Accounts",
    "Members": [
        {
            "@odata.id": "/redfish/v1/AccountService/Accounts/testuser"
        },
        {
            "@odata.id": "/redfish/v1/AccountService/Accounts/root"
        }
    ],
    "Members@odata.count": 2,
    "Name": "Accounts Collection"
}

2)  GET : https://{{ip}}/redfish/v1/AccountService/Accounts/testuser
UserName: testuser
Password : xxxxx

{
    "@odata.id": "/redfish/v1/AccountService/Accounts/testuser",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "IPMI",
        "Redfish",
        "WebUI",
        "HostConsole",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "testuser",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "Password": null,
    "PasswordChangeRequired": false,
    "RoleId": "Administrator",
    "UserName": "testuser"
}

3) expire the testuser password using passwd in BMC console
   passwd --expire testuser

4)  GET : https://{{ip}}/redfish/v1/AccountService/Accounts/testuser
UserName: testuser
Password : xxxxx

{
    "@odata.id": "/redfish/v1/AccountService/Accounts/testuser",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "IPMI",
        "Redfish",
        "WebUI",
        "HostConsole",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "testuser",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "Password": null,
    "PasswordChangeRequired": true,
    "RoleId": "Administrator",
    "UserName": "testuser"
}

5) GET : https://{{ip}}/redfish/v1/AccountService/Accounts/root
UserName: testuser
Password : xxxxx

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The password provided for this account must be changed before access is granted.  PATCH the Password property for this account located at the target URI '/redfish/v1/AccountService/Accounts/testuser' to complete this process.",
            "MessageArgs": [
                "/redfish/v1/AccountService/Accounts/testuser"
            ],
            "MessageId": "Base.1.13.0.PasswordChangeRequired",
            "MessageSeverity": "Critical",
            "Resolution": "Change the password for this account using a PATCH to the Password property at the URI provided."
        }
    ]
}

Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 http/routing.hpp | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/http/routing.hpp b/http/routing.hpp
index 21ff1b86..330a56c9 100644
--- a/http/routing.hpp
+++ b/http/routing.hpp
@@ -1587,6 +1587,21 @@ class Router
         authorizeUser(req, asyncResp, foundRoute.route.rule,
                       [&req, asyncResp, rule(foundRoute.route.rule),
                        routingParam(params)]() {
+	 if (!routingParam.stringParams.empty())
+	 {
+		if ((req.session->isConfigureSelfOnly) && !(req.session->username == routingParam.stringParams[0]))
+		{
+			asyncResp->res.result(boost::beast::http::status::forbidden);
+			if (req.session->isConfigureSelfOnly)
+			{
+				redfish::messages::passwordChangeRequired(
+					asyncResp->res, crow::utility::urlFromPieces(
+					"redfish", "v1", "AccountService",
+					"Accounts", req.session->username));
+			}
+			return;
+		}
+	 }
             rule->handle(req, asyncResp, routingParam);
         });
     }
-- 
2.17.1

