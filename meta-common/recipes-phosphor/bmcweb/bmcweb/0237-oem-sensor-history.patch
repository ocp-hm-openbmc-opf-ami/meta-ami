From 8939db546974af0a72837e2029b1a0f983c22484 Mon Sep 17 00:00:00 2001
From: Nibin Chacko <nibinc@ami.com>
Date: Tue, 23 Apr 2024 02:56:59 -0400
Subject: [PATCH 237/237] oem sensor history

---
 redfish-core/include/redfish.hpp              |   1 +
 redfish-core/lib/sensors.hpp                  | 212 ++++++++++++++++++
 static/redfish/v1/$metadata/index.xml         |   4 +
 .../JsonSchemas/OemSensorHistory/index.json   |  65 ++++++
 .../redfish/v1/schema/OemSensorHistory_V1.xml |  60 +++++
 5 files changed, 342 insertions(+)
 create mode 100644 static/redfish/v1/JsonSchemas/OemSensorHistory/index.json
 create mode 100644 static/redfish/v1/schema/OemSensorHistory_V1.xml

diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index 3a1daf0f..6fea1d7e 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -312,6 +312,7 @@ class RedfishService
         requestRoutesSensorCollection(app);
         requestRoutesSensor(app);
         requestRoutesSensorPatching(app);
+	requestRoutesSensorHistory(app);
 
         requestRoutesCupsService(app);
         requestRoutesCupsSensors(app);
diff --git a/redfish-core/lib/sensors.hpp b/redfish-core/lib/sensors.hpp
index 3d18be9e..5aa9dd65 100644
--- a/redfish-core/lib/sensors.hpp
+++ b/redfish-core/lib/sensors.hpp
@@ -3287,6 +3287,33 @@ inline void
     });
 }
 
+inline bool valideSensorWithConfFile(const std::string& sensorId)
+{
+    std::ifstream inputFile("/etc/sensor-reader/configuredsensors");
+    if (inputFile.is_open())
+    {
+	std::string sensorNameSearch,fileLine;
+	size_t pos = sensorId.find('_');
+	if (pos != std::string::npos)
+	{
+	  sensorNameSearch = sensorId.substr(pos + 1);
+	  bool found = false;
+	  while (std::getline(inputFile, fileLine))
+	  {
+	     if (fileLine.find(sensorNameSearch) != std::string::npos)
+	     {
+		     found = true;
+		     break;
+	     }
+	  }
+	  inputFile.close();
+      return found;
+    }
+    inputFile.close();
+    }
+    return false;
+}
+
 inline void handleSensorGet(App& app, const crow::Request& req,
                             const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                             const std::string& chassisId,
@@ -3306,6 +3333,12 @@ inline void handleSensorGet(App& app, const crow::Request& req,
 
     asyncResp->res.jsonValue["@odata.id"] = boost::urls::format(
         "/redfish/v1/Chassis/{}/Sensors/{}", chassisId, sensorId);
+    if(valideSensorWithConfFile(sensorId))
+    {
+        asyncResp->res.jsonValue["Oem"]["Ami"]["@odata.id"] = boost::urls::format(
+            "/redfish/v1/Chassis/{}/Sensors/{}/Oem/SensorHistory", chassisId,
+            sensorId);
+    }
 
     BMCWEB_LOG_DEBUG("Sensor doGet enter");
 
@@ -3340,6 +3373,170 @@ inline void handleSensorGet(App& app, const crow::Request& req,
     });
 }
 
+inline void
+    handleSensorHistoryGet(App& app, const crow::Request& req,
+                           const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                           const std::string& chassisId,
+                           const std::string& sensorId)
+{
+    if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+    {
+        return;
+    }
+    if(!valideSensorWithConfFile(sensorId))
+    {
+       messages::resourceNotFound(asyncResp->res, sensorId, "Sensor");
+       return;
+    }
+    std::pair<std::string, std::string> nameType =
+        splitSensorNameAndType(sensorId);
+    if (nameType.first.empty() || nameType.second.empty())
+    {
+        messages::resourceNotFound(asyncResp->res, sensorId, "Sensor");
+        return;
+    }
+    std::string sensorName = nameType.second;
+    std::replace(sensorName.begin(), sensorName.end(), '_', ' ');
+    asyncResp->res.jsonValue["@odata.id"] = boost::urls::format(
+        "/redfish/v1/Chassis/{}/Sensors/{}/Oem/SensorHistory", chassisId,
+        sensorId);
+
+    asyncResp->res.jsonValue = {
+        {"@odata.type", "#SensorHistory.v1_0_0.SensorHistory"},
+        {"@odata.id", "/redfish/v1/Chassis/" + chassisId + "/" + "Sensors/" +
+                          sensorId + "/Oem/SensorHistory"},
+        {"Id", sensorId + " Sensor History"},
+        {"Name", sensorName},
+        {"SensorName", sensorName}};
+
+    crow::connections::systemBus->async_method_call(
+        [asyncResp](
+            const boost::system::error_code ec,
+            const std::vector<std::pair<std::string, std::variant<uint64_t>>>&
+                propertiesList) {
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+            BMCWEB_LOG_ERROR("Sensor patchSensorHistory Interval Dbus error {}",
+                             ec);
+            return;
+        }
+
+        for (const std::pair<std::string, std::variant<uint64_t>>& property :
+             propertiesList)
+        {
+            const std::string& propertyName = property.first;
+            if ((propertyName.find("Interval") != std::string::npos) ||
+                (propertyName.find("TimeFrame") != std::string::npos))
+            {
+                const uint64_t* value = std::get_if<uint64_t>(&property.second);
+                if (value != nullptr)
+                {
+                    asyncResp->res.jsonValue[propertyName] = *value;
+                }
+            }
+        }
+    },
+        "xyz.openbmc_project.SensorReader",
+        "/xyz/openbmc_project/SensorReader/History",
+        "org.freedesktop.DBus.Properties", "GetAll",
+        "xyz.openbmc_project.SensorReader.History.Read");
+
+    crow::connections::systemBus->async_method_call(
+        [asyncResp, chassisId, sensorId](
+            const boost::system::error_code ec,
+            const std::vector<std::pair<uint64_t, double>>& historyResp) {
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+            BMCWEB_LOG_ERROR("Sensor patchSensorHistory Interval Dbus error {}",
+                             ec);
+            return;
+        }
+
+        nlohmann::json& historyArray =
+            asyncResp->res.jsonValue["SensorReadings"];
+        uint16_t sensorCount = 0;
+        for (const std::pair<uint64_t, double>& property : historyResp)
+        {
+            const uint64_t time = property.first;
+            const double value = property.second;
+
+            nlohmann::json historyItem;
+            historyItem["@odata.id"] =
+                "/redfish/v1/Chassis/" + chassisId + "/" + "Sensors/" +
+                sensorId + "/Oem/SensorHistory" + "#/SensorReadings/" +
+                std::to_string(sensorCount++);
+            historyItem["@odata.type"] = "#OemSensorHistory.v1_0_0";
+            historyItem["Time"] = time;
+            historyItem["Value"] = value;
+            historyArray.push_back(historyItem);
+        }
+        asyncResp->res.jsonValue["SensorReadingsCount"] = sensorCount;
+    },
+        "xyz.openbmc_project.SensorReader",
+        "/xyz/openbmc_project/SensorReader/History",
+        "xyz.openbmc_project.SensorReader.History.Read", "Read",
+        (nameType.second));
+}
+inline void handleSensorHistorypatch(
+    App& app, const crow::Request& req,
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const std::string& chassisId, const std::string& sensorId)
+{
+    if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+    {
+        return;
+    }
+    if(!valideSensorWithConfFile(sensorId))
+    {
+       messages::resourceNotFound(asyncResp->res, sensorId, "Sensor");
+       return;
+    }
+    BMCWEB_LOG_DEBUG("Handling sensor history for Chassis ID: {} Sensor ID:",
+                     chassisId, sensorId);
+    std::optional<uint64_t> interval;
+    std::optional<uint64_t> timeFrame;
+    if (!json_util::readJsonPatch(req, asyncResp->res, "Interval", interval,
+                                  "TimeFrame", timeFrame))
+    {
+        return;
+    }
+    if (interval)
+    {
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, interval](const boost::system::error_code ec) {
+            if (ec)
+            {
+                messages::internalError(asyncResp->res);
+                BMCWEB_LOG_ERROR(
+                    "Sensor patchSensorHistory Interval Dbus error {}", ec);
+                return;
+            }
+        }, "xyz.openbmc_project.SensorReader",
+            "/xyz/openbmc_project/SensorReader/History",
+            "org.freedesktop.DBus.Properties", "Set",
+            "xyz.openbmc_project.SensorReader.History.Read", "Interval",
+            std::variant<uint64_t>(*interval));
+    }
+    if (timeFrame)
+    {
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, timeFrame](const boost::system::error_code ec) {
+            if (ec)
+            {
+                messages::internalError(asyncResp->res);
+                BMCWEB_LOG_ERROR(
+                    "Sensor patchSensorHistory Interval Dbus error {}", ec);
+                return;
+            }
+        }, "xyz.openbmc_project.SensorReader",
+            "/xyz/openbmc_project/SensorReader/History",
+            "org.freedesktop.DBus.Properties", "Set",
+            "xyz.openbmc_project.SensorReader.History.Read", "TimeFrame",
+            std::variant<uint64_t>(*timeFrame));
+    }
+}
 } // namespace sensors
 
 inline void requestRoutesSensorCollection(App& app)
@@ -3358,4 +3555,19 @@ inline void requestRoutesSensor(App& app)
             std::bind_front(sensors::handleSensorGet, std::ref(app)));
 }
 
+inline void requestRoutesSensorHistory(App& app)
+{
+    BMCWEB_ROUTE(app,
+                 "/redfish/v1/Chassis/<str>/Sensors/<str>/Oem/SensorHistory")
+        .privileges(redfish::privileges::getSensor)
+        .methods(boost::beast::http::verb::get)(
+            std::bind_front(sensors::handleSensorHistoryGet, std::ref(app)));
+
+    BMCWEB_ROUTE(app,
+                 "/redfish/v1/Chassis/<str>/Sensors/<str>/Oem/SensorHistory")
+        .privileges(redfish::privileges::patchSensor)
+        .methods(boost::beast::http::verb::patch)(
+            std::bind_front(sensors::handleSensorHistorypatch, std::ref(app)));
+}
+
 } // namespace redfish
diff --git a/static/redfish/v1/$metadata/index.xml b/static/redfish/v1/$metadata/index.xml
index 831e84a9..171e9a36 100644
--- a/static/redfish/v1/$metadata/index.xml
+++ b/static/redfish/v1/$metadata/index.xml
@@ -3672,4 +3672,8 @@
         <edmx:Include Namespace="OemSecurityPolicy"/>
         <edmx:Include Namespace="OemSecurityPolicy.v1_0_0"/>
     </edmx:Reference>
+    <edmx:Reference Uri="/redfish/v1/schema/OemSensorHistory_v1.xml">
+        <edmx:Include Namespace="OemSensorHistory"/>
+        <edmx:Include Namespace="OemSensorHistory.v1_0_0"/>
+    </edmx:Reference>
 </edmx:Edmx>
diff --git a/static/redfish/v1/JsonSchemas/OemSensorHistory/index.json b/static/redfish/v1/JsonSchemas/OemSensorHistory/index.json
new file mode 100644
index 00000000..64788b22
--- /dev/null
+++ b/static/redfish/v1/JsonSchemas/OemSensorHistory/index.json
@@ -0,0 +1,65 @@
+{
+   "$id":"http://redfish.dmtf.org/schemas/v1/OemSensorHistory.v1_0_0.json",
+   "$schema":"http://redfish.dmtf.org/schemas/v1/redfish-schema-v1.json",
+   "copyright":"Copyright 2014-2023 DMTF. For the full DMTF copyright policy, see http://www.dmtf.org/about/policies/copyright",
+   "definitions":{
+      "SensorReadings":{
+         "additionalProperties":false,
+         "description":"OEM Sensor history",
+         "longDescription":"OEM sensor history provides to monitor the sensors.",
+         "patternProperties":{
+            "^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\\.[a-zA-Z_][a-zA-Z0-9_]*$":{
+               "description":"This property shall specify a valid odata or Redfish property.",
+               "type":[
+                  "array",
+                  "boolean",
+                  "integer",
+                  "number",
+                  "null",
+                  "object",
+                  "string"
+               ]
+            }
+         },
+         "properties":{
+            "Time":{
+               "description":"This property represents the timestamp of the specific value.",
+               "longDescription":"This property denotes the timestamp of the specific value.",
+               "readonly":true,
+               "type":"integer"
+            },
+            "Value":{
+               "description":"This property will display the sensor value at a specific time.",
+               "longDescription":"This property will display the sensor value at a specific time.",
+               "readonly":true,
+               "type":[
+                  "number",
+                  "null"
+               ]
+            }
+         }
+      },
+      "SensorReadingsCount":{
+         "type":"integer",
+         "description":"Number of sensor readings in the history"
+      },
+      "Interval":{
+         "type":"integer",
+         "description":"Interval of monitoring the values"
+      },
+      "TimeFrame":{
+         "type":"integer",
+         "description":"TimeFrame of sensor history"
+      }
+   },
+   "required":[
+      "@odata.id",
+      "@odata.type",
+      "Id",
+      "Name",
+      "SensorName"
+   ],
+   "type":"object",
+   "owningEntity":"AMI",
+   "title":"#OemSensorHistory.v1_0_0"
+}
diff --git a/static/redfish/v1/schema/OemSensorHistory_V1.xml b/static/redfish/v1/schema/OemSensorHistory_V1.xml
new file mode 100644
index 00000000..14a83a3d
--- /dev/null
+++ b/static/redfish/v1/schema/OemSensorHistory_V1.xml
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+ <root>
+     <$id>http://redfish.dmtf.org/schemas/v1/OemSensorHistory.v1_0_0.json</$id>
+     <$schema>http://redfish.dmtf.org/schemas/v1/redfish-schema-v1.json</$schema>
+     <copyright>Copyright 2014-2023 DMTF. For the full DMTF copyright policy, see http://www.dmtf.org/about/policies/copyright</copyright>
+     <definitions>
+         <SensorReadings>
+             <additionalProperties>false</additionalProperties>
+             <description>OEM Sensor history</description>
+             <longDescription>OEM sensor history provides to monitor the sensors.</longDescription>
+             <patternProperties>
+                 <^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_]*$>
+                     <description>This property shall specify a valid odata or Redfish property.</description>
+                     <type>array</type>
+                     <type>boolean</type>
+                     <type>integer</type>
+                     <type>number</type>
+                     <type>null</type>
+                     <type>object</type>
+                     <type>string</type>
+                 </^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_]*$>
+             </patternProperties>
+             <properties>
+                 <Time>
+                     <description>This property represents the timestamp of the specific value.</description>
+                     <longDescription>This property denotes the timestamp of the specific value.</longDescription>
+                     <readonly>true</readonly>
+                     <type>integer</type>
+                 </Time>
+                 <Value>
+                     <description>This property will display the sensor value at a specific time.</description>
+                     <longDescription>This property will display the sensor value at a specific time.</longDescription>
+                     <readonly>true</readonly>
+                     <type>number</type>
+                     <type>null</type>
+                 </Value>
+             </properties>
+         </SensorReadings>
+         <SensorReadingsCount>
+             <type>integer</type>
+             <description>Number of sensor readings in the history</description>
+         </SensorReadingsCount>
+         <Interval>
+             <type>integer</type>
+             <description>Interval of monitoring the values</description>
+         </Interval>
+         <TimeFrame>
+             <type>integer</type>
+             <description>TimeFrame of sensor history</description>
+         </TimeFrame>
+     </definitions>
+     <required>@odata.id</required>
+     <required>@odata.type</required>
+     <required>Id</required>
+     <required>Name</required>
+     <required>SensorName</required>
+     <type>object</type>
+     <owningEntity>AMI</owningEntity>
+     <title>#OemSensorHistory.v1_0_0</title>
+ </root>
-- 
2.34.1

