From 2db60254a9ceb578b97ed5bf3798e5bc18e8f6c4 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Mon, 31 Jul 2023 17:26:11 +0530
Subject: [PATCH 80/80] Added PasswordRestFailed, not able to set existing psd
 as new password for created User

Fixed passwordChange policy is able to access after pswd exipre

[Root-Cause]:

For passwordexpire, they are restricting/ removing all privileges except ConfigureSelf in bmcweb (during Authentication).
so for all users it will have configureSelf privilage and able to access that URL with expire password users.
So we need to pass only specfic user.

Test Cases:

1) Get https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : root
Password : XXXX

response 200
{
    "@odata.id": "/redfish/v1/AccountService/Accounts",
    "@odata.type": "#ManagerAccountCollection.ManagerAccountCollection",
    "Description": "BMC User Accounts",
    "Members": [
        {
            "@odata.id": "/redfish/v1/AccountService/Accounts/root"
        }
    ],
    "Members@odata.count": 1,
    "Name": "Accounts Collection"
}

2) Post https://{{ip}}/redfish/v1/AccountService/Accounts/

UserName : root
Password : XXXX

Json Body
{
    "UserName": "ami",
    "Password": "0penBmc123",
    "RoleId": "Administrator",
    "Enabled": true,
}

response 201
{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The resource has been created successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Created",
            "MessageSeverity": "OK",
            "Resolution": "None."
        }
    ]
}

3) Get https://{{BMCIP}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

{
    "@odata.id": "/redfish/v1/AccountService/Accounts/ami",
    "@odata.type": "#ManagerAccount.v1_4_0.ManagerAccount",
    "AccountTypes": [
        "HostConsole",
        "IPMI",
        "Redfish",
        "WebUI",
        "VirtualMedia",
        "ManagerConsole"
    ],
    "Description": "User Account",
    "Enabled": true,
    "Id": "ami",
    "Links": {
        "Role": {
            "@odata.id": "/redfish/v1/AccountService/Roles/Administrator"
        }
    },
    "Locked": false,
    "Locked@Redfish.AllowableValues": [
        "false"
    ],
    "Name": "User Account",
    "OEMAccountTypes": [],
    "Password": null,
    "PasswordChangeRequired": true,
    "RoleId": "Administrator",
    "UserName": "ami"
}

4) Patch https://{{ip}}/redfish/v1/AccountService/Accounts/ami

UserName : ami
Password : XXXX

Json Body

{
    "Password": "0penBmc123"
}

response 400

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The request completed successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.13.0.Success",
            "MessageSeverity": "OK",
            "Resolution": "None"
        }
    ],
    "error": {
        "@Message.ExtendedInfo": [
            {
                "@odata.type": "#Message.v1_1_1.Message",
                "Message": "Last password cannot be used to reset the redfish account password. Please change the password value and resubmit the request",
                "MessageArgs": [],
                "MessageId": "Base.1.13.0.PasswordResetFailed",
                "MessageSeverity": "Critical",
                "Resolution": "Change the password value and resubmit the request"
            }
        ],
        "code": "Base.1.13.0.PasswordResetFailed",
        "message": "Last password cannot be used to reset the redfish account password. Please change the password value and resubmit the request"
    }
}

Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 http/routing.hpp                              | 12 ++++++++++++
 redfish-core/include/error_messages.hpp       | 10 ++++++++++
 .../registries/base_message_registry.hpp      | 15 +++++++++++++--
 redfish-core/lib/account_service.hpp          |  7 +++++++
 redfish-core/src/error_messages.cpp           | 19 +++++++++++++++++++
 5 files changed, 61 insertions(+), 2 deletions(-)

diff --git a/http/routing.hpp b/http/routing.hpp
index d85dfa11..6dc7f6f4 100644
--- a/http/routing.hpp
+++ b/http/routing.hpp
@@ -1500,6 +1500,18 @@ class Router
         }
         validatePrivilege(req, asyncResp, rule,
                           [&rule, asyncResp, params](Request& thisReq) mutable {
+	    if (!params.empty())
+	    {
+	    	if ((thisReq.session->isConfigureSelfOnly) && !(thisReq.session->username == params[0]))
+		{
+			asyncResp->res.result(boost::beast::http::status::forbidden);
+			redfish::messages::passwordChangeRequired(
+				asyncResp->res,
+				boost::urls::format("/redfish/v1/AccountService/Accounts/{}",
+					thisReq.session->username));
+			return;
+		}	
+	    }
             rule.handle(thisReq, asyncResp, params);
         });
     }
diff --git a/redfish-core/include/error_messages.hpp b/redfish-core/include/error_messages.hpp
index 0ef3a71b..771781e2 100644
--- a/redfish-core/include/error_messages.hpp
+++ b/redfish-core/include/error_messages.hpp
@@ -1093,6 +1093,16 @@ void invalidQueryFilter(crow::Response& res);
 
 nlohmann::json invalidip(std::string_view arg1,std::string_view arg2);
 void invalidip(crow::Response& res, std::string_view arg1,std::string_view arg2);
+
+/**
+ * @brief Formats PasswordResetFailed message into JSON
+ * Message body: "Last password cannot be used to reset the redfish account password.
+ *  Please change the password value and resubmit the request"
+ *
+ *  @returns Message PasswordResetFailed formatted to JSON */
+nlohmann::json passwordResetFailed();
+
+void passwordResetFailed(crow::Response& res);
 } // namespace messages
 
 } // namespace redfish
diff --git a/redfish-core/include/registries/base_message_registry.hpp b/redfish-core/include/registries/base_message_registry.hpp
index eab6e1f3..36f7c0aa 100644
--- a/redfish-core/include/registries/base_message_registry.hpp
+++ b/redfish-core/include/registries/base_message_registry.hpp
@@ -1259,7 +1259,17 @@ constexpr std::array registry =
 			"string",
 		},
 		"Provide Valid IP address",
-	}}
+	}},
+    MessageEntry{
+	    "PasswordResetFailed",
+    	    {
+		"Indicates that we cannot use or reset the previous password for the particular user",
+		"Last password cannot be used to reset the redfish account password. Please change the password value and resubmit the request",
+		"Critical",
+		0,
+		{},
+		"Change the password value and resubmit the request",
+ 	}}
 };
 
 enum class Index
@@ -1369,6 +1379,7 @@ enum class Index
     undeterminedFault = 102,
     unrecognizedRequestBody = 103,
     propertySizeExceeded = 104,
-    invalidip=105
+    invalidip=105,
+    passwordResetFailed=106
 };
 } // namespace redfish::registries::base
diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index 83b68024..c2e8a6b0 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1177,6 +1177,13 @@ inline void updateUserProperties(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
 
             if (password)
             {
+		int pamrc = pamAuthenticateUser(username, *password);
+		if ((pamrc == PAM_NEW_AUTHTOK_REQD))
+		{
+			BMCWEB_LOG_ERROR << "Need to provide new Password";
+			messages::passwordResetFailed(asyncResp->res);
+			return;
+		}
                 int retval = pamUpdatePassword(username, *password);
 
                 if (retval == PAM_USER_UNKNOWN)
diff --git a/redfish-core/src/error_messages.cpp b/redfish-core/src/error_messages.cpp
index e12ace3c..91237a88 100644
--- a/redfish-core/src/error_messages.cpp
+++ b/redfish-core/src/error_messages.cpp
@@ -1862,6 +1862,25 @@ void invalidip(crow::Response& res, std::string_view arg1,std::string_view arg2)
     addMessageToErrorJson(res.jsonValue,invalidip(arg1,arg2));
 }
 
+/**
+ * @internal
+ * @brief Formats passwordResetFailed message into JSON
+ *
+ * See header file for more information
+ * @endinternal
+ */
+nlohmann::json passwordResetFailed(void)
+{
+    return getLog(redfish::registries::base::Index::passwordResetFailed,
+                  {});
+}
+
+void passwordResetFailed(crow::Response& res)
+{
+    res.result(boost::beast::http::status::bad_request);
+    addMessageToErrorJson(res.jsonValue, passwordResetFailed());
+}
+
 } // namespace messages
 
 } // namespace redfish
-- 
2.34.1

