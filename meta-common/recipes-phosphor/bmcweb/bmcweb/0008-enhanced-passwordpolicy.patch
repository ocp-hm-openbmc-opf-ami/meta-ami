From 6251a1c09a564354f29d471214fa76dafb7a3d05 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Tue, 18 Oct 2022 21:24:31 +0530
Subject: [PATCH] enhanced-passwordpolicy

---
 redfish-core/lib/account_service.hpp | 67 +++++++++++++++++++++++++++-
 1 file changed, 65 insertions(+), 2 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index f2f338ca..3bd25b1f 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -1321,12 +1321,16 @@ inline void
         const uint8_t* minPasswordLength = nullptr;
         const uint32_t* accountUnlockTimeout = nullptr;
         const uint16_t* maxLoginAttemptBeforeLockout = nullptr;
+	const uint8_t* rememberOldPasswordTimes = nullptr;
+	const std::string* passwordPolicyComplexity = nullptr;
 
         const bool success = sdbusplus::unpackPropertiesNoThrow(
             dbus_utils::UnpackErrorPrinter(), propertiesList,
             "MinPasswordLength", minPasswordLength, "AccountUnlockTimeout",
             accountUnlockTimeout, "MaxLoginAttemptBeforeLockout",
-            maxLoginAttemptBeforeLockout);
+            maxLoginAttemptBeforeLockout, "RememberOldPasswordTimes",
+	    rememberOldPasswordTimes, "PasswordPolicyComplexity",
+	    passwordPolicyComplexity);
 
         if (!success)
         {
@@ -1350,6 +1354,21 @@ inline void
             asyncResp->res.jsonValue["AccountLockoutThreshold"] =
                 *maxLoginAttemptBeforeLockout;
         }
+
+	if (rememberOldPasswordTimes != nullptr)
+	{
+	   asyncResp->res.jsonValue["Oem"]["OpenBMC"]
+		   		   ["RememberOldPasswordTimes"] =
+		*rememberOldPasswordTimes;
+	}
+
+	if (passwordPolicyComplexity != nullptr)
+	{
+	   asyncResp->res.jsonValue["Oem"]["OpenBMC"]
+		   		   ["PasswordPolicyComplexity"] =
+		*passwordPolicyComplexity;
+	}
+
         });
 
     auto callback = [asyncResp](bool success, const LDAPConfigData& confData,
@@ -1380,6 +1399,8 @@ inline void handleAccountServicePatch(
     std::optional<nlohmann::json> ldapObject;
     std::optional<nlohmann::json> activeDirectoryObject;
     std::optional<nlohmann::json> oemObject;
+    std::optional<std::string> passwordcomplexity;
+    std::optional<uint8_t> RememberOldPasswordTimes;
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "AccountLockoutDuration", unlockTimeout,
@@ -1425,12 +1446,54 @@ inline void handleAccountServicePatch(
         if (std::optional<nlohmann::json> authMethodsObject;
             oemOpenBMCObject &&
             json_util::readJson(*oemOpenBMCObject, asyncResp->res,
-                                "AuthMethods", authMethodsObject))
+                                "AuthMethods", authMethodsObject,
+				"PasswordPolicyComplexity",passwordcomplexity,
+				"RememberOldPasswordTimes",RememberOldPasswordTimes))
         {
             if (authMethodsObject)
             {
                 handleAuthMethodsPatch(*authMethodsObject, asyncResp);
             }
+	    if (passwordcomplexity)
+            {
+                crow::connections::systemBus->async_method_call(
+                  [asyncResp, passwordcomplexity](
+                      const boost::system::error_code ec) {
+                      if (ec)
+                      {
+                          messages::internalError(asyncResp->res);
+                          return;
+                      }
+                      messages::success(asyncResp->res);
+                      },
+                      "xyz.openbmc_project.User.Manager",
+                      "/xyz/openbmc_project/user",
+                      "org.freedesktop.DBus.Properties", "Set",
+                      "xyz.openbmc_project.User.AccountPolicy",
+                      "PasswordPolicyComplexity",
+                      std::variant<std::string>(*passwordcomplexity));
+             }
+             if (RememberOldPasswordTimes)
+             {
+                crow::connections::systemBus->async_method_call(
+                  [asyncResp, RememberOldPasswordTimes](
+                     const boost::system::error_code ec) {
+                     if (ec)
+                     {
+                        messages::internalError(asyncResp->res);
+                        return;
+                     }
+                     messages::success(asyncResp->res);
+                     },
+                     "xyz.openbmc_project.User.Manager",
+                     "/xyz/openbmc_project/user",
+                     "org.freedesktop.DBus.Properties", "Set",
+                     "xyz.openbmc_project.User.AccountPolicy",
+                     "RememberOldPasswordTimes",
+                     std::variant<uint8_t>(
+                                 *RememberOldPasswordTimes));
+              }
+
         }
     }
 
