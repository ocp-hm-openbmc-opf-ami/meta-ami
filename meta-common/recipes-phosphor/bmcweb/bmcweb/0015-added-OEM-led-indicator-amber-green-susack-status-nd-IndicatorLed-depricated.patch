From ed092b9a0506c90bb2b10bdeb27e5f078f635bf0 Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Sat, 14 Oct 2023 00:47:06 +0530
Subject: [PATCH 15/15] added OEM led-indicator amber green susack status nd
 IndicatorLED-Depreacted

---
 redfish-core/lib/led.hpp     | 77 ++++++++++++++++++++++++++++++++++++
 redfish-core/lib/systems.hpp | 11 +++---
 2 files changed, 83 insertions(+), 5 deletions(-)

diff --git a/redfish-core/lib/led.hpp b/redfish-core/lib/led.hpp
index ff77ddc1..270deba8 100644
--- a/redfish-core/lib/led.hpp
+++ b/redfish-core/lib/led.hpp
@@ -252,4 +252,81 @@ inline void setLocationIndicatorActive(
         }
     });
 }
+
+inline void setPhysicalLedState(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
+                                const std::string& led,
+                                const std::string& state)
+{
+    if (boost::ends_with(state, "On"))
+    {
+        aResp->res.jsonValue["Oem"]["OpenBmc"]["PhysicalLED"][led] = "On";
+    }
+    else if (boost::ends_with(state, "Blink"))
+    {
+        aResp->res.jsonValue["Oem"]["OpenBmc"]["PhysicalLED"][led] = "Blinking";
+    }
+    else if (boost::ends_with(state, "Off"))
+    {
+        aResp->res.jsonValue["Oem"]["OpenBmc"]["PhysicalLED"][led] = "Off";
+    }
+    else
+    {
+        aResp->res.jsonValue["Oem"]["OpenBmc"]["PhysicalLED"][led] = "Unknown";
+    }
+}
+
+inline void getPhysicalLedState(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    BMCWEB_LOG_DEBUG("Get Physical Led");
+    aResp->res.jsonValue["Oem"]["OpenBmc"]["PhysicalLED"]["@odata.type"] =
+        "#OemComputerSystem.PhysicalLED";
+
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus,
+        "xyz.openbmc_project.LED.Controller.status_amber",
+        "/xyz/openbmc_project/led/physical/status_amber",
+        "xyz.openbmc_project.Led.Physical", "State",
+        [aResp](const boost::system::error_code ec,
+                const std::string& amberLedState) {
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("Get Physical State Amber Led: DBus Error", ec);
+            messages::internalError(aResp->res);
+            return;
+        }
+        setPhysicalLedState(aResp, "AmberLED", amberLedState);
+    });
+
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus,
+        "xyz.openbmc_project.LED.Controller.status_green",
+        "/xyz/openbmc_project/led/physical/status_green",
+        "xyz.openbmc_project.Led.Physical", "State",
+        [aResp](const boost::system::error_code ec,
+                const std::string& greenLedState) {
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("Get Physical State Green Led: DBus Error", ec);
+            messages::internalError(aResp->res);
+            return;
+        }
+        setPhysicalLedState(aResp, "GreenLED", greenLedState);
+    });
+
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus,
+        "xyz.openbmc_project.LED.Controller.status_susack",
+        "/xyz/openbmc_project/led/physical/status_susack",
+        "xyz.openbmc_project.Led.Physical", "State",
+        [aResp](const boost::system::error_code ec,
+                const std::string& susackLedState) {
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("Get Physical State Susack Led: DBus Error", ec);
+            messages::internalError(aResp->res);
+            return;
+        }
+        setPhysicalLedState(aResp, "SusackLED", susackLedState);
+    });
+}
 } // namespace redfish
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 40ea52b6..2cc68923 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -3519,7 +3519,8 @@ inline void
 
     getLocationIndicatorActive(asyncResp);
     // TODO (Gunnar): Remove IndicatorLED after enough time has passed
-    getIndicatorLedState(asyncResp);
+    // getIndicatorLedState(asyncResp);
+    getPhysicalLedState(asyncResp);
     getComputerSystem(asyncResp, health);
     getHostState(asyncResp);
     getBootProperties(asyncResp);
@@ -3571,7 +3572,7 @@ inline void handleComputerSystemPatch(
         "</redfish/v1/JsonSchemas/ComputerSystem/ComputerSystem.json>; rel=describedby");
 
     std::optional<bool> locationIndicatorActive;
-    std::optional<std::string> indicatorLed;
+    // std::optional<std::string> indicatorLed;
     std::optional<std::string> assetTag;
     std::optional<std::string> powerRestorePolicy;
     std::optional<std::string> powerMode;
@@ -3596,7 +3597,7 @@ inline void handleComputerSystemPatch(
     // clang-format off
                 if (!json_util::readJsonPatch(
                         req, asyncResp->res,
-                        "IndicatorLED", indicatorLed,
+    //                  "IndicatorLED", indicatorLed,
                         "LocationIndicatorActive", locationIndicatorActive,
                         "AssetTag", assetTag,
                         "PowerRestorePolicy", powerRestorePolicy,
@@ -3667,13 +3668,13 @@ inline void handleComputerSystemPatch(
 
     // TODO (Gunnar): Remove IndicatorLED after enough time has
     // passed
-    if (indicatorLed)
+    /*if (indicatorLed)
     {
         setIndicatorLedState(asyncResp, *indicatorLed);
         asyncResp->res.addHeader(boost::beast::http::field::warning,
                                  "299 - \"IndicatorLED is deprecated. Use "
                                  "LocationIndicatorActive instead.\"");
-    }
+    }*/
 
     if (powerRestorePolicy)
     {
-- 
2.34.1

