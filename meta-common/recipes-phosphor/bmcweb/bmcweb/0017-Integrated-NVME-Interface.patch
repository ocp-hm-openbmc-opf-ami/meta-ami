From dfafc5de76204a3225140eb83ceb275f4d99f10d Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Fri, 18 Nov 2022 17:58:45 +0530
Subject: [PATCH] Integrated NVME Interface

Description
Added NVME interface in redfish with backend

Test case:

busctl tree xyz.openbmc_project.NVMEMgt
`-/xyz
  `-/xyz/openbmc_project
    `-/xyz/openbmc_project/Nvme
      `-/xyz/openbmc_project/Nvme/0

1) Get NVME device
https://x.x.x.x/redfish/v1/Systems/system/Storage

{
    "@odata.id": "/redfish/v1/Systems/system/Storage",
    "@odata.type": "#StorageCollection.StorageCollection",
    "Members": [
        {
            "@odata.id": "/redfish/v1/Systems/system/Storage/1"
        },
        {
            "@odata.id": "/redfish/v1/Systems/system/Storage/Nvme"
        }
    ],
    "Members@odata.count": 2,
    "Name": "Storage Collection"
}

2) Get Nvme Drive 

https://x.x.x.x/redfish/v1/Systems/system/Storage/Nvme
{
    "@odata.id": "/redfish/v1/Systems/system/Storage/Nvme",
    "@odata.type": "#Storage.v1_7_1.Storage",
    "Drives": [
        {
            "@odata.id": "/redfish/v1/Systems/system/Storage/Nvme/Drives/0"
        }
    ],
    "Drives@odata.count": 1,
    "Id": "Nvme",
    "Name": "Storage"
}

3) Get Nvme Drive instance 

https://x.x.x.x/redfish/v1/Systems/system/Storage/Nvme/Drive/0
{
    "@odata.id": "/redfish/v1/Systems/system/Storage/Nvme/Drives/0",
    "@odata.type": "#Drive.v1_7_0.Drive",
    "Id": "0",
    "Links": {
        "Chassis": {
            "@odata.id": "/redfish/v1/Chassis/AC_Baseboard"
        }
    },
    "Manufacturer": "INTEL",
    "Model": "P4510",
    "Name": "0",
    "Oem": {
        "OpenBmc": {
            "@odata.type": "#OemDrive.v1_0_0.Drive",
            "DeviceLocation": "PCIe Slot 4",
            "Device_Class": 2,
            "Device_Programming_Intf": 1,
            "Device_Sub_Class": 8,
            "Drive_Life_Consumed": 0,
            "Firmware_Version": "VDV10131",
            "NVMe_Functional": "Functional",
            "NVMe_Powered": "Off",
            "NVMe_Reset_Required": "No Reset Required",
            "PCIe_0_Link_Speed": "PCIe Gen 1",
            "PCIe_0_Link_Width": "PCIe x4",
            "PCIe_1_Link_Speed": "InActive",
            "PCIe_1_Link_Width": "InActive",
            "Port_0_PCIe_Link_Active": "PCIe Link Down",
            "Port_1_PCIe_Link_Active": "PCIe Link Down"
        }
    },
    "PartNumber": "INTEL SSDPE2KX010T8",
    "SerialNumber": "PHLJ006505QF1P0FGN"
}

Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 redfish-core/include/redfish.hpp  |   4 +
 redfish-core/lib/storage.hpp      |  14 +-
 redfish-core/lib/storage_mctp.hpp | 597 ++++++++++++++++++++++++++++++
 3 files changed, 609 insertions(+), 6 deletions(-)
 create mode 100644 redfish-core/lib/storage_mctp.hpp

diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index 809f0230..7cbaa395 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -115,6 +115,10 @@ class RedfishService
         requestRoutesStorageCollection(app);
         requestRoutesStorage(app);
         requestRoutesDrive(app);
+
+        requestRoutesNvmeStorage(app);
+        requestRoutesNvmeDrive(app);
+
         requestRoutesCable(app);
         requestRoutesCableCollection(app);
 #ifdef BMCWEB_INSECURE_ENABLE_REDFISH_FW_TFTP_UPDATE
diff --git a/redfish-core/lib/storage.hpp b/redfish-core/lib/storage.hpp
index cf1b441d..2cf865fc 100644
--- a/redfish-core/lib/storage.hpp
+++ b/redfish-core/lib/storage.hpp
@@ -18,6 +18,7 @@
 #include "health.hpp"
 #include "openbmc_dbus_rest.hpp"
 
+#include "storage_mctp.hpp"
 #include <app.hpp>
 #include <dbus_utility.hpp>
 #include <query.hpp>
@@ -45,12 +45,14 @@ inline void requestRoutesStorageCollection(App& app)
         asyncResp->res.jsonValue["@odata.id"] =
             "/redfish/v1/Systems/system/Storage";
         asyncResp->res.jsonValue["Name"] = "Storage Collection";
-        nlohmann::json::array_t members;
-        nlohmann::json::object_t member;
-        member["@odata.id"] = "/redfish/v1/Systems/system/Storage/1";
-        members.emplace_back(member);
-        asyncResp->res.jsonValue["Members"] = std::move(members);
-        asyncResp->res.jsonValue["Members@odata.count"] = 1;
+	nlohmann::json& storageControllerArray =
+		asyncResp->res.jsonValue["Members"];
+	storageControllerArray.push_back(
+		{{"@odata.id", "/redfish/v1/Systems/system/Storage/1"}});
+	nlohmann::json& count =
+		asyncResp->res.jsonValue["Members@odata.count"];
+	count = 1;
+	getNvmeDevices(asyncResp, count, storageControllerArray);
         });
 }
 
diff --git a/redfish-core/lib/storage_mctp.hpp b/redfish-core/lib/storage_mctp.hpp
new file mode 100644
index 00000000..83e92f8c
--- /dev/null
+++ b/redfish-core/lib/storage_mctp.hpp
@@ -0,0 +1,597 @@
+/*
+// Copyright (c) 2021 AMI Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+#pragma once
+
+#include "openbmc_dbus_rest.hpp"
+
+#include <app.hpp>
+#include <registries/privilege_registry.hpp>
+
+namespace redfish
+{
+
+using GetSubTreeType = std::vector<std::pair<
+        std::string,
+        std::vector<std::pair<std::string, std::vector<std::string>>>>>;
+
+inline void getNvmeDevices(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
+                           nlohmann::json& count,
+                           nlohmann::json& storageControllerArray)
+{
+    crow::connections::systemBus->async_method_call(
+        [asyncResp, &count,
+         &storageControllerArray](const boost::system::error_code ec,
+                                  const std::variant<uint32_t>& value) {
+            if (ec)
+            {
+                BMCWEB_LOG_DEBUG << "failed to get property Value  " << ec;
+                messages::internalError(asyncResp->res);
+                return;
+            }
+	    
+            const uint32_t* s = std::get_if<uint32_t>(&value);
+
+            if (s != nullptr && *s != 0)
+            {
+                storageControllerArray.push_back(
+                    {{"@odata.id", "/redfish/v1/Systems/system/Storage/Nvme"}});
+                count = storageControllerArray.size();
+            }
+        },
+        "xyz.openbmc_project.NVMEMgt", "/xyz/openbmc_project/Nvme",
+        "org.freedesktop.DBus.Properties", "Get", "xyz.openbmc_project.Nvme",
+        "Count");
+}
+
+inline void requestRoutesNvmeStorage(App& app)
+{
+    BMCWEB_ROUTE(app, "/redfish/v1/Systems/system/Storage/Nvme/")
+        .privileges(redfish::privileges::getStorage)
+        .methods(boost::beast::http::verb::get)(
+            [](const crow::Request&,
+               const std::shared_ptr<bmcweb::AsyncResp>& asyncResp) {
+                asyncResp->res.jsonValue["@odata.type"] =
+                    "#Storage.v1_7_1.Storage";
+                asyncResp->res.jsonValue["@odata.id"] =
+                    "/redfish/v1/Systems/system/Storage/Nvme";
+                asyncResp->res.jsonValue["Name"] = "Storage";
+                asyncResp->res.jsonValue["Id"] = "Nvme";
+                crow::connections::systemBus->async_method_call(
+                    [asyncResp](const boost::system::error_code ec,
+                                const std::vector<std::string>& storageList) {
+                        nlohmann::json& storageArray =
+                            asyncResp->res.jsonValue["Drives"];
+                        storageArray = nlohmann::json::array();
+                        auto& count =
+                            asyncResp->res.jsonValue["Drives@odata.count"];
+                        count = 0;
+
+                        if (ec)
+                        {
+                            BMCWEB_LOG_ERROR << "Drive mapper call error";
+                            messages::internalError(asyncResp->res);
+                            return;
+                        }
+
+                        for (const std::string& objpath : storageList)
+                        {
+                            std::size_t lastPos = objpath.rfind('/');
+                            if (lastPos == std::string::npos ||
+                                (objpath.size() <= lastPos + 1))
+                            {
+                                BMCWEB_LOG_ERROR << "Failed to find '/' in "
+                                                 << objpath;
+                                continue;
+                            }
+
+                            storageArray.push_back(
+                                {{"@odata.id",
+                                  "/redfish/v1/Systems/system/Storage/Nvme/"
+                                  "Drives/" +
+                                      objpath.substr(lastPos + 1)}});
+                        }
+                        count = storageArray.size();
+                    },
+                    "xyz.openbmc_project.ObjectMapper",
+                    "/xyz/openbmc_project/object_mapper",
+                    "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths",
+                    "/xyz/openbmc_project/Nvme", 0,
+                    std::array<const char*, 1>{"xyz.openbmc_project.Nvme"});
+            });
+}
+
+std::unordered_map<int, const std::string> linkWidthToRedfishProperty = {
+    {0, "InActive"}, {1, "PCIe x1"},   {2, "PCIe x2"},   {4, "PCIe x4"},
+    {8, "PCIe x8"},  {12, "PCIe x12"}, {16, "PCIe x16"}, {32, "PCIe x32"}};
+
+std::unordered_map<int, const std::string> linkSpeedToRedfishProperty = {
+    {0, "InActive"},   {1, "PCIe Gen 1"}, {2, "PCIe Gen 2"}, {3, "PCIe Gen 3"},
+    {4, "PCIe Gen 4"}, {5, "PCIe Gen 5"}, {6, "PCIe Gen 6"}};
+
+inline void requestRoutesNvmeDrive(App& app)
+{
+    BMCWEB_ROUTE(app, "/redfish/v1/Systems/system/Storage/Nvme/Drives/<str>/")
+        .privileges(redfish::privileges::getDrive)
+        .methods(
+            boost::beast::http::verb::get)([](const crow::Request&,
+                                              const std::shared_ptr<
+                                                  bmcweb::AsyncResp>& asyncResp,
+                                              const std::string& driveId) {
+            crow::connections::systemBus->async_method_call(
+                [asyncResp,
+                 driveId](const boost::system::error_code ec,
+                          const GetSubTreeType& subtree) {
+                    if (ec)
+                    {
+                        BMCWEB_LOG_ERROR << "Drive mapper call error";
+                        messages::internalError(asyncResp->res);
+                        return;
+                    }
+
+                    auto object2 = std::find_if(
+                        subtree.begin(), subtree.end(),
+                        [&driveId](auto& object) {
+                            const std::string& path = object.first;
+                            return boost::ends_with(path, "/" + driveId);
+                        });
+
+                    if (object2 == subtree.end())
+                    {
+                        messages::resourceNotFound(asyncResp->res, "Drive",
+                                                   driveId);
+                        return;
+                    }
+
+                    const std::string& path = object2->first;
+                    const std::vector<
+                        std::pair<std::string, std::vector<std::string>>>&
+                        connectionNames = object2->second;
+                    asyncResp->res.jsonValue["@odata.type"] =
+                        "#Drive.v1_7_0.Drive";
+                    asyncResp->res.jsonValue["@odata.id"] =
+                        "/redfish/v1/Systems/system/Storage/Nvme/Drives/" +
+                        driveId;
+                    asyncResp->res.jsonValue["Name"] = driveId;
+                    asyncResp->res.jsonValue["Id"] = driveId;
+                    asyncResp->res.jsonValue["Oem"]["OpenBmc"]["@odata.type"] =
+                        "#OemDrive.v1_0_0.Drive";
+
+                    if (connectionNames.size() != 1)
+                    {
+                        BMCWEB_LOG_ERROR << "Connection size "
+                                         << connectionNames.size()
+                                         << ", greater than 1";
+                        messages::internalError(asyncResp->res);
+                        return;
+                    }
+
+                    getMainChassisId(
+                        asyncResp,
+                        [](const std::string& chassisId,
+                           const std::shared_ptr<bmcweb::AsyncResp>& aRsp) {
+                            aRsp->res.jsonValue["Links"]["Chassis"] = {
+                                {"@odata.id",
+                                 "/redfish/v1/Chassis/" + chassisId}};
+                        });
+
+                    const std::string& connectionName =
+                        connectionNames[0].first;
+                    crow::connections::systemBus->async_method_call(
+                        [asyncResp](
+                            const boost::system::error_code ec2,
+                            const std::vector<std::pair<
+                                std::string,
+                                std::variant<bool, std::string, uint64_t>>>&
+                                propertiesList) {
+                            if (ec2)
+                            {
+                                // this interface isn't necessary
+                                return;
+                            }
+                            for (const std::pair<
+                                     std::string,
+                                     std::variant<bool, std::string, uint64_t>>&
+                                     property : propertiesList)
+                            {
+                                // Store DBus properties that are also
+                                // Redfish properties with same name and a
+                                // string value
+                                const std::string& propertyName =
+                                    property.first;
+                                if ((propertyName == "partModel") ||
+                                    (propertyName == "prdSerial") ||
+                                    (propertyName == "manufacturer") ||
+                                    (propertyName == "prdName"))
+                                {
+                                    const std::string* value =
+                                        std::get_if<std::string>(
+                                            &property.second);
+                                    if (value != nullptr)
+                                    {
+                                        if (propertyName == "partModel")
+                                            asyncResp->res
+                                                .jsonValue["PartNumber"] =
+                                                *value;
+
+                                        if (propertyName == "prdSerial")
+                                            asyncResp->res
+                                                .jsonValue["SerialNumber"] =
+                                                *value;
+
+                                        if (propertyName == "manufacturer")
+                                            asyncResp->res
+                                                .jsonValue["Manufacturer"] =
+                                                *value;
+
+                                        if (propertyName == "prdName")
+                                            asyncResp->res.jsonValue["Model"] =
+                                                *value;
+                                    }
+                                }
+                            }
+                        },
+                        connectionName, path, "org.freedesktop.DBus.Properties",
+                        "GetAll", "xyz.openbmc_project.Common.VPDProductInfo");
+
+                    crow::connections::systemBus->async_method_call(
+                        [asyncResp](
+                            const boost::system::error_code ec2,
+                            const std::vector<std::pair<
+                                std::string, std::variant<uint32_t, uint8_t>>>&
+                                propertiesList) {
+                            if (ec2)
+                            {
+                                return;
+                            }
+                            for (const std::pair<
+                                     std::string,
+                                     std::variant<uint32_t, uint8_t>>&
+                                     property : propertiesList)
+                            {
+                                const std::string& propertyName =
+                                    property.first;
+                                if ((propertyName == "curLinkSpeed") ||
+                                    (propertyName == "maxLinkWidth"))
+                                {
+                                    const uint8_t* value =
+                                        std::get_if<uint8_t>(&property.second);
+                                    if (value != nullptr)
+                                    {
+
+                                        if (propertyName == "curLinkSpeed")
+                                        {
+                                            if (linkSpeedToRedfishProperty.find(
+                                                    *value) ==
+                                                linkSpeedToRedfishProperty
+                                                    .end())
+                                            {
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["PCIe_0_Link_Speed"] =
+                                                    "Unknown";
+                                            }
+                                            else
+                                            {
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["PCIe_0_Link_Speed"] =
+                                                    linkSpeedToRedfishProperty
+                                                        .find(*value)
+                                                        ->second;
+                                            }
+                                        }
+
+                                        if (propertyName == "maxLinkWidth")
+                                        {
+                                            if (linkWidthToRedfishProperty.find(
+                                                    *value) ==
+                                                linkWidthToRedfishProperty
+                                                    .end())
+                                            {
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["PCIe_0_Link_Width"] =
+                                                    "Unknown";
+                                            }
+                                            else
+                                            {
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["PCIe_0_Link_Width"] =
+                                                    linkWidthToRedfishProperty
+                                                        .find(*value)
+                                                        ->second;
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        },
+                        connectionName, path, "org.freedesktop.DBus.Properties",
+                        "GetAll",
+                        "xyz.openbmc_project.Common.PortInfoData_Port0");
+
+                    crow::connections::systemBus->async_method_call(
+                        [asyncResp](
+                            const boost::system::error_code ec2,
+                            const std::vector<std::pair<
+                                std::string, std::variant<uint32_t, uint8_t>>>&
+                                propertiesList) {
+                            if (ec2)
+                            {
+                                return;
+                            }
+
+                            for (const std::pair<
+                                     std::string,
+                                     std::variant<uint32_t, uint8_t>>&
+                                     property : propertiesList)
+                            {
+                                const std::string& propertyName =
+                                    property.first;
+                                if ((propertyName == "curLinkSpeed") ||
+                                    (propertyName == "maxLinkWidth"))
+                                {
+                                    const uint8_t* value =
+                                        std::get_if<uint8_t>(&property.second);
+                                    if (value != nullptr)
+                                    {
+
+                                        if (propertyName == "curLinkSpeed")
+                                        {
+                                            if (linkSpeedToRedfishProperty.find(
+                                                    *value) ==
+                                                linkSpeedToRedfishProperty
+                                                    .end())
+                                            {
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["PCIe_1_Link_Speed"] =
+                                                    "Unknown";
+                                            }
+                                            else
+                                            {
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["PCIe_1_Link_Speed"] =
+                                                    linkSpeedToRedfishProperty
+                                                        .find(*value)
+                                                        ->second;
+                                            }
+                                        }
+
+                                        if (propertyName == "maxLinkWidth")
+                                        {
+                                            if (linkWidthToRedfishProperty.find(
+                                                    *value) ==
+                                                linkWidthToRedfishProperty
+                                                    .end())
+                                            {
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["PCIe_1_Link_Width"] =
+                                                    "Unknown";
+                                            }
+                                            else
+                                            {
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["PCIe_1_Link_Width"] =
+                                                    linkWidthToRedfishProperty
+                                                        .find(*value)
+                                                        ->second;
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        },
+                        connectionName, path, "org.freedesktop.DBus.Properties",
+                        "GetAll",
+                        "xyz.openbmc_project.Common.PortInfoData_Port1");
+
+                    crow::connections::systemBus->async_method_call(
+                        [asyncResp](
+                            const boost::system::error_code ec2,
+                            const std::vector<std::pair<
+                                std::string,
+                                std::variant<bool, std::string, uint64_t>>>&
+                                propertiesList) {
+                            if (ec2)
+                            {
+                                return;
+                            }
+                            for (const std::pair<
+                                     std::string,
+                                     std::variant<bool, std::string, uint64_t>>&
+                                     property : propertiesList)
+                            {
+                                const std::string& propertyName =
+                                    property.first;
+                                if ((propertyName == "bootloaderVer") ||
+                                    (propertyName == "firmwareVer"))
+                                {
+                                    const std::string* value =
+                                        std::get_if<std::string>(
+                                            &property.second);
+                                    if (value != nullptr)
+                                    {
+                                        if (propertyName == "bootloaderVer")
+                                            asyncResp->res.jsonValue
+                                                ["Oem"]["OpenBmc"]
+                                                ["Bootloader_Version"] = *value;
+
+                                        if (propertyName == "firmwareVer")
+                                            asyncResp->res
+                                                .jsonValue["Oem"]["OpenBmc"]
+                                                          ["Firmware_Version"] =
+                                                *value;
+                                    }
+                                }
+                            }
+                        },
+                        connectionName, path, "org.freedesktop.DBus.Properties",
+                        "GetAll", "xyz.openbmc_project.Common.IntelSpec");
+
+                    crow::connections::systemBus->async_method_call(
+                        [asyncResp](const boost::system::error_code ec,
+                                    const std::variant<std::string>& value) {
+                            if (ec)
+                            {
+                                BMCWEB_LOG_DEBUG
+                                    << "failed to get property Value  " << ec;
+                                return;
+                            }
+
+                            const std::string* s =
+                                std::get_if<std::string>(&value);
+                            asyncResp->res
+                                .jsonValue["Oem"]["OpenBmc"]["DeviceLocation"] =
+                                *s;
+                        },
+                        connectionName, path, "org.freedesktop.DBus.Properties",
+                        "Get", "xyz.openbmc_project.Nvme", "DeviceLocation");
+
+                    crow::connections::systemBus->async_method_call(
+                        [asyncResp](
+                            const boost::system::error_code ec2,
+                            const std::vector<std::pair<
+                                std::string, std::variant<uint32_t, uint8_t>>>&
+                                propertiesList) {
+                            if (ec2)
+                            {
+                                return;
+                            }
+                            for (const std::pair<
+                                     std::string,
+                                     std::variant<uint32_t, uint8_t>>&
+                                     property : propertiesList)
+                            {
+                                const std::string& propertyName =
+                                    property.first;
+                                if ((propertyName == "ccsReady") ||
+                                    (propertyName == "nssDF") ||
+                                    (propertyName == "nssRNR") ||
+                                    (propertyName == "nssP1LA") ||
+                                    (propertyName == "pdlu") ||
+                                    (propertyName == "nssP0LA"))
+                                {
+                                    const uint8_t* value =
+                                        std::get_if<uint8_t>(&property.second);
+                                    if (value != nullptr)
+                                    {
+                                        if (propertyName == "pdlu")
+                                        {
+                                            asyncResp->res.jsonValue
+                                                ["Oem"]["OpenBmc"]
+                                                ["Drive_Life_Consumed"] =
+                                                *value;
+                                        }
+                                        asyncResp->res
+                                            .jsonValue["Oem"]["OpenBmc"]
+                                                      ["Device_Class"] =
+                                            2; // Hardcode the value
+                                        asyncResp->res
+                                            .jsonValue["Oem"]["OpenBmc"]
+                                                      ["Device_Sub_Class"] =
+                                            8; // Hardcode the value
+                                        asyncResp->res.jsonValue
+                                            ["Oem"]["OpenBmc"]
+                                            ["Device_Programming_Intf"] =
+                                            1; // Hardcode the value
+                                        if (propertyName == "ccsReady")
+                                        {
+                                            if (*value == 1)
+                                                asyncResp->res
+                                                    .jsonValue["Oem"]["OpenBmc"]
+                                                              ["NVMe_Powered"] =
+                                                    "On";
+                                            else
+                                                asyncResp->res
+                                                    .jsonValue["Oem"]["OpenBmc"]
+                                                              ["NVMe_Powered"] =
+                                                    "Off";
+                                        }
+                                        if (propertyName == "nssDF")
+                                        {
+                                            if (*value == 1)
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["NVMe_Functional"] =
+                                                    "Functional";
+                                            else
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["NVMe_Functional"] =
+                                                    "Failure";
+                                        }
+                                        if (propertyName == "nssRNR")
+                                        {
+                                            if (*value == 1)
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["NVMe_Reset_Required"] =
+                                                    "No Reset Required";
+                                            else
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["NVMe_Reset_Required"] =
+                                                    "Reset Required";
+                                        }
+                                        if (propertyName == "nssP0LA")
+                                        {
+                                            if (*value == 1)
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["Port_0_PCIe_Link_Active"] =
+                                                    "PCIe Link Up";
+                                            else
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["Port_0_PCIe_Link_Active"] =
+                                                    "PCIe Link Down";
+                                        }
+                                        if (propertyName == "nssP1LA")
+                                        {
+                                            if (*value == 1)
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["Port_1_PCIe_Link_Active"] =
+                                                    "PCIe Link Up";
+                                            else
+                                                asyncResp->res.jsonValue
+                                                    ["Oem"]["OpenBmc"]
+                                                    ["Port_1_PCIe_Link_Active"] =
+                                                    "PCIe Link Down";
+                                        }
+                                    }
+                                }
+                            }
+                        },
+                        connectionName, path, "org.freedesktop.DBus.Properties",
+                        "GetAll",
+                        "xyz.openbmc_project.Common.SubsysHealthStatusPoll_"
+                        "Flag0");
+                },
+                "xyz.openbmc_project.ObjectMapper",
+                "/xyz/openbmc_project/object_mapper",
+                "xyz.openbmc_project.ObjectMapper", "GetSubTree",
+                "/xyz/openbmc_project/Nvme", 0,
+                std::array<const char*, 1>{"xyz.openbmc_project.Nvme"});
+        });
+}
+
+} // namespace redfish
