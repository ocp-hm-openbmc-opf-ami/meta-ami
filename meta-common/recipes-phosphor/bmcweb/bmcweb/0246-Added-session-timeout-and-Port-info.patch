From eea3115f7d26a6c8919c9ef1f535ca141427b42d Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Tue, 30 Apr 2024 18:03:09 +0530
Subject: [PATCH 246/246] Added session timeout and Port info

Description

Added session timeout and Port info

Test cases:

1) Get Call https://{{BMCIP}}/redfish/v1/SessionService/

{
    "@odata.id": "/redfish/v1/SessionService/",
    "@odata.type": "#SessionService.v1_0_2.SessionService",
    "Description": "Session Service",
    "Id": "SessionService",
    "Name": "Session Service",
    "Oem": {
        "OpenBmc": {
            "BMCwebPort": 443,
            "KVMSessionTimeout": 30
        }
    },
    "ServiceEnabled": true,
    "SessionTimeout": 1800,
    "Sessions": {
        "@odata.id": "/redfish/v1/SessionService/Sessions"
    }
}

2) Patch call https://{{BMCIP}}/redfish/v1/SessionService/

Request Body

{
    "SessionTimeout": 40,
    "Oem": {
        "OpenBmc": {
            "BMCwebPort": 443,
            "KVMSessionTimeout": 30
        }
    }
}

Response 200k

{
    "@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The request completed successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.16.0.Success",
            "MessageSeverity": "OK",
            "Resolution": "None"
        },
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The request completed successfully.",
            "MessageArgs": [],
            "MessageId": "Base.1.16.0.Success",
            "MessageSeverity": "OK",
            "Resolution": "None"
        }
    ],
    "SessionTimeOut@Message.ExtendedInfo": [
        {
            "@odata.type": "#Message.v1_1_1.Message",
            "Message": "The property SessionTimeOut was assigned the value '\"40\"' due to modification by the service.",
            "MessageArgs": [
                "SessionTimeOut",
                "\"40\""
            ],
            "MessageId": "Base.1.16.0.PropertyValueModified",
            "MessageSeverity": "Warning",
            "Resolution": "No resolution is required."
        }
    ]
}

3) Get Call https://{{BMCIP}}/redfish/v1/SessionService/

{
    "@odata.id": "/redfish/v1/SessionService/",
    "@odata.type": "#SessionService.v1_0_2.SessionService",
    "Description": "Session Service",
    "Id": "SessionService",
    "Name": "Session Service",
    "Oem": {
        "OpenBmc": {
            "BMCwebPort": 443,
            "KVMSessionTimeout": 30
        }
    },
    "ServiceEnabled": true,
    "SessionTimeout": 40,
    "Sessions": {
        "@odata.id": "/redfish/v1/SessionService/Sessions"
    }
}

NOTE :
Timeout range will be 30 - 86400 for KVM/BMCWEB sessiontimeout
Port Ranges from (0 - 65535)
Signed-off-by: Pranoy Goru <gorumanip@ami.com>
---
 redfish-core/lib/redfish_sessions.hpp | 137 ++++++++++++++++++++++++--
 1 file changed, 131 insertions(+), 6 deletions(-)

diff --git a/redfish-core/lib/redfish_sessions.hpp b/redfish-core/lib/redfish_sessions.hpp
index 601efc55..81d8ec3e 100644
--- a/redfish-core/lib/redfish_sessions.hpp
+++ b/redfish-core/lib/redfish_sessions.hpp
@@ -721,12 +721,60 @@ inline void
     asyncResp->res.jsonValue["Name"] = "Session Service";
     asyncResp->res.jsonValue["Id"] = "SessionService";
     asyncResp->res.jsonValue["Description"] = "Session Service";
-    asyncResp->res.jsonValue["SessionTimeout"] =
-        persistent_data::SessionStore::getInstance().getTimeoutInSeconds();
+    // asyncResp->res.jsonValue["SessionTimeout"] =
+    //     persistent_data::SessionStore::getInstance().getTimeoutInSeconds();
     asyncResp->res.jsonValue["ServiceEnabled"] = true;
 
     asyncResp->res.jsonValue["Sessions"]["@odata.id"] =
         "/redfish/v1/SessionService/Sessions";
+    crow::connections::systemBus->async_method_call(
+        [asyncResp](const boost::system::error_code ec,
+                    const std::variant<uint64_t>& value) {
+        if (ec)
+        {
+            BMCWEB_LOG_DEBUG("failed to get property Value  ", ec);
+            return;
+        }
+
+        const uint64_t* s = std::get_if<uint64_t>(&value);
+        asyncResp->res.jsonValue["SessionTimeout"] = *s;
+    },
+        "xyz.openbmc_project.Control.Service.Manager",
+        "/xyz/openbmc_project/control/service/bmcweb",
+        "org.freedesktop.DBus.Properties", "Get",
+        "xyz.openbmc_project.Control.Service.Attributes", "SessionTimeOut");
+    crow::connections::systemBus->async_method_call(
+        [asyncResp](const boost::system::error_code ec,
+                    const std::variant<uint16_t>& value) {
+        if (ec)
+        {
+            BMCWEB_LOG_DEBUG("failed to get property Value  ", ec);
+            return;
+        }
+
+        const uint16_t* s = std::get_if<uint16_t>(&value);
+        asyncResp->res.jsonValue["Oem"]["OpenBmc"]["BMCwebPort"] = *s;
+    },
+        "xyz.openbmc_project.Control.Service.Manager",
+        "/xyz/openbmc_project/control/service/bmcweb",
+        "org.freedesktop.DBus.Properties", "Get",
+        "xyz.openbmc_project.Control.Service.SocketAttributes", "Port");
+    crow::connections::systemBus->async_method_call(
+        [asyncResp](const boost::system::error_code ec,
+                    const std::variant<uint64_t>& value) {
+        if (ec)
+        {
+            BMCWEB_LOG_DEBUG("failed to get property Value  ", ec);
+            return;
+        }
+
+        const uint64_t* s = std::get_if<uint64_t>(&value);
+        asyncResp->res.jsonValue["Oem"]["OpenBmc"]["KVMSessionTimeout"] = *s;
+    },
+        "xyz.openbmc_project.Control.Service.Manager",
+        "/xyz/openbmc_project/control/service/start_2dipkvm",
+        "org.freedesktop.DBus.Properties", "Get",
+        "xyz.openbmc_project.Control.Service.Attributes", "SessionTimeOut");
 }
 
 inline void handleSessionServicePatch(
@@ -737,9 +785,10 @@ inline void handleSessionServicePatch(
     {
         return;
     }
-    std::optional<int64_t> sessionTimeout;
+    std::optional<uint64_t> sessionTimeout;
+    std::optional<nlohmann::json> oem;
     if (!json_util::readJsonPatch(req, asyncResp->res, "SessionTimeout",
-                                  sessionTimeout))
+                                  sessionTimeout, "Oem", oem))
     {
         return;
     }
@@ -756,8 +805,24 @@ inline void handleSessionServicePatch(
             std::chrono::seconds sessionTimeoutInseconds(*sessionTimeout);
             persistent_data::SessionStore::getInstance().updateSessionTimeout(
                 sessionTimeoutInseconds);
-            messages::propertyValueModified(asyncResp->res, "SessionTimeOut",
-                                            std::to_string(*sessionTimeout));
+
+            crow::connections::systemBus->async_method_call(
+                [asyncResp,
+                 sessionTimeout](const boost::system::error_code ec) {
+                if (ec)
+                {
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+                messages::propertyValueModified(
+                    asyncResp->res, "SessionTimeOut",
+                    std::to_string(*sessionTimeout));
+            },
+                "xyz.openbmc_project.Control.Service.Manager",
+                "/xyz/openbmc_project/control/service/bmcweb",
+                "org.freedesktop.DBus.Properties", "Set",
+                "xyz.openbmc_project.Control.Service.Attributes",
+                "SessionTimeOut", std::variant<uint64_t>(*sessionTimeout));
         }
         else
         {
@@ -765,6 +830,66 @@ inline void handleSessionServicePatch(
                                              "SessionTimeOut");
         }
     }
+
+    if (oem)
+    {
+        std::optional<nlohmann::json> openBmc;
+
+        if (!json_util::readJson(*oem, asyncResp->res, "OpenBmc", openBmc))
+        {
+            return;
+        }
+        if (openBmc)
+        {
+            std::optional<uint64_t> kvmSessionTimeout;
+            std::optional<uint16_t> bmcwebPort;
+            if (!json_util::readJson(*openBmc, asyncResp->res,
+                                     "KVMSessionTimeout", kvmSessionTimeout,
+                                     "BMCwebPort", bmcwebPort))
+            {
+                return;
+            }
+
+            if (kvmSessionTimeout)
+            {
+                crow::connections::systemBus->async_method_call(
+                    [asyncResp](const boost::system::error_code ec) {
+                    if (ec)
+                    {
+                        BMCWEB_LOG_ERROR("Error patching {}", ec);
+                        messages::internalError(asyncResp->res);
+                        return;
+                    }
+                    messages::success(asyncResp->res);
+                },
+                    "xyz.openbmc_project.Control.Service.Manager",
+                    "/xyz/openbmc_project/control/service/start_2dipkvm",
+                    "org.freedesktop.DBus.Properties", "Set",
+                    "xyz.openbmc_project.Control.Service.Attributes",
+                    "SessionTimeOut",
+                    std::variant<uint64_t>(*kvmSessionTimeout));
+            }
+
+            if (bmcwebPort)
+            {
+                crow::connections::systemBus->async_method_call(
+                    [asyncResp](const boost::system::error_code ec) {
+                    if (ec)
+                    {
+                        BMCWEB_LOG_ERROR("Error patching {}", ec);
+                        messages::internalError(asyncResp->res);
+                        return;
+                    }
+                    messages::success(asyncResp->res);
+                },
+                    "xyz.openbmc_project.Control.Service.Manager",
+                    "/xyz/openbmc_project/control/service/bmcweb",
+                    "org.freedesktop.DBus.Properties", "Set",
+                    "xyz.openbmc_project.Control.Service.SocketAttributes",
+                    "Port", std::variant<uint16_t>(*bmcwebPort));
+            }
+        }
+    }
 }
 
 inline void requestRoutesSession(App& app)
-- 
2.34.1

