From a2c10131043cbe07da883d071bece254b898dc9d Mon Sep 17 00:00:00 2001
From: Ginu George <ginugeorge@ami.com>
Date: Thu, 25 Jan 2024 13:46:34 +0530
Subject: [PATCH 128/128] DDNS Update Feature Support in Network

---
 include/dbus_utility.hpp                      |   3 +
 redfish-core/include/error_messages.hpp       |   8 +-
 redfish-core/include/schemas.hpp              |   1 +
 redfish-core/lib/ethernet.hpp                 | 519 +++++++++---------
 redfish-core/lib/metric_report_definition.hpp |  26 +-
 redfish-core/src/error_messages.cpp           |  12 +-
 scripts/update_schemas.py                     |   6 +
 static/redfish/v1/$metadata/index.xml         |   4 +
 8 files changed, 300 insertions(+), 279 deletions(-)

diff --git a/include/dbus_utility.hpp b/include/dbus_utility.hpp
index 933d733f..224eec04 100644
--- a/include/dbus_utility.hpp
+++ b/include/dbus_utility.hpp
@@ -49,6 +49,9 @@ namespace utility
 
 // clang-format off
 using DbusVariantType = std::variant<
+    std::tuple<bool,std::string>,
+    std::vector<std::tuple<std::string, bool, bool, std::string>>,
+    std::tuple<bool, uint8_t, std::string>,
     std::vector<std::tuple<std::string, std::string, std::string>>,
     std::vector<std::string>,
     std::vector<double>,
diff --git a/redfish-core/include/error_messages.hpp b/redfish-core/include/error_messages.hpp
index 1e65cfaf..305e2aa6 100644
--- a/redfish-core/include/error_messages.hpp
+++ b/redfish-core/include/error_messages.hpp
@@ -491,11 +491,11 @@ void propertyValueExternalConflict(crow::Response& res, std::string_view arg1,
  * @param[in] arg2 Parameter of message that will replace %2 in its body.
  *
  * @returns Message PropertyValueIncorrect formatted to JSON */
-nlohmann::json propertyValueIncorrect(const nlohmann::json& arg1,
-                                      std::string_view arg2);
+nlohmann::json propertyValueIncorrect(std::string_view arg1,
+                                      const nlohmann::json& arg2);
 
-void propertyValueIncorrect(crow::Response& res, const nlohmann::json& arg1,
-                            std::string_view arg2);
+void propertyValueIncorrect(crow::Response& res, std::string_view arg1,
+                            const nlohmann::json& arg2);
 
 /**
  * @brief Formats ResourceCreationConflict message into JSON
diff --git a/redfish-core/include/schemas.hpp b/redfish-core/include/schemas.hpp
index 0d47c6fc..fed47bf2 100644
--- a/redfish-core/include/schemas.hpp
+++ b/redfish-core/include/schemas.hpp
@@ -15,6 +15,7 @@
 namespace redfish
 {
     constexpr std::array schemas {
+        "AmiNetworkConfiguration",
         "AccountService",
         "ActionInfo",
         "AggregationService",
diff --git a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
index b250f6c1..f00b1e3a 100644
--- a/redfish-core/lib/ethernet.hpp
+++ b/redfish-core/lib/ethernet.hpp
@@ -2172,6 +2172,267 @@ inline void afterVlanCreate(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     asyncResp->res.addHeader("Location", vlanInterfaceUri.buffer());
 }
 
+inline void handleEthernetInterfaceInstanceGet(
+    App& app, const crow::Request& req,
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const std::string& ifaceId)
+{
+    if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+    {
+        return;
+    }
+    getEthernetIfaceData(
+        ifaceId,
+        [asyncResp, ifaceId](const bool& success,
+                                const EthernetInterfaceData& ethData,
+                                const std::vector<IPv4AddressData>& ipv4Data,
+                                const std::vector<IPv6AddressData>& ipv6Data) {
+        if (!success)
+        {
+            // TODO(Pawel)consider distinguish between non
+            // existing object, and other errors
+            messages::resourceNotFound(asyncResp->res, "EthernetInterface",
+                                        ifaceId);
+            return;
+        }
+
+        asyncResp->res.jsonValue["@odata.type"] =
+            "#EthernetInterface.v1_9_0.EthernetInterface";
+        asyncResp->res.jsonValue["Name"] = "Manager Ethernet Interface";
+        asyncResp->res.jsonValue["Description"] =
+            "Management Network Interface";
+
+        parseInterfaceData(asyncResp, ifaceId, ethData, ipv4Data, ipv6Data);
+    });
+}
+
+inline void handleEthernetInterfaceInstancePatch(
+    App& app, const crow::Request& req,
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const std::string& ifaceId)
+{
+    if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+    {
+        return;
+    }
+    std::optional<std::string> hostname;
+    std::optional<std::string> fqdn;
+    std::optional<std::string> macAddress;
+    std::optional<std::string> ipv6DefaultGateway;
+    std::optional<nlohmann::json> ipv6StaticDefaultGateways;
+    std::optional<nlohmann::json::array_t> ipv4StaticAddresses;
+    std::optional<nlohmann::json::array_t> ipv6StaticAddresses;
+    std::optional<std::vector<std::string>> staticNameServers;
+    std::optional<nlohmann::json> dhcpv4;
+    std::optional<nlohmann::json> dhcpv6;
+    std::optional<bool> ipv6AutoConfigEnabled;
+    std::optional<bool> interfaceEnabled;
+    std::optional<size_t> mtuSize;
+    DHCPParameters v4dhcpParms;
+    DHCPParameters v6dhcpParms;
+    // clang-format off
+    if (!json_util::readJsonPatch(
+            req, asyncResp->res,
+            "DHCPv4", dhcpv4,
+            "DHCPv6", dhcpv6,
+            "FQDN", fqdn,
+            "HostName", hostname,
+            "IPv4StaticAddresses", ipv4StaticAddresses,
+            "IPv6DefaultGateway", ipv6DefaultGateway,
+            "IPv6StaticDefaultGateways",ipv6StaticDefaultGateways,
+            "IPv6StaticAddresses", ipv6StaticAddresses,
+            "InterfaceEnabled", interfaceEnabled,
+            "MACAddress", macAddress,
+            "MTUSize", mtuSize,
+            "StatelessAddressAutoConfig/IPv6AutoConfigEnabled", ipv6AutoConfigEnabled,
+            "StaticNameServers", staticNameServers
+            )
+        )
+    {
+        return;
+    }
+    //clang-format on
+    if (dhcpv4)
+    {
+        if (!json_util::readJson(*dhcpv4, asyncResp->res, "DHCPEnabled",
+                                    v4dhcpParms.dhcpv4Enabled, "UseDNSServers",
+                                    v4dhcpParms.useDnsServers, "UseNTPServers",
+                                    v4dhcpParms.useNtpServers, "UseDomainName",
+                                    v4dhcpParms.useDomainName))
+        {
+            return;
+        }
+    }
+
+    if (dhcpv6)
+    {
+        if (!json_util::readJson(*dhcpv6, asyncResp->res, "OperatingMode",
+                                    v6dhcpParms.dhcpv6OperatingMode,
+                                    "UseDNSServers", v6dhcpParms.useDnsServers,
+                                    "UseNTPServers", v6dhcpParms.useNtpServers,
+                                    "UseDomainName",
+                                    v6dhcpParms.useDomainName))
+        {
+            return;
+        }
+    }
+    // Get single eth interface data, and call the below callback
+    // for JSON preparation
+    getEthernetIfaceData(
+        ifaceId,
+        [asyncResp, ifaceId, hostname = std::move(hostname),
+            fqdn = std::move(fqdn), macAddress = std::move(macAddress),
+            ipv4StaticAddresses = std::move(ipv4StaticAddresses),
+            ipv6DefaultGateway = std::move(ipv6DefaultGateway),
+            ipv6StaticDefaultGateways =
+                                    std::move(ipv6StaticDefaultGateways),
+            ipv6StaticAddresses = std::move(ipv6StaticAddresses),
+            staticNameServers = std::move(staticNameServers),
+            dhcpv4 = std::move(dhcpv4), dhcpv6 = std::move(dhcpv6), mtuSize,
+            ipv6AutoConfigEnabled, v4dhcpParms = std::move(v4dhcpParms),
+            v6dhcpParms = std::move(v6dhcpParms), interfaceEnabled](
+            const bool& success, const EthernetInterfaceData& ethData,
+            const std::vector<IPv4AddressData>& ipv4Data,
+            const std::vector<IPv6AddressData>& ipv6Data) {
+        if (!success)
+        {
+            // ... otherwise return error
+            // TODO(Pawel)consider distinguish between non
+            // existing object, and other errors
+            messages::resourceNotFound(asyncResp->res, "EthernetInterface",
+                                        ifaceId);
+            return;
+        }
+        bool ipv4AddressValid = true;
+        if(ipv4StaticAddresses)  // IPv4StaticAddresses attribute is present
+        {
+            if(!validateIPv4Json(asyncResp,*ipv4StaticAddresses))
+            {
+                //Invalid IPv4 address provided
+                ipv4AddressValid =  false;
+            }
+        }
+        bool ipv6AddressValid = true;
+        if(ipv6StaticAddresses) // IPv6StaticAddresses attribute is present
+        {
+            if(!(validateipv6AddressJson(asyncResp, *ipv6StaticAddresses)))
+            {
+                //Invalid IPv6 address provided
+                ipv6AddressValid = false;
+            }
+        }
+
+        if (dhcpv4 || dhcpv6)
+        {
+            if(dhcpv4)
+            {
+                if(v4dhcpParms.dhcpv4Enabled)
+                {
+                    const bool v4Value = *v4dhcpParms.dhcpv4Enabled;
+
+                    if (!v4Value) // DHCPv4.DHCPEnabled attribute is false
+                    {
+                        if (!ipv4StaticAddresses) // and IPv4StaticAddresses attribute is not present
+                        {
+                            messages::propertyMissing(asyncResp->res, "IPv4StaticAddresses");
+                            return;
+                        }
+                    }
+                    else if(v4Value && ipv4StaticAddresses) // DHCPv4.DHCPEnabled attribute is true and IPv4StaticAddresses attribute is present
+                    {
+                        messages::propertyValueConflict(asyncResp->res, "DHCPv4.DHCPEnabled","IPv4StaticAddresses");
+                        return;
+                    }
+
+                }
+            }
+            if(ipv6AddressValid && ipv4AddressValid)
+            {
+                handleDHCPPatch(ifaceId, ethData, v4dhcpParms, v6dhcpParms,
+                            asyncResp);
+            }
+
+        }
+
+        if (hostname)
+        {
+            handleHostnamePatch(*hostname, asyncResp);
+        }
+
+        if (ipv6AutoConfigEnabled)
+        {
+            handleSLAACAutoConfigPatch(ifaceId, *ipv6AutoConfigEnabled,
+                                        asyncResp);
+        }
+
+        if (fqdn)
+        {
+            handleFqdnPatch(ifaceId, *fqdn, asyncResp);
+        }
+
+        if (macAddress)
+        {
+            handleMACAddressPatch(ifaceId, *macAddress, asyncResp);
+        }
+
+        if (ipv4StaticAddresses && ipv4AddressValid)
+        {
+            if(!v4dhcpParms.dhcpv4Enabled)
+            {
+                messages::propertyMissing(asyncResp->res, "DHCPv4.DHCPEnabled");
+                return;
+            }
+            else
+            {
+                // TODO(ed) for some reason the capture of
+                // ipv4Addresses above is returning a const value,
+                // not a non-const value. This doesn't really work
+                // for us, as we need to be able to efficiently move
+                // out the intermedia nlohmann::json objects. This
+                // makes a copy of the structure, and operates on
+                // that, but could be done more efficiently
+                nlohmann::json::array_t ipv4Static = *ipv4StaticAddresses;
+                handleIPv4StaticPatch(ifaceId, ipv4Static, ipv4Data, asyncResp);
+            }
+        }
+
+        if (ipv6StaticDefaultGateways)
+        {
+            nlohmann::json ipv6Gateways = *ipv6StaticDefaultGateways;
+            handleIPv6StaticDefaultGatewaysPatch(ifaceId, ipv6Gateways,
+                            asyncResp);
+        }
+
+        if (staticNameServers)
+        {
+            handleStaticNameServersPatch(ifaceId, *staticNameServers,
+                                            asyncResp);
+        }
+
+        if (ipv6DefaultGateway)
+        {
+            messages::propertyNotWritable(asyncResp->res,
+                                            "IPv6DefaultGateway");
+        }
+
+        if (ipv6StaticAddresses && ipv6AddressValid)
+        {
+            handleIPv6StaticAddressesPatch(ifaceId, *ipv6StaticAddresses,
+                                            ipv6Data, asyncResp);
+        }
+
+        if (interfaceEnabled)
+        {
+            setEthernetInterfaceBoolProperty(ifaceId, "NICEnabled",
+                                                *interfaceEnabled, asyncResp);
+        }
+
+        if (mtuSize)
+        {
+            handleMTUSizePatch(ifaceId, *mtuSize, asyncResp);
+        }
+    });
+}
 inline void handleEthernetInterfaceInstanceDelete(
     App& app, const crow::Request& req,
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -2328,267 +2589,13 @@ inline void requestEthernetInterfacesRoutes(App& app)
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/EthernetInterfaces/<str>/")
         .privileges(redfish::privileges::getEthernetInterface)
         .methods(boost::beast::http::verb::get)(
-            [&app](const crow::Request& req,
-                   const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-                   const std::string& ifaceId) {
-        if (!redfish::setUpRedfishRoute(app, req, asyncResp))
-        {
-            return;
-        }
-        getEthernetIfaceData(
-            ifaceId,
-            [asyncResp, ifaceId](const bool& success,
-                                 const EthernetInterfaceData& ethData,
-                                 const std::vector<IPv4AddressData>& ipv4Data,
-                                 const std::vector<IPv6AddressData>& ipv6Data) {
-            if (!success)
-            {
-                // TODO(Pawel)consider distinguish between non
-                // existing object, and other errors
-                messages::resourceNotFound(asyncResp->res, "EthernetInterface",
-                                           ifaceId);
-                return;
-            }
-
-            asyncResp->res.jsonValue["@odata.type"] =
-                "#EthernetInterface.v1_9_0.EthernetInterface";
-            asyncResp->res.jsonValue["Name"] = "Manager Ethernet Interface";
-            asyncResp->res.jsonValue["Description"] =
-                "Management Network Interface";
-
-            parseInterfaceData(asyncResp, ifaceId, ethData, ipv4Data, ipv6Data);
-        });
-    });
+            std::bind_front(handleEthernetInterfaceInstanceGet, std::ref(app)));
 
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/EthernetInterfaces/<str>/")
         .privileges(
             redfish::privileges::patchSubOverManagerEthernetInterfaceCollection)
         .methods(boost::beast::http::verb::patch)(
-            [&app](const crow::Request& req,
-                   const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
-                   const std::string& ifaceId) {
-        if (!redfish::setUpRedfishRoute(app, req, asyncResp))
-        {
-            return;
-        }
-        std::optional<std::string> hostname;
-        std::optional<std::string> fqdn;
-        std::optional<std::string> macAddress;
-        std::optional<std::string> ipv6DefaultGateway;
-        std::optional<nlohmann::json> ipv6StaticDefaultGateways;
-        std::optional<nlohmann::json::array_t> ipv4StaticAddresses;
-        std::optional<nlohmann::json::array_t> ipv6StaticAddresses;
-        std::optional<std::vector<std::string>> staticNameServers;
-        std::optional<nlohmann::json> dhcpv4;
-        std::optional<nlohmann::json> dhcpv6;
-        std::optional<bool> ipv6AutoConfigEnabled;
-        std::optional<bool> interfaceEnabled;
-        std::optional<size_t> mtuSize;
-        DHCPParameters v4dhcpParms;
-        DHCPParameters v6dhcpParms;
-        // clang-format off
-        if (!json_util::readJsonPatch(
-                req, asyncResp->res,
-                "DHCPv4", dhcpv4,
-                "DHCPv6", dhcpv6,
-                "FQDN", fqdn,
-                "HostName", hostname,
-                "IPv4StaticAddresses", ipv4StaticAddresses,
-                "IPv6DefaultGateway", ipv6DefaultGateway,
-                "IPv6StaticDefaultGateways",ipv6StaticDefaultGateways,
-                "IPv6StaticAddresses", ipv6StaticAddresses,
-                "InterfaceEnabled", interfaceEnabled,
-                "MACAddress", macAddress,
-                "MTUSize", mtuSize,
-                "StatelessAddressAutoConfig/IPv6AutoConfigEnabled", ipv6AutoConfigEnabled,
-                "StaticNameServers", staticNameServers
-                )
-            )
-        {
-            return;
-        }
-        //clang-format on
-        if (dhcpv4)
-        {
-            if (!json_util::readJson(*dhcpv4, asyncResp->res, "DHCPEnabled",
-                                     v4dhcpParms.dhcpv4Enabled, "UseDNSServers",
-                                     v4dhcpParms.useDnsServers, "UseNTPServers",
-                                     v4dhcpParms.useNtpServers, "UseDomainName",
-                                     v4dhcpParms.useDomainName))
-            {
-                return;
-            }
-        }
-
-        if (dhcpv6)
-        {
-            if (!json_util::readJson(*dhcpv6, asyncResp->res, "OperatingMode",
-                                     v6dhcpParms.dhcpv6OperatingMode,
-                                     "UseDNSServers", v6dhcpParms.useDnsServers,
-                                     "UseNTPServers", v6dhcpParms.useNtpServers,
-                                     "UseDomainName",
-                                     v6dhcpParms.useDomainName))
-            {
-                return;
-            }
-        }
-        // Get single eth interface data, and call the below callback
-        // for JSON preparation
-        getEthernetIfaceData(
-            ifaceId,
-            [asyncResp, ifaceId, hostname = std::move(hostname),
-             fqdn = std::move(fqdn), macAddress = std::move(macAddress),
-             ipv4StaticAddresses = std::move(ipv4StaticAddresses),
-             ipv6DefaultGateway = std::move(ipv6DefaultGateway),
-             ipv6StaticDefaultGateways =
-                                        std::move(ipv6StaticDefaultGateways),
-             ipv6StaticAddresses = std::move(ipv6StaticAddresses),
-             staticNameServers = std::move(staticNameServers),
-             dhcpv4 = std::move(dhcpv4), dhcpv6 = std::move(dhcpv6), mtuSize,
-             ipv6AutoConfigEnabled, v4dhcpParms = std::move(v4dhcpParms),
-             v6dhcpParms = std::move(v6dhcpParms), interfaceEnabled](
-                const bool& success, const EthernetInterfaceData& ethData,
-                const std::vector<IPv4AddressData>& ipv4Data,
-                const std::vector<IPv6AddressData>& ipv6Data) {
-            if (!success)
-            {
-                // ... otherwise return error
-                // TODO(Pawel)consider distinguish between non
-                // existing object, and other errors
-                messages::resourceNotFound(asyncResp->res, "EthernetInterface",
-                                           ifaceId);
-                return;
-            }
-            bool ipv4AddressValid = true;
-            if(ipv4StaticAddresses)  // IPv4StaticAddresses attribute is present
-            {
-                if(!validateIPv4Json(asyncResp,*ipv4StaticAddresses))
-                {
-                    //Invalid IPv4 address provided
-                    ipv4AddressValid =  false;
-                }
-            }
-            bool ipv6AddressValid = true;
-            if(ipv6StaticAddresses) // IPv6StaticAddresses attribute is present
-            {
-                if(!(validateipv6AddressJson(asyncResp, *ipv6StaticAddresses)))
-                {
-                    //Invalid IPv6 address provided
-                    ipv6AddressValid = false;
-                }
-            }
-
-            if (dhcpv4 || dhcpv6)
-            {
-		        if(dhcpv4)
-                {
-                    if(v4dhcpParms.dhcpv4Enabled)
-                    {
-                        const bool v4Value = *v4dhcpParms.dhcpv4Enabled;
-
-                        if (!v4Value) // DHCPv4.DHCPEnabled attribute is false
-                        {
-                            if (!ipv4StaticAddresses) // and IPv4StaticAddresses attribute is not present
-                            {
-                                messages::propertyMissing(asyncResp->res, "IPv4StaticAddresses");
-                                return;  
-                            }
-                        }
-                        else if(v4Value && ipv4StaticAddresses) // DHCPv4.DHCPEnabled attribute is true and IPv4StaticAddresses attribute is present
-                        {
-                            messages::propertyValueConflict(asyncResp->res, "DHCPv4.DHCPEnabled","IPv4StaticAddresses");
-                            return;
-                        }
-
-                    }
-                }    
-                if(ipv6AddressValid && ipv4AddressValid)
-                {
-                    handleDHCPPatch(ifaceId, ethData, v4dhcpParms, v6dhcpParms,
-                                asyncResp);
-                }
-
-            }
-
-            if (hostname)
-            {
-                handleHostnamePatch(*hostname, asyncResp);
-            }
-
-            if (ipv6AutoConfigEnabled)
-            {
-                handleSLAACAutoConfigPatch(ifaceId, *ipv6AutoConfigEnabled,
-                                           asyncResp);
-            }
-
-            if (fqdn)
-            {
-                handleFqdnPatch(ifaceId, *fqdn, asyncResp);
-            }
-
-            if (macAddress)
-            {
-                handleMACAddressPatch(ifaceId, *macAddress, asyncResp);
-            }
-
-            if (ipv4StaticAddresses && ipv4AddressValid)
-            {
-		if(!v4dhcpParms.dhcpv4Enabled)
-		{
-		   messages::propertyMissing(asyncResp->res, "DHCPv4.DHCPEnabled");
-		   return;
-		}
-		else
-		{
-		   // TODO(ed) for some reason the capture of
-		   // ipv4Addresses above is returning a const value,
-		   // not a non-const value. This doesn't really work
-		   // for us, as we need to be able to efficiently move
-		   // out the intermedia nlohmann::json objects. This
-		   // makes a copy of the structure, and operates on
-		   // that, but could be done more efficiently
-                   nlohmann::json::array_t ipv4Static = *ipv4StaticAddresses;
-                   handleIPv4StaticPatch(ifaceId, ipv4Static, ipv4Data, asyncResp);
-		}
-            }
-
-            if (ipv6StaticDefaultGateways)
-            {
-                nlohmann::json ipv6Gateways = *ipv6StaticDefaultGateways;
-                handleIPv6StaticDefaultGatewaysPatch(ifaceId, ipv6Gateways,
-                                asyncResp);
-            }
-
-            if (staticNameServers)
-            {
-                handleStaticNameServersPatch(ifaceId, *staticNameServers,
-                                             asyncResp);
-            }
-
-            if (ipv6DefaultGateway)
-            {
-                messages::propertyNotWritable(asyncResp->res,
-                                              "IPv6DefaultGateway");
-            }
-
-            if (ipv6StaticAddresses && ipv6AddressValid)
-            {
-                handleIPv6StaticAddressesPatch(ifaceId, *ipv6StaticAddresses,
-                                               ipv6Data, asyncResp);
-            }
-
-            if (interfaceEnabled)
-            {
-                setEthernetInterfaceBoolProperty(ifaceId, "NICEnabled",
-                                                 *interfaceEnabled, asyncResp);
-            }
-
-            if (mtuSize)
-            {
-                handleMTUSizePatch(ifaceId, *mtuSize, asyncResp);
-            }
-            });
-        });
+            std::bind_front(handleEthernetInterfaceInstancePatch, std::ref(app)));
 
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/EthernetInterfaces/<str>/")
         .privileges(redfish::privileges::deleteEthernetInterface)
diff --git a/redfish-core/lib/metric_report_definition.hpp b/redfish-core/lib/metric_report_definition.hpp
index 2eb80140..1d93f38e 100644
--- a/redfish-core/lib/metric_report_definition.hpp
+++ b/redfish-core/lib/metric_report_definition.hpp
@@ -58,7 +58,7 @@ class ErrorVerificator
         if (id && ec == boost::system::errc::invalid_argument &&
             getError() == "Id")
         {
-            messages::propertyValueIncorrect(res, *id, "Id");
+            messages::propertyValueIncorrect(res, "Id", *id);
             return false;
         }
 
@@ -70,7 +70,7 @@ class ErrorVerificator
         if (name && ec == boost::system::errc::invalid_argument &&
             getError() == "Name")
         {
-            messages::propertyValueIncorrect(res, *name, "Name");
+            messages::propertyValueIncorrect(res, "Name", *name);
             return false;
         }
 
@@ -82,8 +82,8 @@ class ErrorVerificator
         if (reportingType && ec == boost::system::errc::invalid_argument &&
             getError() == "ReportingType")
         {
-            messages::propertyValueIncorrect(res, *reportingType,
-                                             "MetricReportDefinitionType");
+            messages::propertyValueIncorrect(res, "MetricReportDefinitionType",
+                                             *reportingType);
             return false;
         }
 
@@ -95,8 +95,8 @@ class ErrorVerificator
         if (appendLimit && ec == boost::system::errc::invalid_argument &&
             getError() == "AppendLimit")
         {
-            messages::propertyValueIncorrect(res, std::to_string(*appendLimit),
-                                             "AppendLimit");
+            messages::propertyValueIncorrect(res, "AppendLimit",
+                                             std::to_string(*appendLimit));
             return false;
         }
 
@@ -110,7 +110,7 @@ class ErrorVerificator
             getError() == "ReportActions")
         {
             nlohmann::json tmp = nlohmann::json::array_t{*reportActions};
-            messages::propertyValueIncorrect(res, tmp.dump(), "ReportActions");
+            messages::propertyValueIncorrect(res, "ReportActions", tmp.dump());
             return false;
         }
 
@@ -124,8 +124,8 @@ class ErrorVerificator
             ec == boost::system::errc::invalid_argument &&
             getError() == "Interval")
         {
-            messages::propertyValueIncorrect(res, *recurrenceIntervalStr,
-                                             "RecurrenceInterval");
+            messages::propertyValueIncorrect(res, "RecurrenceInterval",
+                                             *recurrenceIntervalStr);
             return false;
         }
 
@@ -137,8 +137,8 @@ class ErrorVerificator
         if (reportUpdates && ec == boost::system::errc::invalid_argument &&
             getError() == "ReportUpdates")
         {
-            messages::propertyValueIncorrect(res, *reportUpdates,
-                                             "ReportUpdates");
+            messages::propertyValueIncorrect(res, "ReportUpdates",
+                                             *reportUpdates);
             return false;
         }
 
@@ -154,8 +154,8 @@ class ErrorVerificator
             nlohmann::json readingParameters = nlohmann::json::array();
             readingParameters = *redfishMetrics;
 
-            messages::propertyValueIncorrect(res, readingParameters.dump(),
-                                             "MetricProperties");
+            messages::propertyValueIncorrect(res, "MetricProperties",
+                                             readingParameters.dump());
             return false;
         }
 
diff --git a/redfish-core/src/error_messages.cpp b/redfish-core/src/error_messages.cpp
index c20acc5e..b2ddf3e3 100644
--- a/redfish-core/src/error_messages.cpp
+++ b/redfish-core/src/error_messages.cpp
@@ -860,17 +860,17 @@ void propertyValueExternalConflict(crow::Response& res, std::string_view arg1,
  * See header file for more information
  * @endinternal
  */
-nlohmann::json propertyValueIncorrect(const nlohmann::json& arg1,
-                                      std::string_view arg2)
+nlohmann::json propertyValueIncorrect(std::string_view arg1,
+                                      const nlohmann::json& arg2)
 {
-    std::string arg1Str = arg1.dump(2, ' ', true,
+    std::string arg2Str = arg2.dump(2, ' ', true,
                                     nlohmann::json::error_handler_t::replace);
     return getLog(redfish::registries::base::Index::propertyValueIncorrect,
-                  std::to_array<std::string_view>({arg1Str, arg2}));
+                  std::to_array<std::string_view>({arg1, arg2Str}));
 }
 
-void propertyValueIncorrect(crow::Response& res, const nlohmann::json& arg1,
-                            std::string_view arg2)
+void propertyValueIncorrect(crow::Response& res, std::string_view arg1,
+                            const nlohmann::json& arg2)
 {
     res.result(boost::beast::http::status::bad_request);
     addMessageToErrorJson(res.jsonValue, propertyValueIncorrect(arg1, arg2));
diff --git a/scripts/update_schemas.py b/scripts/update_schemas.py
index d2dc9eb6..27c5e30c 100755
--- a/scripts/update_schemas.py
+++ b/scripts/update_schemas.py
@@ -385,6 +385,12 @@ with open(metadata_index_path, "w") as metadata_index:
     metadata_index.write("        <edmx:Include Namespace=\"AMIChassisFRU.v1_0_0\"/>\n")
     metadata_index.write("    </edmx:Reference>\n")
 
+    metadata_index.write(
+        "    <edmx:Reference Uri=\"/redfish/v1/schema/AmiNetworkConfiguration_v1.xml\">\n")
+    metadata_index.write("        <edmx:Include Namespace=\"AmiNetworkConfiguration\"/>\n")
+    metadata_index.write("        <edmx:Include Namespace=\"AmiNetworkConfiguration.v1_0_0\"/>\n")
+    metadata_index.write("    </edmx:Reference>\n")
+
     metadata_index.write("</edmx:Edmx>\n")
 
 
diff --git a/static/redfish/v1/$metadata/index.xml b/static/redfish/v1/$metadata/index.xml
index c514f60b..79d5045d 100644
--- a/static/redfish/v1/$metadata/index.xml
+++ b/static/redfish/v1/$metadata/index.xml
@@ -3643,6 +3643,10 @@
         <edmx:Include Namespace="OemStorage"/>
         <edmx:Include Namespace="OemStorage.v1_0_0"/>
     </edmx:Reference>
+    <edmx:Reference Uri="/redfish/v1/schema/AmiNetworkConfiguration_v1.xml">
+        <edmx:Include Namespace="AmiNetworkConfiguration"/>
+        <edmx:Include Namespace="AmiNetworkConfiguration.v1_0_0"/>
+    </edmx:Reference>
     <edmx:Reference Uri="/redfish/v1/schema/AMIPcieSwitchCollection_v1.xml">
         <edmx:Include Namespace="AMIPcieSwitchCollection"/>
     </edmx:Reference>
-- 
2.39.2

