From 41a7397ec0daa6e81e0821d5c716457d483e067f Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Fri, 13 Oct 2023 11:00:14 +0530
Subject: [PATCH 2/2] Fixed Clang-format issues in Redfish-core

---
 redfish-core/lib/account_service.hpp          | 340 +++++++++---------
 redfish-core/lib/bios.hpp                     |  32 +-
 redfish-core/lib/cable.hpp                    |   8 +-
 redfish-core/lib/certificate_service.hpp      |  20 +-
 redfish-core/lib/chassis.hpp                  | 125 ++++---
 redfish-core/lib/cups_service.hpp             |  14 +-
 redfish-core/lib/ethernet.hpp                 |  75 ++--
 redfish-core/lib/event_service.hpp            |  20 +-
 redfish-core/lib/eventservice_sse.hpp         |   2 +-
 redfish-core/lib/fabric_adapters.hpp          |  12 +-
 redfish-core/lib/fan.hpp                      |  18 +-
 redfish-core/lib/fan_from_sensor.hpp          |   8 +-
 redfish-core/lib/health.hpp                   |   4 +-
 redfish-core/lib/hypervisor_system.hpp        |  81 +++--
 redfish-core/lib/led.hpp                      |  10 +-
 redfish-core/lib/license_service.hpp          |  18 +-
 redfish-core/lib/log_services.hpp             | 110 +++---
 redfish-core/lib/managers.hpp                 |  50 +--
 redfish-core/lib/memory.hpp                   |  10 +-
 redfish-core/lib/message_registries.hpp       |   3 +-
 redfish-core/lib/meterstatedata.hpp           |   8 +-
 redfish-core/lib/metric_report.hpp            |   8 +-
 redfish-core/lib/metric_report_definition.hpp |  30 +-
 redfish-core/lib/network_protocol.hpp         |  24 +-
 redfish-core/lib/pcie.hpp                     |  22 +-
 redfish-core/lib/pcie_slots.hpp               |   6 +-
 redfish-core/lib/power.hpp                    |   6 +-
 redfish-core/lib/power_supply.hpp             |  24 +-
 redfish-core/lib/processor.hpp                |  41 ++-
 redfish-core/lib/redfish_sessions.hpp         |   9 +-
 redfish-core/lib/redfish_util.hpp             |   8 +-
 redfish-core/lib/roles.hpp                    |   4 +-
 redfish-core/lib/sensor_patching.hpp          |   4 +-
 redfish-core/lib/sensors.hpp                  |  38 +-
 redfish-core/lib/storage.hpp                  |  42 ++-
 redfish-core/lib/systems.hpp                  | 187 +++++-----
 redfish-core/lib/task.hpp                     |  14 +-
 redfish-core/lib/telemetry_service.hpp        |   2 +-
 redfish-core/lib/thermal.hpp                  |   4 +-
 redfish-core/lib/thermal_subsystem.hpp        |   2 +-
 redfish-core/lib/trigger.hpp                  |  10 +-
 redfish-core/lib/update_service.hpp           |  54 +--
 redfish-core/lib/virtual_media.hpp            |  26 +-
 redfish-core/src/registries.cpp               |   2 +-
 44 files changed, 764 insertions(+), 771 deletions(-)

diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index b3bf788b..8c9f2c5e 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -263,14 +263,14 @@ inline void
         *crow::connections::systemBus, "xyz.openbmc_project.User.Manager",
         dbusObjectPath, "xyz.openbmc_project.User.Attributes", "UserGroups",
         updatedUserGroups, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
-                messages::internalError(asyncResp->res);
-                return;
-            }
-            messages::success(asyncResp->res);
-        });
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        messages::success(asyncResp->res);
+    });
 }
 
 inline void userErrorMessageHandler(
@@ -382,7 +382,7 @@ inline void handleRoleMapPatch(
                     }
                     asyncResp->res.jsonValue[serverType]["RemoteRoleMapping"]
                                             [index] = nullptr;
-                    },
+                },
                     ldapDbusService, roleMapObjData[index].first,
                     "xyz.openbmc_project.Object.Delete", "Delete");
             }
@@ -452,7 +452,7 @@ inline void handleRoleMapPatch(
                         asyncResp->res
                             .jsonValue[serverType]["RemoteRoleMapping"][index]
                                       ["RemoteGroup"] = *remoteGroup;
-                        });
+                    });
                 }
 
                 // If "LocalRole" info is provided
@@ -486,7 +486,7 @@ inline void handleRoleMapPatch(
                         asyncResp->res
                             .jsonValue[serverType]["RemoteRoleMapping"][index]
                                       ["LocalRole"] = *localRole;
-                        });
+                    });
                 }
             }
             // Create a new RoleMapping Object.
@@ -539,7 +539,7 @@ inline void handleRoleMapPatch(
                     roleMapEntry["LocalRole"] = *localRole;
                     roleMapEntry["RemoteGroup"] = *remoteGroup;
                     remoteRoleJson.emplace_back(std::move(roleMapEntry));
-                    },
+                },
                     ldapDbusService, dbusObjectPath, ldapPrivMapperInterface,
                     "Create", *remoteGroup,
                     getPrivilegeFromRoleId(std::move(*localRole)));
@@ -711,8 +711,8 @@ inline void getLDAPConfigData(const std::string& ldapType,
                 }
             }
             callback(true, confData, ldapType);
-            });
         });
+    });
 }
 
 /**
@@ -828,7 +828,7 @@ inline void handleServiceAddressPatch(
                                             serviceAddressList.front());
         }
         BMCWEB_LOG_DEBUG("Updated the service address");
-        });
+    });
 }
 /**
  * @brief updates the LDAP Bind DN and updates the
@@ -976,7 +976,7 @@ inline void
             serverTypeJson["LDAPService"]["SearchSettings"];
         searchSettingsJson["UsernameAttribute"] = userNameAttribute;
         BMCWEB_LOG_DEBUG("Updated the user name attr.");
-        });
+    });
 }
 /**
  * @brief updates the LDAP group attribute and updates the
@@ -1010,7 +1010,7 @@ inline void handleGroupNameAttrPatch(
             serverTypeJson["LDAPService"]["SearchSettings"];
         searchSettingsJson["GroupsAttribute"] = groupsAttribute;
         BMCWEB_LOG_DEBUG("Updated the groupname attr");
-        });
+    });
 }
 /**
  * @brief updates the LDAP service enable and updates the
@@ -1040,7 +1040,7 @@ inline void handleServiceEnablePatch(
         asyncResp->res.jsonValue[ldapServerElementName]["ServiceEnabled"] =
             serviceEnabled;
         BMCWEB_LOG_DEBUG("Updated Service enable = {}", serviceEnabled);
-        });
+    });
 }
 
 inline void
@@ -1295,7 +1295,7 @@ inline void handleLDAPPatch(nlohmann::json& input,
             handleRoleMapPatch(asyncResp, confData.groupRoleList, serverT,
                                *remoteRoleMapData);
         }
-        });
+    });
 }
 
 inline void updateUserProperties(
@@ -1313,100 +1313,100 @@ inline void updateUserProperties(
         dbusObjectPath, [dbusObjectPath, username, password, roleId, enabled,
                          locked, accountTypes(std::move(accountTypes)),
                          userSelf, asyncResp{std::move(asyncResp)}](int rc) {
-            if (rc <= 0)
+        if (rc <= 0)
+        {
+            messages::resourceNotFound(asyncResp->res, "ManagerAccount",
+                                       username);
+            return;
+        }
+
+        if (password)
+        {
+            int retval = pamUpdatePassword(username, *password);
+
+            if (retval == PAM_USER_UNKNOWN)
             {
                 messages::resourceNotFound(asyncResp->res, "ManagerAccount",
                                            username);
+            }
+            else if (retval == PAM_AUTHTOK_ERR)
+            {
+                // If password is invalid
+                messages::propertyValueFormatError(asyncResp->res, *password,
+                                                   "Password");
+                BMCWEB_LOG_ERROR("pamUpdatePassword Failed");
+            }
+            else if (retval != PAM_SUCCESS)
+            {
+                messages::internalError(asyncResp->res);
                 return;
             }
-
-            if (password)
+            else
             {
-                int retval = pamUpdatePassword(username, *password);
+                messages::success(asyncResp->res);
+            }
+        }
 
-                if (retval == PAM_USER_UNKNOWN)
-                {
-                    messages::resourceNotFound(asyncResp->res, "ManagerAccount",
-                                               username);
-                }
-                else if (retval == PAM_AUTHTOK_ERR)
-                {
-                    // If password is invalid
-                    messages::propertyValueFormatError(asyncResp->res,
-                                                       *password, "Password");
-                    BMCWEB_LOG_ERROR("pamUpdatePassword Failed");
-                }
-                else if (retval != PAM_SUCCESS)
+        if (enabled)
+        {
+            sdbusplus::asio::setProperty(
+                *crow::connections::systemBus,
+                "xyz.openbmc_project.User.Manager", dbusObjectPath,
+                "xyz.openbmc_project.User.Attributes", "UserEnabled", *enabled,
+                [asyncResp](const boost::system::error_code& ec) {
+                if (ec)
                 {
+                    BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
                     messages::internalError(asyncResp->res);
                     return;
                 }
-                else
-                {
-                    messages::success(asyncResp->res);
-                }
-            }
+                messages::success(asyncResp->res);
+            });
+        }
 
-            if (enabled)
+        if (roleId)
+        {
+            std::string priv = getPrivilegeFromRoleId(*roleId);
+            if (priv.empty())
             {
-                sdbusplus::asio::setProperty(
-                    *crow::connections::systemBus,
-                    "xyz.openbmc_project.User.Manager", dbusObjectPath,
-                    "xyz.openbmc_project.User.Attributes", "UserEnabled",
-                    *enabled, [asyncResp](const boost::system::error_code& ec) {
-                        if (ec)
-                        {
-                            BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
-                            messages::internalError(asyncResp->res);
-                            return;
-                        }
-                        messages::success(asyncResp->res);
-                    });
+                messages::propertyValueNotInList(asyncResp->res, true,
+                                                 "Locked");
+                return;
             }
 
-            if (roleId)
-            {
-                std::string priv = getPrivilegeFromRoleId(*roleId);
-                if (priv.empty())
+            sdbusplus::asio::setProperty(
+                *crow::connections::systemBus,
+                "xyz.openbmc_project.User.Manager", dbusObjectPath,
+                "xyz.openbmc_project.User.Attributes", "UserPrivilege", priv,
+                [asyncResp](const boost::system::error_code& ec) {
+                if (ec)
                 {
-                    messages::propertyValueNotInList(asyncResp->res, true,
-                                                     "Locked");
+                    BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
+                    messages::internalError(asyncResp->res);
                     return;
                 }
+                messages::success(asyncResp->res);
+            });
+        }
 
-                sdbusplus::asio::setProperty(
-                    *crow::connections::systemBus,
-                    "xyz.openbmc_project.User.Manager", dbusObjectPath,
-                    "xyz.openbmc_project.User.Attributes", "UserPrivilege",
-                    priv, [asyncResp](const boost::system::error_code& ec) {
-                        if (ec)
-                        {
-                            BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
-                            messages::internalError(asyncResp->res);
-                            return;
-                        }
-                        messages::success(asyncResp->res);
-                    });
-            }
-
-            if (locked)
+        if (locked)
+        {
+            // admin can unlock the account which is locked by
+            // successive authentication failures but admin should
+            // not be allowed to lock an account.
+            if (*locked)
             {
-                // admin can unlock the account which is locked by
-                // successive authentication failures but admin should
-                // not be allowed to lock an account.
-                if (*locked)
-                {
-                    messages::propertyValueNotInList(asyncResp->res, "true",
-                                                     "Locked");
-                    return;
-                }
+                messages::propertyValueNotInList(asyncResp->res, "true",
+                                                 "Locked");
+                return;
+            }
 
-                sdbusplus::asio::setProperty(
-                    *crow::connections::systemBus,
-                    "xyz.openbmc_project.User.Manager", dbusObjectPath,
-                    "xyz.openbmc_project.User.Attributes",
-                    "UserLockedForFailedAttempt", *locked,
-                    [asyncResp](const boost::system::error_code& ec) {
+            sdbusplus::asio::setProperty(
+                *crow::connections::systemBus,
+                "xyz.openbmc_project.User.Manager", dbusObjectPath,
+                "xyz.openbmc_project.User.Attributes",
+                "UserLockedForFailedAttempt", *locked,
+                [asyncResp](const boost::system::error_code& ec) {
                 if (ec)
                 {
                     BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
@@ -1414,15 +1414,15 @@ inline void updateUserProperties(
                     return;
                 }
                 messages::success(asyncResp->res);
-                    });
-            }
+            });
+        }
 
-            if (accountTypes)
-            {
-                patchAccountTypes(*accountTypes, asyncResp, dbusObjectPath,
-                                  userSelf);
-            }
-        });
+        if (accountTypes)
+        {
+            patchAccountTypes(*accountTypes, asyncResp, dbusObjectPath,
+                              userSelf);
+        }
+    });
 }
 
 inline void handleAccountServiceHead(
@@ -1512,16 +1512,16 @@ inline void
         const uint8_t* minPasswordLength = nullptr;
         const uint32_t* accountUnlockTimeout = nullptr;
         const uint16_t* maxLoginAttemptBeforeLockout = nullptr;
-	const uint8_t* rememberOldPasswordTimes = nullptr;
-	const std::string* passwordPolicyComplexity = nullptr;
+        const uint8_t* rememberOldPasswordTimes = nullptr;
+        const std::string* passwordPolicyComplexity = nullptr;
 
         const bool success = sdbusplus::unpackPropertiesNoThrow(
             dbus_utils::UnpackErrorPrinter(), propertiesList,
             "MinPasswordLength", minPasswordLength, "AccountUnlockTimeout",
             accountUnlockTimeout, "MaxLoginAttemptBeforeLockout",
             maxLoginAttemptBeforeLockout, "RememberOldPasswordTimes",
-	    rememberOldPasswordTimes, "PasswordPolicyComplexity",
-	    passwordPolicyComplexity);
+            rememberOldPasswordTimes, "PasswordPolicyComplexity",
+            passwordPolicyComplexity);
 
         if (!success)
         {
@@ -1546,21 +1546,20 @@ inline void
                 *maxLoginAttemptBeforeLockout;
         }
 
-	if (rememberOldPasswordTimes != nullptr)
-	{
-	   asyncResp->res.jsonValue["Oem"]["OpenBMC"]
-		   		   ["RememberOldPasswordTimes"] =
-		*rememberOldPasswordTimes;
-	}
-
-	if (passwordPolicyComplexity != nullptr)
-	{
-	   asyncResp->res.jsonValue["Oem"]["OpenBMC"]
-		   		   ["PasswordPolicyComplexity"] =
-		*passwordPolicyComplexity;
-	}
+        if (rememberOldPasswordTimes != nullptr)
+        {
+            asyncResp->res
+                .jsonValue["Oem"]["OpenBMC"]["RememberOldPasswordTimes"] =
+                *rememberOldPasswordTimes;
+        }
 
-        });
+        if (passwordPolicyComplexity != nullptr)
+        {
+            asyncResp->res
+                .jsonValue["Oem"]["OpenBMC"]["PasswordPolicyComplexity"] =
+                *passwordPolicyComplexity;
+        }
+    });
 
     auto callback = [asyncResp](bool success, const LDAPConfigData& confData,
                                 const std::string& ldapType) {
@@ -1617,7 +1616,7 @@ inline void handleAccountServicePatch(
                 return;
             }
             messages::success(asyncResp->res);
-            });
+        });
     }
 
     if (maxPasswordLength)
@@ -1638,53 +1637,52 @@ inline void handleAccountServicePatch(
             oemOpenBMCObject &&
             json_util::readJson(*oemOpenBMCObject, asyncResp->res,
                                 "AuthMethods", authMethodsObject,
-				"PasswordPolicyComplexity",passwordcomplexity,
-				"RememberOldPasswordTimes",RememberOldPasswordTimes))
+                                "PasswordPolicyComplexity", passwordcomplexity,
+                                "RememberOldPasswordTimes",
+                                RememberOldPasswordTimes))
         {
             if (authMethodsObject)
             {
                 handleAuthMethodsPatch(*authMethodsObject, asyncResp);
             }
-	    if (passwordcomplexity)
+            if (passwordcomplexity)
             {
                 crow::connections::systemBus->async_method_call(
-                  [asyncResp, passwordcomplexity](
-                      const boost::system::error_code ec) {
-                      if (ec)
-                      {
-                          messages::internalError(asyncResp->res);
-                          return;
-                      }
-                      messages::success(asyncResp->res);
-                      },
-                      "xyz.openbmc_project.User.Manager",
-                      "/xyz/openbmc_project/user",
-                      "org.freedesktop.DBus.Properties", "Set",
-                      "xyz.openbmc_project.User.AccountPolicy",
-                      "PasswordPolicyComplexity",
-                      std::variant<std::string>(*passwordcomplexity));
-             }
-             if (RememberOldPasswordTimes)
-             {
+                    [asyncResp,
+                     passwordcomplexity](const boost::system::error_code ec) {
+                    if (ec)
+                    {
+                        messages::internalError(asyncResp->res);
+                        return;
+                    }
+                    messages::success(asyncResp->res);
+                },
+                    "xyz.openbmc_project.User.Manager",
+                    "/xyz/openbmc_project/user",
+                    "org.freedesktop.DBus.Properties", "Set",
+                    "xyz.openbmc_project.User.AccountPolicy",
+                    "PasswordPolicyComplexity",
+                    std::variant<std::string>(*passwordcomplexity));
+            }
+            if (RememberOldPasswordTimes)
+            {
                 crow::connections::systemBus->async_method_call(
-                  [asyncResp, RememberOldPasswordTimes](
-                     const boost::system::error_code ec) {
-                     if (ec)
-                     {
+                    [asyncResp, RememberOldPasswordTimes](
+                        const boost::system::error_code ec) {
+                    if (ec)
+                    {
                         messages::internalError(asyncResp->res);
                         return;
-                     }
-                     messages::success(asyncResp->res);
-                     },
-                     "xyz.openbmc_project.User.Manager",
-                     "/xyz/openbmc_project/user",
-                     "org.freedesktop.DBus.Properties", "Set",
-                     "xyz.openbmc_project.User.AccountPolicy",
-                     "RememberOldPasswordTimes",
-                     std::variant<uint8_t>(
-                                 *RememberOldPasswordTimes));
-              }
-
+                    }
+                    messages::success(asyncResp->res);
+                },
+                    "xyz.openbmc_project.User.Manager",
+                    "/xyz/openbmc_project/user",
+                    "org.freedesktop.DBus.Properties", "Set",
+                    "xyz.openbmc_project.User.AccountPolicy",
+                    "RememberOldPasswordTimes",
+                    std::variant<uint8_t>(*RememberOldPasswordTimes));
+            }
         }
     }
 
@@ -1710,13 +1708,13 @@ inline void handleAccountServicePatch(
             "/xyz/openbmc_project/user",
             "xyz.openbmc_project.User.AccountPolicy", "AccountUnlockTimeout",
             *unlockTimeout, [asyncResp](const boost::system::error_code& ec) {
-                if (ec)
-                {
-                    messages::internalError(asyncResp->res);
-                    return;
-                }
-                messages::success(asyncResp->res);
-            });
+            if (ec)
+            {
+                messages::internalError(asyncResp->res);
+                return;
+            }
+            messages::success(asyncResp->res);
+        });
     }
     if (lockoutThreshold)
     {
@@ -1732,7 +1730,7 @@ inline void handleAccountServicePatch(
                 return;
             }
             messages::success(asyncResp->res);
-            });
+        });
     }
 }
 
@@ -1829,7 +1827,7 @@ inline void handleAccountCollectionGet(
             }
         }
         asyncResp->res.jsonValue["Members@odata.count"] = memberArray.size();
-        });
+    });
 }
 
 inline void processAfterCreateUser(
@@ -1864,7 +1862,7 @@ inline void processAfterCreateUser(
             // If password is invalid
             messages::propertyValueFormatError(asyncResp->res, password,
                                                "Password");
-            },
+        },
             "xyz.openbmc_project.User.Manager", userPath,
             "xyz.openbmc_project.Object.Delete", "Delete");
 
@@ -1950,7 +1948,7 @@ inline void processAfterGetAllGroups(
         [asyncResp, username, password](const boost::system::error_code& ec2,
                                         sdbusplus::message_t& m) {
         processAfterCreateUser(asyncResp, username, password, ec2, m);
-        },
+    },
         "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
         "xyz.openbmc_project.User.Manager", "CreateUser", username, userGroups,
         *roleId, *enabled);
@@ -2007,7 +2005,7 @@ inline void handleAccountCollectionPost(
 
         processAfterGetAllGroups(asyncResp, username, password, roleId, enabled,
                                  accountTypes, allGroupsList);
-        });
+    });
 }
 
 inline void
@@ -2084,7 +2082,7 @@ inline void
                 const std::pair<sdbusplus::message::object_path,
                                 dbus::utility::DBusInteracesMap>& user) {
             return accountName == user.first.filename();
-            });
+        });
 
         if (userIt == users.end())
         {
@@ -2201,7 +2199,7 @@ inline void
             "/redfish/v1/AccountService/Accounts/" + accountName;
         asyncResp->res.jsonValue["Id"] = accountName;
         asyncResp->res.jsonValue["UserName"] = accountName;
-        });
+    });
 }
 
 inline void
@@ -2234,7 +2232,7 @@ inline void
         }
 
         messages::accountRemoved(asyncResp->res);
-        },
+    },
         "xyz.openbmc_project.User.Manager", userPath,
         "xyz.openbmc_project.Object.Delete", "Delete");
 }
@@ -2327,7 +2325,7 @@ inline void
 
         updateUserProperties(asyncResp, newUser, password, enabled, roleId,
                              locked, accountTypes, userSelf);
-        },
+    },
         "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
         "xyz.openbmc_project.User.Manager", "RenameUser", username,
         *newUserName);
diff --git a/redfish-core/lib/bios.hpp b/redfish-core/lib/bios.hpp
index 206b15c7..1d848e39 100644
--- a/redfish-core/lib/bios.hpp
+++ b/redfish-core/lib/bios.hpp
@@ -170,7 +170,7 @@ inline void
                    "Bios.ChangePassword"}};
 
     asyncResp->res.jsonValue["Settings"]["@odata.id"] =
-            "/redfish/v1/Systems/system/Bios/Settings";
+        "/redfish/v1/Systems/system/Bios/Settings";
 
     // Get the ActiveSoftwareImage and SoftwareImages
     sw_util::populateSoftwareInformation(asyncResp, sw_util::biosPurpose, "",
@@ -248,11 +248,11 @@ inline void
                     BMCWEB_LOG_ERROR("Unsupported attribute type.");
                 }
             }
-            },
+        },
             service, "/xyz/openbmc_project/bios_config/manager",
             "org.freedesktop.DBus.Properties", "Get",
             "xyz.openbmc_project.BIOSConfig.Manager", "BaseBIOSTable");
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetObject",
@@ -323,12 +323,12 @@ inline void requestRoutesBiosChangePassword(App& app)
                 messages::internalError(asyncResp->res);
                 return;
             }
-            },
+        },
             "xyz.openbmc_project.BIOSConfigPassword",
             "/xyz/openbmc_project/bios_config/password",
             "xyz.openbmc_project.BIOSConfig.Password", "ChangePassword",
             userName, currentPassword, newPassword);
-        });
+    });
 }
 
 /**
@@ -441,17 +441,17 @@ inline void requestRoutesBiosSettings(App& app)
                         return;
                     }
                 }
-                },
+            },
                 service, "/xyz/openbmc_project/bios_config/manager",
                 "org.freedesktop.DBus.Properties", "Get",
                 "xyz.openbmc_project.BIOSConfig.Manager", "PendingAttributes");
-            },
+        },
             "xyz.openbmc_project.ObjectMapper",
             "/xyz/openbmc_project/object_mapper",
             "xyz.openbmc_project.ObjectMapper", "GetObject",
             "/xyz/openbmc_project/bios_config/manager",
             std::array<const char*, 0>());
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Systems/system/Bios/Settings")
         .privileges(redfish::privileges::patchBios)
@@ -589,24 +589,24 @@ inline void requestRoutesBiosSettings(App& app)
                     }
 
                     messages::success(asyncResp->res);
-                    },
+                },
                     "xyz.openbmc_project.BIOSConfigManager",
                     "/xyz/openbmc_project/bios_config/manager",
                     "org.freedesktop.DBus.Properties", "Set",
                     "xyz.openbmc_project.BIOSConfig.Manager",
                     "PendingAttributes",
                     std::variant<PendingAttributesType>(pendingAttributes));
-                },
+            },
                 service, "/xyz/openbmc_project/bios_config/manager",
                 "org.freedesktop.DBus.Properties", "Get",
                 "xyz.openbmc_project.BIOSConfig.Manager", "BaseBIOSTable");
-            },
+        },
             "xyz.openbmc_project.ObjectMapper",
             "/xyz/openbmc_project/object_mapper",
             "xyz.openbmc_project.ObjectMapper", "GetObject",
             "/xyz/openbmc_project/bios_config/manager",
             std::array<const char*, 0>());
-        });
+    });
 }
 /**
  * BiosAttributeRegistry class supports handle get method for BIOS attribute
@@ -823,17 +823,17 @@ inline void requestRoutesBiosAttributeRegistry(App& app)
                     attributeItem["Value"] = optionsArray;
                     attributeArray.push_back(attributeItem);
                 }
-                },
+            },
                 service, "/xyz/openbmc_project/bios_config/manager",
                 "org.freedesktop.DBus.Properties", "Get",
                 "xyz.openbmc_project.BIOSConfig.Manager", "BaseBIOSTable");
-            },
+        },
             "xyz.openbmc_project.ObjectMapper",
             "/xyz/openbmc_project/object_mapper",
             "xyz.openbmc_project.ObjectMapper", "GetObject",
             "/xyz/openbmc_project/bios_config/manager",
             std::array<const char*, 0>());
-        });
+    });
 }
 
 /**
@@ -879,7 +879,7 @@ inline void
             messages::internalError(asyncResp->res);
             return;
         }
-        },
+    },
         "xyz.openbmc_project.BIOSConfigManager",
         "/xyz/openbmc_project/bios_config/manager",
         "org.freedesktop.DBus.Properties", "Set",
diff --git a/redfish-core/lib/cable.hpp b/redfish-core/lib/cable.hpp
index 28031e13..5b073a2e 100644
--- a/redfish-core/lib/cable.hpp
+++ b/redfish-core/lib/cable.hpp
@@ -98,7 +98,7 @@ inline void
                         const boost::system::error_code& ec,
                         const dbus::utility::DBusPropertiesMap& properties) {
                     fillCableProperties(asyncResp->res, ec, properties);
-                    });
+                });
             }
             else if (interface == "xyz.openbmc_project.Inventory.Item")
             {
@@ -123,7 +123,7 @@ inline void
                     {
                         asyncResp->res.jsonValue["Status"]["State"] = "Absent";
                     }
-                    });
+                });
             }
         }
     }
@@ -184,8 +184,8 @@ inline void requestRoutesCable(App& app)
                 return;
             }
             messages::resourceNotFound(asyncResp->res, "Cable", cableId);
-            });
         });
+    });
 }
 
 /**
@@ -211,7 +211,7 @@ inline void requestRoutesCableCollection(App& app)
             "xyz.openbmc_project.Inventory.Item.Cable"};
         collection_util::getCollectionMembers(
             asyncResp, boost::urls::url("/redfish/v1/Cables"), interfaces);
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/certificate_service.hpp b/redfish-core/lib/certificate_service.hpp
index 0073bc9e..b42bca7b 100644
--- a/redfish-core/lib/certificate_service.hpp
+++ b/redfish-core/lib/certificate_service.hpp
@@ -274,7 +274,7 @@ static void
         }
 
         asyncResp->res.jsonValue[countPtr] = links.size();
-        });
+    });
 }
 
 /**
@@ -373,7 +373,7 @@ static void getCertificateProperties(
         asyncResp->res.addHeader(
             boost::beast::http::field::location,
             std::string_view(certURL.data(), certURL.size()));
-        });
+    });
 }
 
 static void
@@ -391,7 +391,7 @@ static void
         }
         BMCWEB_LOG_INFO("Certificate deleted");
         asyncResp->res.result(boost::beast::http::status::no_content);
-        },
+    },
         service, objectPath, certs::objDeleteIntf, "Delete");
 }
 
@@ -572,7 +572,7 @@ inline void handleReplaceCertificateAction(
         getCertificateProperties(asyncResp, objectPath, service, id, url, name);
         BMCWEB_LOG_DEBUG("HTTPS certificate install file={}",
                          certFile->getCertFilePath());
-        },
+    },
         service, objectPath, certs::certReplaceIntf, "Replace",
         certFile->getCertFilePath());
 }
@@ -614,7 +614,7 @@ static void getCSR(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         asyncResp->res.jsonValue["CSRString"] = csr;
         asyncResp->res.jsonValue["CertificateCollection"]["@odata.id"] =
             certURI;
-        },
+    },
         service, csrObjPath, "xyz.openbmc_project.Certs.CSR", "CSR");
 }
 
@@ -833,7 +833,7 @@ inline void
                 break;
             }
         }
-        });
+    });
     crow::connections::systemBus->async_method_call(
         [asyncResp](const boost::system::error_code& ec, const std::string&) {
         if (ec)
@@ -842,7 +842,7 @@ inline void
             messages::internalError(asyncResp->res);
             return;
         }
-        },
+    },
         service, objectPath, "xyz.openbmc_project.Certs.CSR.Create",
         "GenerateCSR", *optAlternativeNames, *optChallengePassword, city,
         commonName, *optContactPerson, country, *optEmail, *optGivenName,
@@ -944,7 +944,7 @@ inline void handleHTTPSCertificateCollectionPost(
                                  certId, certURL, "HTTPS Certificate");
         BMCWEB_LOG_DEBUG("HTTPS certificate install file={}",
                          certFile->getCertFilePath());
-        },
+    },
         certs::httpsServiceName, certs::httpsObjectPath, certs::certInstallIntf,
         "Install", certFile->getCertFilePath());
 }
@@ -1049,7 +1049,7 @@ inline void handleLDAPCertificateCollectionPost(
                                  certId, certURL, "LDAP Certificate");
         BMCWEB_LOG_DEBUG("LDAP certificate install file={}",
                          certFile->getCertFilePath());
-        },
+    },
         certs::ldapServiceName, certs::ldapObjectPath, certs::certInstallIntf,
         "Install", certFile->getCertFilePath());
 }
@@ -1171,7 +1171,7 @@ inline void handleTrustStoreCertificateCollectionPost(
                                  "TrustStore Certificate");
         BMCWEB_LOG_DEBUG("TrustStore certificate install file={}",
                          certFile->getCertFilePath());
-        },
+    },
         certs::authorityServiceName, certs::authorityObjectPath,
         certs::certInstallIntf, "Install", certFile->getCertFilePath());
 }
diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index a78d9125..e28a7b3c 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -84,7 +84,7 @@ inline void getStorageLink(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         asyncResp->res.jsonValue["Links"]["Storage@odata.count"] =
             storages.size();
         asyncResp->res.jsonValue["Links"]["Storage"] = std::move(storages);
-        });
+    });
 }
 
 /**
@@ -130,7 +130,7 @@ inline void getChassisState(std::shared_ptr<bmcweb::AsyncResp> asyncResp)
             asyncResp->res.jsonValue["PowerState"] = "Off";
             asyncResp->res.jsonValue["Status"]["State"] = "StandbyOffline";
         }
-        });
+    });
 }
 
 inline void getIntrusionByService(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
@@ -155,7 +155,7 @@ inline void getIntrusionByService(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
         asyncResp->res.jsonValue["PhysicalSecurity"]["IntrusionSensorNumber"] =
             1;
         asyncResp->res.jsonValue["PhysicalSecurity"]["IntrusionSensor"] = value;
-        });
+    });
 }
 
 /**
@@ -188,7 +188,7 @@ inline void
                 return;
             }
         }
-        });
+    });
 }
 
 inline void handleChassisCollectionGet(
@@ -339,7 +339,7 @@ inline void
 
         asyncResp->res.jsonValue["Location"]["PartLocation"]["ServiceLabel"] =
             property;
-        });
+    });
 }
 
 inline void getChassisUUID(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -358,7 +358,7 @@ inline void getChassisUUID(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             return;
         }
         asyncResp->res.jsonValue["UUID"] = chassisUUID;
-        });
+    });
 }
 
 inline void
@@ -416,7 +416,7 @@ inline void
                         return; // no sensors = no failures
                     }
                     health->inventory = resp;
-                    });
+                });
 
                 health->populate();
             }
@@ -457,7 +457,7 @@ inline void
                 reference["@odata.id"] = boost::urls::format(
                     "/redfish/v1/Chassis/{}/Drives", chassisId);
                 asyncResp->res.jsonValue["Drives"] = std::move(reference);
-                });
+            });
 
             const std::string& connectionName = connectionNames[0].first;
 
@@ -489,7 +489,7 @@ inline void
                             return;
                         }
                         asyncResp->res.jsonValue["AssetTag"] = property;
-                        });
+                    });
                 }
                 else if (interface == replaceableInterface)
                 {
@@ -508,7 +508,7 @@ inline void
                             return;
                         }
                         asyncResp->res.jsonValue["HotPluggable"] = property;
-                        });
+                    });
                 }
             }
 
@@ -618,7 +618,7 @@ inline void
                     std::move(managedBy);
                 getChassisState(asyncResp);
                 getStorageLink(asyncResp, path);
-                });
+            });
 
             for (const auto& interface : interfaces2)
             {
@@ -638,7 +638,7 @@ inline void
 
         // Couldn't find an object with that name.  return an error
         messages::resourceNotFound(asyncResp->res, "Chassis", chassisId);
-        });
+    });
 
     getPhysicalSecurityData(asyncResp);
 }
@@ -666,7 +666,7 @@ inline void
     {
         return;
     }
-	
+
     asyncResp->res.result(boost::beast::http::status::no_content);
 
     // TODO (Gunnar): Remove IndicatorLED after enough time has passed
@@ -765,7 +765,7 @@ inline void
         }
 
         messages::resourceNotFound(asyncResp->res, "Chassis", chassisId);
-        });
+    });
 }
 
 /**
@@ -865,8 +865,8 @@ inline void
             }
 
             messages::success(asyncResp->res);
-            });
         });
+    });
 }
 
 inline void handleChassisResetActionInfoPost(
@@ -874,60 +874,59 @@ inline void handleChassisResetActionInfoPost(
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     const std::string& chassisId)
 {
-       crow::connections::systemBus->async_method_call(
-                [&app,asyncResp, chassisId,req]
-                (const boost::system::error_code ec,
-                         const std::vector<std::string>& objects)
-                {
-                    if (ec)
-                    {
-                        messages::internalError(asyncResp->res);
-                        return;
-                        return;
-                    }
-                for (const std::string& object : objects)
-                {
-                    if (!boost::ends_with(object, chassisId))
-                    {
-                        continue;
-                    }
+    crow::connections::systemBus->async_method_call(
+        [&app, asyncResp, chassisId,
+         req](const boost::system::error_code ec,
+              const std::vector<std::string>& objects) {
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+            return;
+            return;
+        }
+        for (const std::string& object : objects)
+        {
+            if (!boost::ends_with(object, chassisId))
+            {
+                continue;
+            }
 
-    if (!redfish::setUpRedfishRoute(app, req, asyncResp))
-    {
-        return;
-    }
-    BMCWEB_LOG_DEBUG("Post Chassis Reset.");
+            if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+            {
+                return;
+            }
+            BMCWEB_LOG_DEBUG("Post Chassis Reset.");
 
-    std::string resetType;
+            std::string resetType;
 
-    if (!json_util::readJsonAction(req, asyncResp->res, "ResetType", resetType))
-    {
-        return;
-    }
+            if (!json_util::readJsonAction(req, asyncResp->res, "ResetType",
+                                           resetType))
+            {
+                return;
+            }
 
-    if (resetType != "PowerCycle")
-    {
-        BMCWEB_LOG_DEBUG("Invalid property value for ResetType: {}", resetType);
-        messages::actionParameterNotSupported(asyncResp->res, resetType,
-                                              "ResetType");
+            if (resetType != "PowerCycle")
+            {
+                BMCWEB_LOG_DEBUG("Invalid property value for ResetType: {}",
+                                 resetType);
+                messages::actionParameterNotSupported(asyncResp->res, resetType,
+                                                      "ResetType");
 
-        return;
-    }
-    doChassisPowerCycle(asyncResp);
-      return;
-                }
-                       messages::resourceNotFound(
-                        asyncResp->res, "#Chassis", chassisId);
-                   },
-                    "xyz.openbmc_project.ObjectMapper",
-                    "/xyz/openbmc_project/object_mapper",
-                    "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths",
-                    "/xyz/openbmc_project/inventory", 0,
-                    std::array<const char*, 2>{
-                       "xyz.openbmc_project.Inventory.Item.Board",
-                       "xyz.openbmc_project.Inventory.Item.Chassis"});
                 return;
-
+            }
+            doChassisPowerCycle(asyncResp);
+            return;
+        }
+        messages::resourceNotFound(asyncResp->res, "#Chassis", chassisId);
+    },
+        "xyz.openbmc_project.ObjectMapper",
+        "/xyz/openbmc_project/object_mapper",
+        "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths",
+        "/xyz/openbmc_project/inventory", 0,
+        std::array<const char*, 2>{
+            "xyz.openbmc_project.Inventory.Item.Board",
+            "xyz.openbmc_project.Inventory.Item.Chassis"});
+    return;
 }
 
 /**
diff --git a/redfish-core/lib/cups_service.hpp b/redfish-core/lib/cups_service.hpp
index fbadcf33..63d6766f 100644
--- a/redfish-core/lib/cups_service.hpp
+++ b/redfish-core/lib/cups_service.hpp
@@ -147,7 +147,7 @@ inline std::string toString(const std::tuple<T...>& tuple)
         [](auto&&... args) {
         std::string value;
         return ((value += toString(args) + " "), ...);
-        },
+    },
         tuple);
 }
 
@@ -197,7 +197,7 @@ inline void getCupsServiceConfiguration(
                 }
             }
         }
-        },
+    },
         "xyz.openbmc_project.CupsService", "/xyz/openbmc_project/CupsService",
         "org.freedesktop.DBus.Properties", "GetAll",
         "xyz.openbmc_project.CupsService.Configuration");
@@ -230,7 +230,7 @@ inline void
         loadFactors["CoreLoadFactor"] = core;
         loadFactors["IioLoadFactor"] = iio;
         loadFactors["MemoryLoadFactor"] = memory;
-        });
+    });
 }
 
 inline void
@@ -345,7 +345,7 @@ inline void requestRoutesCupsService(App& app)
             [](const crow::Request&,
                const std::shared_ptr<bmcweb::AsyncResp>& asyncResp) {
         CupsService::getCupsServiceJson(asyncResp);
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Oem/Intel/CupsService/")
         .privileges({{"ConfigureComponents"}})
@@ -440,7 +440,7 @@ inline void requestRoutesCupsService(App& app)
                 CupsService::dbus::subIface("StaticLoadFactors"),
                 "StaticLoadFactors", loadFactors);
         }
-        });
+    });
 }
 
 namespace CupsSensors
@@ -545,7 +545,7 @@ inline void getCupsSensors(const std::shared_ptr<bmcweb::AsyncResp> asyncResp)
         }
 
         asyncResp->res.jsonValue["Members@odata.count"] = members.size();
-        },
+    },
         "xyz.openbmc_project.CupsService", "/xyz/openbmc_project/sensors",
         "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");
 }
@@ -566,7 +566,7 @@ inline void requestRoutesCupsSensors(App& app)
         };
 
         CupsSensors::getCupsSensors(asyncResp);
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
index 7a13e10f..3a416c66 100644
--- a/redfish-core/lib/ethernet.hpp
+++ b/redfish-core/lib/ethernet.hpp
@@ -638,7 +638,7 @@ inline void deleteIPAddress(const std::string& ifaceId,
         {
             messages::internalError(asyncResp->res);
         }
-        },
+    },
         "xyz.openbmc_project.Network",
         "/xyz/openbmc_project/network/" + ifaceId + ipHash,
         "xyz.openbmc_project.Object.Delete", "Delete");
@@ -653,13 +653,13 @@ inline void updateIPv4DefaultGateway(
         "/xyz/openbmc_project/network/" + ifaceId,
         "xyz.openbmc_project.Network.EthernetInterface", "DefaultGateway",
         gateway, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                messages::internalError(asyncResp->res);
-                return;
-            }
-            asyncResp->res.result(boost::beast::http::status::no_content);
-        });
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        asyncResp->res.result(boost::beast::http::status::no_content);
+    });
 }
 /**
  * @brief Creates a static IPv4 entry
@@ -676,8 +676,8 @@ inline void createIPv4(const std::string& ifaceId, uint8_t prefixLength,
                        const std::string& gateway, const std::string& address,
                        const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 {
-    auto createIpHandler =
-        [asyncResp, ifaceId, gateway](const boost::system::error_code& ec) {
+    auto createIpHandler = [asyncResp, ifaceId,
+                            gateway](const boost::system::error_code& ec) {
         if (ec)
         {
             messages::internalError(asyncResp->res);
@@ -734,12 +734,12 @@ inline void deleteAndCreateIPAddress(
             {
                 messages::internalError(asyncResp->res);
             }
-            },
+        },
             "xyz.openbmc_project.Network",
             "/xyz/openbmc_project/network/" + ifaceId,
             "xyz.openbmc_project.Network.IP.Create", "IP", protocol, address,
             prefixLength, gateway);
-        },
+    },
         "xyz.openbmc_project.Network",
         "/xyz/openbmc_project/network/" + ifaceId + id,
         "xyz.openbmc_project.Object.Delete", "Delete");
@@ -759,8 +759,8 @@ inline void createIPv6(const std::string& ifaceId, uint8_t prefixLength,
                        const std::string& address,
                        const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 {
-    auto createIpHandler =
-        [asyncResp, address](const boost::system::error_code& ec) {
+    auto createIpHandler = [asyncResp,
+                            address](const boost::system::error_code& ec) {
         if (ec)
         {
             if (ec == boost::system::errc::io_error)
@@ -835,7 +835,7 @@ void getEthernetIfaceData(const std::string& ethifaceId,
         extractIPV6Data(ethifaceId, resp, ipv6Data);
         // Finally make a callback with useful data
         callback(true, ethData, ipv4Data, ipv6Data);
-        });
+    });
 }
 
 /**
@@ -891,7 +891,7 @@ void getEthernetIfaceList(CallbackFunc&& callback)
 
         // Finally make a callback with useful data
         callback(true, ifaceList);
-        });
+    });
 }
 
 inline void
@@ -914,7 +914,7 @@ inline void
         {
             messages::internalError(asyncResp->res);
         }
-        });
+    });
 }
 
 inline void
@@ -931,7 +931,7 @@ inline void
         {
             messages::internalError(asyncResp->res);
         }
-        });
+    });
 }
 
 inline void
@@ -945,11 +945,11 @@ inline void
         "/xyz/openbmc_project/network/" + ifaceId,
         "xyz.openbmc_project.Network.EthernetInterface", "DomainName",
         vectorDomainname, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                messages::internalError(asyncResp->res);
-            }
-        });
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+        }
+    });
 }
 
 inline bool isHostnameValid(const std::string& hostname)
@@ -1041,7 +1041,7 @@ inline void
             messages::internalError(asyncResp->res);
             return;
         }
-        });
+    });
 }
 
 inline void setDHCPEnabled(const std::string& ifaceId,
@@ -1062,7 +1062,7 @@ inline void setDHCPEnabled(const std::string& ifaceId,
             return;
         }
         messages::success(asyncResp->res);
-        });
+    });
 }
 
 inline void setEthernetInterfaceBoolProperty(
@@ -1080,7 +1080,7 @@ inline void setEthernetInterfaceBoolProperty(
             messages::internalError(asyncResp->res);
             return;
         }
-        });
+    });
 }
 
 inline void setDHCPv4Config(const std::string& propertyName, const bool& value,
@@ -1098,7 +1098,7 @@ inline void setDHCPv4Config(const std::string& propertyName, const bool& value,
             messages::internalError(asyncResp->res);
             return;
         }
-        });
+    });
 }
 
 inline void handleSLAACAutoConfigPatch(
@@ -1119,7 +1119,7 @@ inline void handleSLAACAutoConfigPatch(
             return;
         }
         messages::success(asyncResp->res);
-        });
+    });
 }
 
 inline void handleDHCPPatch(const std::string& ifaceId,
@@ -1262,9 +1262,9 @@ inline void
                                          "IPv4StaticAddresses");
         return;
     }
-    else if(input.size() > 1)
+    else if (input.size() > 1)
     {
-       return;
+        return;
     }
 
     unsigned entryIdx = 1;
@@ -1447,7 +1447,7 @@ inline void handleStaticNameServersPatch(
             messages::internalError(asyncResp->res);
             return;
         }
-        });
+    });
 }
 
 inline void handleIPv6StaticAddressesPatch(
@@ -1598,7 +1598,7 @@ inline void
             }
 
             health->inventory = resp;
-            });
+        });
 
         health->populate();
     }
@@ -1852,7 +1852,7 @@ inline void requestEthernetInterfacesRoutes(App& app)
             asyncResp->res.jsonValue["@odata.id"] =
                 "/redfish/v1/Managers/bmc/EthernetInterfaces";
         });
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/EthernetInterfaces/")
         .privileges(redfish::privileges::postEthernetInterfaceCollection)
@@ -1932,11 +1932,11 @@ inline void requestEthernetInterfacesRoutes(App& app)
                             const sdbusplus::message_t& m) {
             afterVlanCreate(asyncResp, parentInterfaceUri, vlanInterface, ec,
                             m);
-            },
+        },
             "xyz.openbmc_project.Network", "/xyz/openbmc_project/network",
             "xyz.openbmc_project.Network.VLAN.Create", "VLAN", parentInterface,
             vlanId);
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/EthernetInterfaces/<str>/")
         .privileges(redfish::privileges::getEthernetInterface)
@@ -1970,11 +1970,12 @@ inline void requestEthernetInterfacesRoutes(App& app)
                 "Management Network Interface";
 
             parseInterfaceData(asyncResp, ifaceId, ethData, ipv4Data, ipv6Data);
-            });
         });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/EthernetInterfaces/<str>/")
-        .privileges(redfish::privileges::patchSubOverManagerEthernetInterfaceCollection)
+        .privileges(
+            redfish::privileges::patchSubOverManagerEthernetInterfaceCollection)
         .methods(boost::beast::http::verb::patch)(
             [&app](const crow::Request& req,
                    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
diff --git a/redfish-core/lib/event_service.hpp b/redfish-core/lib/event_service.hpp
index 6173dbb7..eda3efb7 100644
--- a/redfish-core/lib/event_service.hpp
+++ b/redfish-core/lib/event_service.hpp
@@ -96,7 +96,7 @@ inline void requestRoutesEventService(App& app)
 
         asyncResp->res.jsonValue["SSEFilterPropertiesSupported"] =
             std::move(supportedSSEFilters);
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/EventService/")
         .privileges(redfish::privileges::patchEventService)
@@ -160,7 +160,7 @@ inline void requestRoutesEventService(App& app)
 
         EventServiceManager::getInstance().setEventServiceConfig(
             eventServiceConfig);
-        });
+    });
 }
 
 inline void requestRoutesSubmitTestEvent(App& app)
@@ -182,7 +182,7 @@ inline void requestRoutesSubmitTestEvent(App& app)
             return;
         }
         asyncResp->res.result(boost::beast::http::status::no_content);
-        });
+    });
 }
 
 inline void doSubscriptionCollection(
@@ -260,11 +260,11 @@ inline void requestRoutesEventDestinationCollection(App& app)
             [asyncResp](const boost::system::error_code& ec,
                         const dbus::utility::ManagedObjectType& resp) {
             doSubscriptionCollection(ec, asyncResp, resp);
-            },
+        },
             "xyz.openbmc_project.Network.SNMP",
             "/xyz/openbmc_project/network/snmp/manager",
             "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/EventService/Subscriptions/")
         .privileges(redfish::privileges::postEventDestinationCollection)
@@ -571,7 +571,7 @@ inline void requestRoutesEventDestinationCollection(App& app)
                             [&id](const redfish::registries::MessageEntry&
                                       messageEntry) {
                         return id == messageEntry.first;
-                            }))
+                    }))
                     {
                         validId = true;
                         break;
@@ -638,7 +638,7 @@ inline void requestRoutesEventDestinationCollection(App& app)
         messages::created(asyncResp->res);
         asyncResp->res.addHeader(
             "Location", "/redfish/v1/EventService/Subscriptions/" + id);
-        });
+    });
 }
 
 bool isConfigureManagerOrSelf(const crow::Request& req,
@@ -737,7 +737,7 @@ inline void requestRoutesEventDestination(App& app)
             mrdJsonArray.emplace_back(std::move(mdr));
         }
         asyncResp->res.jsonValue["MetricReportDefinitions"] = mrdJsonArray;
-        });
+    });
     BMCWEB_ROUTE(app, "/redfish/v1/EventService/Subscriptions/<str>/")
         .privileges(redfish::privileges::patchEventDestination)
         .methods(boost::beast::http::verb::patch)(
@@ -816,7 +816,7 @@ inline void requestRoutesEventDestination(App& app)
         }
 
         EventServiceManager::getInstance().updateSubscription(param);
-        });
+    });
     BMCWEB_ROUTE(app, "/redfish/v1/EventService/Subscriptions/<str>/")
         .privileges(redfish::privileges::deleteEventDestination)
         .methods(boost::beast::http::verb::delete_)(
@@ -851,7 +851,7 @@ inline void requestRoutesEventDestination(App& app)
         }
 
         EventServiceManager::getInstance().deleteSubscription(param);
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/eventservice_sse.hpp b/redfish-core/lib/eventservice_sse.hpp
index 9aabf8e5..4886ab01 100644
--- a/redfish-core/lib/eventservice_sse.hpp
+++ b/redfish-core/lib/eventservice_sse.hpp
@@ -135,7 +135,7 @@ inline void
                             [&id](const redfish::registries::MessageEntry&
                                       messageEntry) {
                         return !id.compare(messageEntry.first);
-                            }))
+                    }))
                     {
                         validId = true;
                         break;
diff --git a/redfish-core/lib/fabric_adapters.hpp b/redfish-core/lib/fabric_adapters.hpp
index 2a85f42d..ab87f109 100644
--- a/redfish-core/lib/fabric_adapters.hpp
+++ b/redfish-core/lib/fabric_adapters.hpp
@@ -58,7 +58,7 @@ inline void getFabricAdapterLocation(
 
         asyncResp->res.jsonValue["Location"]["PartLocation"]["ServiceLabel"] =
             property;
-        });
+    });
 }
 
 inline void
@@ -117,7 +117,7 @@ inline void
         {
             asyncResp->res.jsonValue["SparePartNumber"] = *sparePartNumber;
         }
-        });
+    });
 }
 
 inline void
@@ -143,7 +143,7 @@ inline void
         {
             asyncResp->res.jsonValue["Status"]["State"] = "Absent";
         }
-        });
+    });
 }
 
 inline void
@@ -170,7 +170,7 @@ inline void
         {
             asyncResp->res.jsonValue["Status"]["Health"] = "Critical";
         }
-        });
+    });
 }
 
 inline void doAdapterGet(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -242,7 +242,7 @@ inline void getValidFabricAdapterPath(
         }
         BMCWEB_LOG_WARNING("Adapter not found");
         messages::resourceNotFound(asyncResp->res, "FabricAdapter", adapterId);
-        });
+    });
 }
 
 inline void
@@ -269,7 +269,7 @@ inline void
                                            const std::string& serviceName) {
         doAdapterGet(asyncResp, systemName, adapterId, fabricAdapterPath,
                      serviceName);
-        });
+    });
 }
 
 inline void handleFabricAdapterCollectionGet(
diff --git a/redfish-core/lib/fan.hpp b/redfish-core/lib/fan.hpp
index 3a7e2e25..d18edc20 100644
--- a/redfish-core/lib/fan.hpp
+++ b/redfish-core/lib/fan.hpp
@@ -76,7 +76,7 @@ inline void getFanPaths(
             return;
         }
         callback(subtreePaths);
-        });
+    });
 }
 
 inline void doFanCollection(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -127,7 +127,7 @@ inline void
         asyncResp->res.addHeader(
             boost::beast::http::field::link,
             "</redfish/v1/JsonSchemas/FanCollection/FanCollection.json>; rel=describedby");
-        });
+    });
 }
 
 inline void
@@ -191,7 +191,7 @@ static inline void handleFanPath(
                 return;
             }
             callback(fanPath, object.begin()->first);
-            });
+        });
 
         return;
     }
@@ -210,7 +210,7 @@ inline void getValidFanPath(
         [fanId, asyncResp, callback](
             const dbus::utility::MapperGetSubTreePathsResponse& fanPaths) {
         handleFanPath(fanId, asyncResp, fanPaths, callback);
-        });
+    });
 }
 
 inline void addFanCommonProperties(crow::Response& resp,
@@ -250,7 +250,7 @@ inline void getFanHealth(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         {
             asyncResp->res.jsonValue["Status"]["Health"] = "Critical";
         }
-        });
+    });
 }
 
 inline void getFanState(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -275,7 +275,7 @@ inline void getFanState(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         {
             asyncResp->res.jsonValue["Status"]["State"] = "Absent";
         }
-        });
+    });
 }
 
 inline void getFanAsset(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -332,7 +332,7 @@ inline void getFanAsset(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         {
             asyncResp->res.jsonValue["SparePartNumber"] = *sparePartNumber;
         }
-        });
+    });
 }
 
 inline void getFanLocation(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
@@ -356,7 +356,7 @@ inline void getFanLocation(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
         }
         aResp->res.jsonValue["Location"]["PartLocation"]["ServiceLabel"] =
             property;
-        });
+    });
 }
 
 inline void
@@ -411,7 +411,7 @@ inline void handleFanHead(App& app, const crow::Request& req,
                 boost::beast::http::field::link,
                 "</redfish/v1/JsonSchemas/Fan/Fan.json>; rel=describedby");
         });
-        });
+    });
 }
 
 inline void handleFanGet(App& app, const crow::Request& req,
diff --git a/redfish-core/lib/fan_from_sensor.hpp b/redfish-core/lib/fan_from_sensor.hpp
index 85242751..8b92d44a 100644
--- a/redfish-core/lib/fan_from_sensor.hpp
+++ b/redfish-core/lib/fan_from_sensor.hpp
@@ -89,7 +89,7 @@ inline void doFanCollection(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             }
             asyncResp->res.jsonValue["Members@odata.count"] =
                 asyncResp->res.jsonValue["Members"].size();
-            });
+        });
     }
 }
 
@@ -170,7 +170,7 @@ inline void getFanValue(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                 asyncResp->res.jsonValue["SpeedPercent"]["Reading"] = *value;
             }
         }
-        },
+    },
         service, path, "org.freedesktop.DBus.Properties", "GetAll", intf);
 }
 
@@ -190,7 +190,7 @@ inline void getFanState(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
 
         asyncResp->res.jsonValue["Status"]["State"] = value ? "Enabled"
                                                             : "Absent";
-        });
+    });
 }
 
 inline void getFanHealth(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -209,7 +209,7 @@ inline void getFanHealth(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
 
         asyncResp->res.jsonValue["Status"]["Health"] = value ? "OK"
                                                              : "Critical";
-        });
+    });
 }
 
 inline void doFanGet(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
diff --git a/redfish-core/lib/health.hpp b/redfish-core/lib/health.hpp
index 55f79bc4..71f0abdb 100644
--- a/redfish-core/lib/health.hpp
+++ b/redfish-core/lib/health.hpp
@@ -206,7 +206,7 @@ struct HealthPopulate : std::enable_shared_from_this<HealthPopulate>
                 return;
             }
             self->globalInventoryPath = resp[0];
-            });
+        });
     }
 
     void getAllStatusAssociations()
@@ -232,7 +232,7 @@ struct HealthPopulate : std::enable_shared_from_this<HealthPopulate>
                 }
                 it = self->statuses.erase(it);
             }
-            });
+        });
     }
 
     std::shared_ptr<bmcweb::AsyncResp> asyncResp;
diff --git a/redfish-core/lib/hypervisor_system.hpp b/redfish-core/lib/hypervisor_system.hpp
index 0a8936d1..0df84b88 100644
--- a/redfish-core/lib/hypervisor_system.hpp
+++ b/redfish-core/lib/hypervisor_system.hpp
@@ -90,7 +90,7 @@ inline void
             messages::internalError(asyncResp->res);
             return;
         }
-        });
+    });
 }
 
 /**
@@ -145,7 +145,7 @@ inline void
             "/redfish/v1/Systems/hypervisor/Actions/ComputerSystem.Reset";
         reset["@Redfish.ActionInfo"] =
             "/redfish/v1/Systems/hypervisor/ResetActionInfo";
-        });
+    });
 }
 
 inline bool extractHypervisorInterfaceData(
@@ -333,7 +333,7 @@ void getHypervisorIfaceData(const std::string& ethIfaceId,
             BMCWEB_LOG_INFO("Hypervisor Interface not found");
         }
         callback(found, ethData, ipv4Data);
-        });
+    });
 }
 
 /**
@@ -362,7 +362,7 @@ inline void setHypervisorIPv4Address(
             return;
         }
         BMCWEB_LOG_DEBUG("Hypervisor IPaddress is Set");
-        });
+    });
 }
 
 /**
@@ -392,7 +392,7 @@ inline void
             return;
         }
         BMCWEB_LOG_DEBUG("SubnetMask is Set");
-        });
+    });
 }
 
 /**
@@ -416,13 +416,13 @@ inline void setHypervisorIPv4Gateway(
         "/xyz/openbmc_project/network/hypervisor",
         "xyz.openbmc_project.Network.SystemConfiguration", "DefaultGateway",
         gateway, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                BMCWEB_LOG_ERROR("DBUS response error {}", ec);
-                return;
-            }
-            BMCWEB_LOG_DEBUG("Default Gateway is Set");
-        });
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("DBUS response error {}", ec);
+            return;
+        }
+        BMCWEB_LOG_DEBUG("Default Gateway is Set");
+    });
 }
 
 /**
@@ -519,7 +519,7 @@ inline void setDHCPEnabled(const std::string& ifaceId, bool ipv4DHCPEnabled,
             messages::internalError(asyncResp->res);
             return;
         }
-        });
+    });
 
     // Set the IPv4 address origin to the DHCP / Static as per the new value
     // of the DHCPEnabled property
@@ -547,7 +547,7 @@ inline void setDHCPEnabled(const std::string& ifaceId, bool ipv4DHCPEnabled,
             return;
         }
         BMCWEB_LOG_DEBUG("Hypervisor IPaddress Origin is Set");
-        });
+    });
 }
 
 inline void handleHypervisorIPv4StaticPatch(
@@ -674,7 +674,7 @@ inline void handleHypervisorHostnamePatch(
         {
             messages::internalError(asyncResp->res);
         }
-        });
+    });
 }
 
 inline void
@@ -690,7 +690,7 @@ inline void
         {
             messages::internalError(asyncResp->res);
         }
-        });
+    });
 }
 
 inline void handleHypervisorEthernetInterfaceCollectionGet(
@@ -741,7 +741,7 @@ inline void handleHypervisorEthernetInterfaceCollectionGet(
             ifaceArray.emplace_back(std::move(ethIface));
         }
         asyncResp->res.jsonValue["Members@odata.count"] = ifaceArray.size();
-        });
+    });
 }
 
 inline void handleHypervisorEthernetInterfaceGet(
@@ -756,20 +756,20 @@ inline void handleHypervisorEthernetInterfaceGet(
         id, [asyncResp, ifaceId{std::string(id)}](
                 bool success, const EthernetInterfaceData& ethData,
                 const std::vector<IPv4AddressData>& ipv4Data) {
-            if (!success)
-            {
-                messages::resourceNotFound(asyncResp->res, "EthernetInterface",
-                                           ifaceId);
-                return;
-            }
-            asyncResp->res.jsonValue["@odata.type"] =
-                "#EthernetInterface.v1_9_0.EthernetInterface";
-            asyncResp->res.jsonValue["Name"] = "Hypervisor Ethernet Interface";
-            asyncResp->res.jsonValue["Description"] =
-                "Hypervisor's Virtual Management Ethernet Interface";
-            parseInterfaceData(asyncResp->res.jsonValue, ifaceId, ethData,
-                               ipv4Data);
-        });
+        if (!success)
+        {
+            messages::resourceNotFound(asyncResp->res, "EthernetInterface",
+                                       ifaceId);
+            return;
+        }
+        asyncResp->res.jsonValue["@odata.type"] =
+            "#EthernetInterface.v1_9_0.EthernetInterface";
+        asyncResp->res.jsonValue["Name"] = "Hypervisor Ethernet Interface";
+        asyncResp->res.jsonValue["Description"] =
+            "Hypervisor's Virtual Management Ethernet Interface";
+        parseInterfaceData(asyncResp->res.jsonValue, ifaceId, ethData,
+                           ipv4Data);
+    });
 }
 
 inline void handleHypervisorSystemGet(
@@ -806,7 +806,7 @@ inline void handleHypervisorSystemGet(
         getHypervisorState(asyncResp);
         getHypervisorActions(asyncResp);
         // TODO: Add "SystemType" : "hypervisor"
-        });
+    });
 }
 
 inline void handleHypervisorEthernetInterfacePatch(
@@ -848,12 +848,11 @@ inline void handleHypervisorEthernetInterfacePatch(
     }
 
     getHypervisorIfaceData(
-        ifaceId,
-        [asyncResp, ifaceId, hostName = std::move(hostName),
-         ipv4StaticAddresses = std::move(ipv4StaticAddresses), ipv4DHCPEnabled,
-         dhcpv4 = std::move(dhcpv4)](bool success,
-                                     const EthernetInterfaceData& ethData,
-                                     const std::vector<IPv4AddressData>&) {
+        ifaceId, [asyncResp, ifaceId, hostName = std::move(hostName),
+                  ipv4StaticAddresses = std::move(ipv4StaticAddresses),
+                  ipv4DHCPEnabled, dhcpv4 = std::move(dhcpv4)](
+                     bool success, const EthernetInterfaceData& ethData,
+                     const std::vector<IPv4AddressData>&) {
         if (!success)
         {
             messages::resourceNotFound(asyncResp->res, "EthernetInterface",
@@ -911,7 +910,7 @@ inline void handleHypervisorEthernetInterfacePatch(
         // to enabled/active by the pldm once the hypervisor
         // consumes the updated settings from the user.
         setIPv4InterfaceEnabled(ifaceId, false, asyncResp);
-        });
+    });
     asyncResp->res.result(boost::beast::http::status::accepted);
 }
 
@@ -970,7 +969,7 @@ inline void handleHypervisorResetActionGet(
         parameter["AllowableValues"] = std::move(allowed);
         parameters.emplace_back(std::move(parameter));
         asyncResp->res.jsonValue["Parameters"] = std::move(parameters);
-        });
+    });
 }
 
 inline void handleHypervisorSystemResetPost(
@@ -1030,7 +1029,7 @@ inline void handleHypervisorSystemResetPost(
             return;
         }
         messages::success(asyncResp->res);
-        });
+    });
 }
 
 inline void requestRoutesHypervisorSystems(App& app)
diff --git a/redfish-core/lib/led.hpp b/redfish-core/lib/led.hpp
index f36a3196..ff77ddc1 100644
--- a/redfish-core/lib/led.hpp
+++ b/redfish-core/lib/led.hpp
@@ -86,8 +86,8 @@ inline void
             {
                 asyncResp->res.jsonValue["IndicatorLED"] = "Off";
             }
-            });
         });
+    });
 }
 
 /**
@@ -151,8 +151,8 @@ inline void
                 return;
             }
             messages::success(asyncResp->res);
-            });
         });
+    });
 }
 
 /**
@@ -209,8 +209,8 @@ inline void getLocationIndicatorActive(
             }
 
             asyncResp->res.jsonValue["LocationIndicatorActive"] = ledOn;
-            });
         });
+    });
 }
 
 /**
@@ -248,8 +248,8 @@ inline void setLocationIndicatorActive(
                     messages::internalError(asyncResp->res);
                     return;
                 }
-                });
+            });
         }
-        });
+    });
 }
 } // namespace redfish
diff --git a/redfish-core/lib/license_service.hpp b/redfish-core/lib/license_service.hpp
index 128b3d80..b1b2162c 100644
--- a/redfish-core/lib/license_service.hpp
+++ b/redfish-core/lib/license_service.hpp
@@ -64,7 +64,7 @@ inline void fillCPULicenseCollection(
             asyncResp->res.jsonValue["Members@odata.count"] =
                 (asyncResp->res.jsonValue["Members"]).size();
         }
-        },
+    },
         service, objectPath, featureEnableInterfaceName, method);
 }
 inline void fillCPULicenseInstance(
@@ -118,7 +118,7 @@ inline void fillCPULicenseInstance(
         }
         asyncResp->res.jsonValue["Oem"]["Intel"]["@odata.type"] =
             "#OemLicense.v1_0_0.License";
-        },
+    },
         service, objectPath, featureEnableInterfaceName, method);
 }
 
@@ -177,7 +177,7 @@ inline void createCPULicense(
                     taskData->state = "Completed";
                 }
                 return task::completed;
-                },
+            },
                 signalMatchStr);
             task->startTimer(std::chrono::minutes(5));
             task->populateResp(asyncResp->res);
@@ -271,14 +271,14 @@ inline void addProcessorFeatureLicenses(
                                          "GetFeatureState", cpuinstance,
                                          service);
             }
-            },
+        },
             "xyz.openbmc_project.ObjectMapper",
             "/xyz/openbmc_project/object_mapper",
             "xyz.openbmc_project.ObjectMapper", "GetSubTree",
             ondemandObjectPath, 0,
             std::array<const char*, 1>{
                 "xyz.openbmc_project.CPU.FeatureEnable"});
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetObject",
@@ -432,14 +432,14 @@ inline void addCPULicense(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             }
             messages::propertyValueNotInList(asyncResp->res, authDevice,
                                              "Links/0/AuthorizedDevices");
-            },
+        },
             "xyz.openbmc_project.ObjectMapper",
             "/xyz/openbmc_project/object_mapper",
             "xyz.openbmc_project.ObjectMapper", "GetSubTree",
             ondemandObjectPath, 0,
             std::array<const char*, 1>{
                 "xyz.openbmc_project.CPU.FeatureEnable"});
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetObject",
@@ -638,14 +638,14 @@ inline void
                 return;
             }
             messages::resourceNotFound(asyncResp->res, "Licenses", param);
-            },
+        },
             "xyz.openbmc_project.ObjectMapper",
             "/xyz/openbmc_project/object_mapper",
             "xyz.openbmc_project.ObjectMapper", "GetSubTree",
             licenseService::ondemandObjectPath, 0,
             std::array<const char*, 1>{
                 "xyz.openbmc_project.CPU.FeatureEnable"});
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetObject",
diff --git a/redfish-core/lib/log_services.hpp b/redfish-core/lib/log_services.hpp
index eab2c66c..a5178511 100644
--- a/redfish-core/lib/log_services.hpp
+++ b/redfish-core/lib/log_services.hpp
@@ -570,7 +570,7 @@ inline void
             entriesArray.emplace_back(std::move(thisEntry));
         }
         asyncResp->res.jsonValue["Members@odata.count"] = entriesArray.size();
-        });
+    });
 }
 
 inline void
@@ -670,15 +670,15 @@ inline void
                                        entryID);
             return;
         }
-        });
+    });
 }
 
 inline void deleteDumpEntry(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                             const std::string& entryID,
                             const std::string& dumpType)
 {
-    auto respHandler =
-        [asyncResp, entryID](const boost::system::error_code& ec) {
+    auto respHandler = [asyncResp,
+                        entryID](const boost::system::error_code& ec) {
         BMCWEB_LOG_DEBUG("Dump Entry doDelete callback: Done");
         if (ec)
         {
@@ -869,7 +869,7 @@ inline void createDumpTaskCallback(
                              createdObjPath.str);
             taskData->state = "Completed";
             return task::completed;
-            },
+        },
             "type='signal',interface='org.freedesktop.DBus.Properties',"
             "member='PropertiesChanged',path='" +
                 createdObjPath.str + "'");
@@ -879,7 +879,7 @@ inline void createDumpTaskCallback(
         task->startTimer(std::chrono::minutes(6));
         task->populateResp(asyncResp->res);
         task->payload.emplace(payload);
-        },
+    },
         "xyz.openbmc_project.Dump.Manager", createdObjPath,
         "org.freedesktop.DBus.Introspectable", "Introspect");
 }
@@ -1013,7 +1013,7 @@ inline void createDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         }
         BMCWEB_LOG_DEBUG("Dump Created. Path: {}", objPath.str);
         createDumpTaskCallback(std::move(payload), asyncResp, objPath);
-        },
+    },
         "xyz.openbmc_project.Dump.Manager",
         "/xyz/openbmc_project/dump/" +
             std::string(boost::algorithm::to_lower_copy(dumpType)),
@@ -1034,7 +1034,7 @@ inline void clearDump(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             messages::internalError(asyncResp->res);
             return;
         }
-        },
+    },
         "xyz.openbmc_project.Dump.Manager",
         "/xyz/openbmc_project/dump/" + dumpTypeLowerCopy,
         "xyz.openbmc_project.Collection.DeleteAll", "DeleteAll");
@@ -1174,8 +1174,8 @@ inline void requestRoutesSystemLogServiceCollection(App& app)
                     return;
                 }
             }
-            });
         });
+    });
 }
 
 inline void requestRoutesEventLogService(App& app)
@@ -1218,7 +1218,7 @@ inline void requestRoutesEventLogService(App& app)
 
             {"target",
              "/redfish/v1/Systems/system/LogServices/EventLog/Actions/LogService.ClearLog"}};
-        });
+    });
 }
 
 inline void requestRoutesJournalEventLogClear(App& app)
@@ -1263,11 +1263,11 @@ inline void requestRoutesJournalEventLogClear(App& app)
             }
 
             messages::success(asyncResp->res);
-            },
+        },
             "org.freedesktop.systemd1", "/org/freedesktop/systemd1",
             "org.freedesktop.systemd1.Manager", "ReloadUnit", "rsyslog.service",
             "replace");
-        });
+    });
 }
 
 enum class LogParseError
@@ -1462,7 +1462,7 @@ inline void requestRoutesJournalEventLogEntryCollection(App& app)
                 "/redfish/v1/Systems/system/LogServices/EventLog/Entries?$skip=" +
                 std::to_string(skip + top);
         }
-        });
+    });
 }
 
 inline void requestRoutesJournalEventLogEntry(App& app)
@@ -1540,7 +1540,7 @@ inline void requestRoutesJournalEventLogEntry(App& app)
         }
         // Requested ID was not found
         messages::resourceNotFound(asyncResp->res, "LogEntry", targetID);
-        });
+    });
 }
 
 inline void requestRoutesDBusEventLogEntryCollection(App& app)
@@ -1734,11 +1734,11 @@ inline void requestRoutesDBusEventLogEntryCollection(App& app)
                 entriesArray.begin(), entriesArray.end(),
                 [](const nlohmann::json& left, const nlohmann::json& right) {
                 return (left["Id"] <= right["Id"]);
-                });
+            });
             asyncResp->res.jsonValue["Members@odata.count"] =
                 entriesArray.size();
-            });
         });
+    });
 }
 
 inline void requestRoutesDBusEventLogEntry(App& app)
@@ -1854,8 +1854,8 @@ inline void requestRoutesDBusEventLogEntry(App& app)
                     "/redfish/v1/Systems/system/LogServices/EventLog/Entries/" +
                     std::to_string(*id) + "/attachment";
             }
-            });
         });
+    });
 
     BMCWEB_ROUTE(
         app, "/redfish/v1/Systems/<str>/LogServices/EventLog/Entries/<str>/")
@@ -1901,8 +1901,8 @@ inline void requestRoutesDBusEventLogEntry(App& app)
                 messages::internalError(asyncResp->res);
                 return;
             }
-            });
         });
+    });
 
     BMCWEB_ROUTE(
         app, "/redfish/v1/Systems/<str>/LogServices/EventLog/Entries/<str>/")
@@ -1936,8 +1936,8 @@ inline void requestRoutesDBusEventLogEntry(App& app)
         dbus::utility::escapePathForDbus(entryID);
 
         // Process response from Logging service.
-        auto respHandler =
-            [asyncResp, entryID](const boost::system::error_code& ec) {
+        auto respHandler = [asyncResp,
+                            entryID](const boost::system::error_code& ec) {
             BMCWEB_LOG_DEBUG("EventLogEntry (DBus) doDelete callback: Done");
             if (ec)
             {
@@ -1964,7 +1964,7 @@ inline void requestRoutesDBusEventLogEntry(App& app)
             respHandler, "xyz.openbmc_project.Logging",
             "/xyz/openbmc_project/logging/entry/" + entryID,
             "xyz.openbmc_project.Object.Delete", "Delete");
-        });
+    });
 }
 
 inline void requestRoutesDBusEventLogEntryDownload(App& app)
@@ -2068,11 +2068,11 @@ inline void requestRoutesDBusEventLogEntryDownload(App& app)
             asyncResp->res.addHeader(
                 boost::beast::http::field::content_transfer_encoding, "Base64");
             asyncResp->res.body() = std::move(output);
-            },
+        },
             "xyz.openbmc_project.Logging",
             "/xyz/openbmc_project/logging/entry/" + entryID,
             "xyz.openbmc_project.Logging.Entry", "GetEntry");
-        });
+    });
 }
 
 constexpr const char* hostLoggerFolderPath = "/var/log/console";
@@ -2186,7 +2186,7 @@ inline void requestRoutesSystemHostLogger(App& app)
         asyncResp->res.jsonValue["Id"] = "HostLogger";
         asyncResp->res.jsonValue["Entries"]["@odata.id"] =
             "/redfish/v1/Systems/system/LogServices/HostLogger/Entries";
-        });
+    });
 }
 
 inline void requestRoutesSystemHostLoggerCollection(App& app)
@@ -2276,7 +2276,7 @@ inline void requestRoutesSystemHostLoggerCollection(App& app)
                     std::to_string(skip + top);
             }
         }
-        });
+    });
 }
 
 inline void requestRoutesSystemHostLoggerLogEntry(App& app)
@@ -2348,7 +2348,7 @@ inline void requestRoutesSystemHostLoggerLogEntry(App& app)
 
         // Requested ID was not found
         messages::resourceNotFound(asyncResp->res, "LogEntry", param);
-        });
+    });
 }
 
 inline void handleBMCLogServicesCollectionGet(
@@ -2420,7 +2420,7 @@ inline void handleBMCLogServicesCollectionGet(
 
         asyncResp->res.jsonValue["Members@odata.count"] =
             logServiceArrayLocal.size();
-        });
+    });
 #endif
 }
 
@@ -2460,7 +2460,7 @@ inline void requestRoutesBMCJournalLogService(App& app)
 
         asyncResp->res.jsonValue["Entries"]["@odata.id"] =
             "/redfish/v1/Managers/bmc/LogServices/Journal/Entries";
-        });
+    });
 }
 
 static int
@@ -2607,7 +2607,7 @@ inline void requestRoutesBMCJournalLogEntryCollection(App& app)
                 "/redfish/v1/Managers/bmc/LogServices/Journal/Entries?$skip=" +
                 std::to_string(skip + top);
         }
-        });
+    });
 }
 
 inline void requestRoutesBMCJournalLogEntry(App& app)
@@ -2679,7 +2679,7 @@ inline void requestRoutesBMCJournalLogEntry(App& app)
             return;
         }
         asyncResp->res.jsonValue.update(bmcJournalLogEntry);
-        });
+    });
 }
 
 inline void
@@ -2766,7 +2766,7 @@ inline void
                 break;
             }
         }
-        });
+    });
 }
 
 inline void handleLogServicesDumpServiceGet(
@@ -3160,7 +3160,7 @@ inline void requestRoutesCrashdumpService(App& app)
         asyncResp->res.jsonValue["Actions"]["#LogService.CollectDiagnosticData"]
                                 ["target"] =
             "/redfish/v1/Systems/system/LogServices/Crashdump/Actions/LogService.CollectDiagnosticData";
-        });
+    });
 }
 
 void inline requestRoutesCrashdumpClear(App& app)
@@ -3201,9 +3201,9 @@ void inline requestRoutesCrashdumpClear(App& app)
                 return;
             }
             messages::success(asyncResp->res);
-            },
+        },
             crashdumpObject, crashdumpPath, deleteAllInterface, "DeleteAll");
-        });
+    });
 }
 
 static void
@@ -3350,8 +3350,8 @@ inline void requestRoutesCrashdumpEntryCollection(App& app)
                 logCrashdumpEntry(asyncResp, logID,
                                   asyncResp->res.jsonValue["Members"]);
             }
-            });
         });
+    });
 }
 
 inline void requestRoutesCrashdumpEntry(App& app)
@@ -3387,7 +3387,7 @@ inline void requestRoutesCrashdumpEntry(App& app)
         }
         const std::string& logID = param;
         logCrashdumpEntry(asyncResp, logID, asyncResp->res.jsonValue);
-        });
+    });
 }
 
 inline void requestRoutesCrashdumpFile(App& app)
@@ -3472,7 +3472,7 @@ inline void requestRoutesCrashdumpFile(App& app)
             *crow::connections::systemBus, crashdumpObject,
             crashdumpPath + std::string("/") + logID, crashdumpInterface,
             std::move(getStoredLogCallback));
-        });
+    });
 }
 
 enum class OEMDiagnosticType
@@ -3614,7 +3614,7 @@ inline void requestRoutesCrashdumpCollect(App& app)
                     taskData->state = "Completed";
                 }
                 return task::completed;
-                },
+            },
                 taskMatchStr);
             // Generating logs takes a long time, set timeout to 20 minutes
             task->startTimer(std::chrono::minutes(20));
@@ -3625,7 +3625,7 @@ inline void requestRoutesCrashdumpCollect(App& app)
         crow::connections::systemBus->async_method_call(
             std::move(collectCrashdumpCallback), crashdumpObject, crashdumpPath,
             iface, method);
-        });
+    });
 }
 
 /**
@@ -3686,7 +3686,7 @@ inline void requestRoutesDBusLogServiceActionsClear(App& app)
             respHandler, "xyz.openbmc_project.Logging",
             "/xyz/openbmc_project/logging",
             "xyz.openbmc_project.Collection.DeleteAll", "DeleteAll");
-        });
+    });
 }
 
 /****************************************************
@@ -3738,7 +3738,7 @@ inline void requestRoutesPostCodesLogService(App& app)
         asyncResp->res.jsonValue["Actions"]["#LogService.ClearLog"] = {
             {"target",
              "/redfish/v1/Systems/system/LogServices/PostCodes/Actions/LogService.ClearLog"}};
-        });
+    });
 }
 
 inline void requestRoutesPostCodesClear(App& app)
@@ -3785,12 +3785,12 @@ inline void requestRoutesPostCodesClear(App& app)
                 messages::internalError(asyncResp->res);
                 return;
             }
-	    messages::success(asyncResp->res);
-            },
+            messages::success(asyncResp->res);
+        },
             "xyz.openbmc_project.State.Boot.PostCode0",
             "/xyz/openbmc_project/State/Boot/PostCode0",
             "xyz.openbmc_project.Collection.DeleteAll", "DeleteAll");
-        });
+    });
 }
 
 /**
@@ -4003,7 +4003,7 @@ static void
             messages::resourceNotFound(asyncResp->res, "LogEntry", entryId);
             return;
         }
-        },
+    },
         "xyz.openbmc_project.State.Boot.PostCode0",
         "/xyz/openbmc_project/State/Boot/PostCode0",
         "xyz.openbmc_project.State.Boot.PostCode", "GetPostCodesWithTimeStamp",
@@ -4059,7 +4059,7 @@ static void
                 "/redfish/v1/Systems/system/LogServices/PostCodes/Entries?$skip=" +
                 std::to_string(skip + top);
         }
-        },
+    },
         "xyz.openbmc_project.State.Boot.PostCode0",
         "/xyz/openbmc_project/State/Boot/PostCode0",
         "xyz.openbmc_project.State.Boot.PostCode", "GetPostCodesWithTimeStamp",
@@ -4085,7 +4085,7 @@ static void
             return;
         }
         getPostCodeForBoot(asyncResp, 1, bootCount, entryCount, skip, top);
-        });
+    });
 }
 
 inline void requestRoutesPostCodesEntryCollection(App& app)
@@ -4133,7 +4133,7 @@ inline void requestRoutesPostCodesEntryCollection(App& app)
         size_t skip = delegatedQuery.skip.value_or(0);
         size_t top = delegatedQuery.top.value_or(query_param::Query::maxTop);
         getCurrentBootNumber(asyncResp, skip, top);
-        });
+    });
 }
 
 inline void requestRoutesPostCodesEntryAdditionalData(App& app)
@@ -4224,11 +4224,11 @@ inline void requestRoutesPostCodesEntryAdditionalData(App& app)
             asyncResp->res.addHeader(
                 boost::beast::http::field::content_transfer_encoding, "Base64");
             asyncResp->res.body() = crow::utility::base64encode(strData);
-            },
+        },
             "xyz.openbmc_project.State.Boot.PostCode0",
             "/xyz/openbmc_project/State/Boot/PostCode0",
             "xyz.openbmc_project.State.Boot.PostCode", "GetPostCodes", index);
-        });
+    });
 }
 
 inline void requestRoutesPostCodesEntry(App& app)
@@ -4259,7 +4259,7 @@ inline void requestRoutesPostCodesEntry(App& app)
         }
 
         getPostCodeForEntry(asyncResp, targetID);
-        });
+    });
 }
 
 static bool getAcpiFileTimestamp(std::string& timestamp)
@@ -4338,7 +4338,7 @@ inline void requestRoutesAcpiService(App& app)
 
         asyncResp->res.jsonValue["Entries"]["@odata.id"] =
             "/redfish/v1/Systems/system/LogServices/acpi/Entries";
-        });
+    });
 }
 
 inline void requestRoutesAcpiEntryCollection(App& app)
@@ -4367,7 +4367,7 @@ inline void requestRoutesAcpiEntryCollection(App& app)
             return;
         }
         logAcpiDumpEntry(asyncResp, asyncResp->res.jsonValue["Members"]);
-        });
+    });
 }
 
 inline void requestRoutesAcpiEntry(App& app)
@@ -4387,7 +4387,7 @@ inline void requestRoutesAcpiEntry(App& app)
             return;
         }
         logAcpiDumpEntry(asyncResp, asyncResp->res.jsonValue);
-        });
+    });
 }
 
 inline void requestRoutesAcpiFile(App& app)
@@ -4416,7 +4416,7 @@ inline void requestRoutesAcpiFile(App& app)
         // Configure this to be a file download when accessed
         // from a browser
         asyncResp->res.addHeader("Content-Disposition", "attachment");
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index ae93158e..6c64ee5b 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -74,7 +74,7 @@ inline void
         }
 
         messages::success(asyncResp->res);
-        });
+    });
 }
 
 inline void
@@ -101,7 +101,7 @@ inline void
         }
 
         messages::success(asyncResp->res);
-        });
+    });
 }
 
 /**
@@ -152,7 +152,7 @@ inline void requestRoutesManagerResetAction(App& app)
                                               "ResetType");
 
         return;
-        });
+    });
 }
 
 /**
@@ -219,11 +219,11 @@ inline void requestRoutesManagerResetToDefaultsAction(App& app)
             // Can't erase what the BMC is running on
             doBMCGracefulRestart(asyncResp);
             messages::success(asyncResp->res);
-            },
+        },
             "xyz.openbmc_project.Software.BMC.Updater",
             "/xyz/openbmc_project/software",
             "xyz.openbmc_project.Common.FactoryReset", "Reset");
-        });
+    });
 }
 
 /**
@@ -266,7 +266,7 @@ inline void requestRoutesManagerResetActionInfo(App& app)
         parameters.emplace_back(std::move(parameter));
 
         asyncResp->res.jsonValue["Parameters"] = std::move(parameters);
-        });
+    });
 }
 
 static constexpr const char* objectManagerIface =
@@ -686,7 +686,7 @@ inline void
                 }
             }
         }
-        });
+    });
 }
 
 enum class CreatePIDRet
@@ -807,7 +807,7 @@ inline CreatePIDRet createPidInterface(
                 return;
             }
             messages::success(response->res);
-            },
+        },
             "xyz.openbmc_project.EntityManager", path, iface, "Delete");
         return CreatePIDRet::del;
     }
@@ -1172,7 +1172,7 @@ struct GetPIDValues : std::enable_shared_from_this<GetPIDValues>
                 return;
             }
             self->complete.subtree = subtreeLocal;
-            });
+        });
 
         // at the same time get the selected profile
         constexpr std::array<std::string_view, 1> thermalModeIfaces = {
@@ -1232,8 +1232,8 @@ struct GetPIDValues : std::enable_shared_from_this<GetPIDValues>
                 }
                 self->complete.currentProfile = *current;
                 self->complete.supportedProfiles = *supported;
-                });
             });
+        });
     }
 
     static void
@@ -1382,7 +1382,7 @@ struct SetPIDValues : std::enable_shared_from_this<SetPIDValues>
                 }
             }
             self->managedObj = mObj;
-            });
+        });
 
         // at the same time get the profile information
         constexpr std::array<std::string_view, 1> thermalModeIfaces = {
@@ -1440,8 +1440,8 @@ struct SetPIDValues : std::enable_shared_from_this<SetPIDValues>
                 self->supportedProfiles = *supported;
                 self->profileConnection = owner;
                 self->profilePath = path;
-                });
             });
+        });
     }
     void pidSetDone()
     {
@@ -1469,7 +1469,7 @@ struct SetPIDValues : std::enable_shared_from_this<SetPIDValues>
                     BMCWEB_LOG_ERROR("Error patching profile{}", ec);
                     messages::internalError(response->res);
                 }
-                });
+            });
         }
 
         for (auto& containerPair : configuration)
@@ -1608,7 +1608,7 @@ struct SetPIDValues : std::enable_shared_from_this<SetPIDValues>
                                 return;
                             }
                             messages::success(response->res);
-                            });
+                        });
                     }
                 }
                 else
@@ -1649,7 +1649,7 @@ struct SetPIDValues : std::enable_shared_from_this<SetPIDValues>
                             return;
                         }
                         messages::success(response->res);
-                        },
+                    },
                         "xyz.openbmc_project.EntityManager", chassis,
                         "xyz.openbmc_project.AddObject", "AddObject", output);
                 }
@@ -1710,7 +1710,7 @@ inline void getLocation(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
 
         asyncResp->res.jsonValue["Location"]["PartLocation"]["ServiceLabel"] =
             property;
-        });
+    });
 }
 // avoid name collision systems.hpp
 inline void
@@ -1737,7 +1737,7 @@ inline void
         // Convert to ISO 8601 standard
         asyncResp->res.jsonValue["LastResetTime"] =
             redfish::time_utils::getDateTimeUint(lastResetTimeStamp);
-        });
+    });
 }
 
 /**
@@ -1845,8 +1845,8 @@ inline void
                 return;
             }
             doBMCGracefulRestart(asyncResp);
-            });
         });
+    });
 }
 
 inline void setDateTime(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
@@ -1877,7 +1877,7 @@ inline void setDateTime(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
             return;
         }
         asyncResp->res.jsonValue["DateTime"] = datetime;
-        });
+    });
 }
 
 inline void
@@ -1900,7 +1900,7 @@ inline void
         }
         asyncResp->res.jsonValue["Status"]["Health"] = "OK";
         asyncResp->res.jsonValue["Status"]["State"] = "Enabled";
-        });
+    });
 }
 
 inline void requestRoutesManager(App& app)
@@ -2079,7 +2079,7 @@ inline void requestRoutesManager(App& app)
                 return;
             }
             checkForQuiesced(asyncResp);
-            });
+        });
 
         constexpr std::array<std::string_view, 1> interfaces = {
             "xyz.openbmc_project.Inventory.Item.Bmc"};
@@ -2180,7 +2180,7 @@ inline void requestRoutesManager(App& app)
                             asyncResp->res.jsonValue["SparePartNumber"] =
                                 *sparePartNumber;
                         }
-                        });
+                    });
                 }
                 else if (interfaceName ==
                          "xyz.openbmc_project.Inventory.Decorator.LocationCode")
@@ -2188,8 +2188,8 @@ inline void requestRoutesManager(App& app)
                     getLocation(asyncResp, connectionName, path);
                 }
             }
-            });
         });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/")
         .privileges(redfish::privileges::patchManager)
@@ -2270,7 +2270,7 @@ inline void requestRoutesManager(App& app)
         {
             setDateTime(asyncResp, std::move(*datetime));
         }
-        });
+    });
 }
 
 inline void requestRoutesManagerCollection(App& app)
@@ -2295,6 +2295,6 @@ inline void requestRoutesManagerCollection(App& app)
         nlohmann::json& bmc = members.emplace_back();
         bmc["@odata.id"] = "/redfish/v1/Managers/bmc";
         asyncResp->res.jsonValue["Members"] = std::move(members);
-        });
+    });
 }
 } // namespace redfish
diff --git a/redfish-core/lib/memory.hpp b/redfish-core/lib/memory.hpp
index 551a5790..a45a0a71 100644
--- a/redfish-core/lib/memory.hpp
+++ b/redfish-core/lib/memory.hpp
@@ -627,7 +627,7 @@ inline void getDimmDataByService(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
             return;
         }
         assembleDimmProperties(dimmId, asyncResp, properties, ""_json_pointer);
-        });
+    });
 }
 
 inline void assembleDimmPartitionData(
@@ -702,7 +702,7 @@ inline void getDimmPartitionData(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
         }
         nlohmann::json::json_pointer regionPtr = "/Regions"_json_pointer;
         assembleDimmPartitionData(asyncResp, properties, regionPtr);
-        }
+    }
 
     );
 }
@@ -768,7 +768,7 @@ inline void getDimmData(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
         asyncResp->res.jsonValue["@odata.id"] =
             boost::urls::format("/redfish/v1/Systems/system/Memory/{}", dimmId);
         return;
-        });
+    });
 }
 
 inline void requestRoutesMemoryCollection(App& app)
@@ -811,7 +811,7 @@ inline void requestRoutesMemoryCollection(App& app)
         collection_util::getCollectionMembers(
             asyncResp, boost::urls::url("/redfish/v1/Systems/system/Memory"),
             interfaces);
-        });
+    });
 }
 
 inline void requestRoutesMemory(App& app)
@@ -846,7 +846,7 @@ inline void requestRoutesMemory(App& app)
         }
 
         getDimmData(asyncResp, dimmId);
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/message_registries.hpp b/redfish-core/lib/message_registries.hpp
index 96082337..914bb6be 100644
--- a/redfish-core/lib/message_registries.hpp
+++ b/redfish-core/lib/message_registries.hpp
@@ -54,7 +54,8 @@ inline void handleMessageRegistryFileCollectionGet(
 
     nlohmann::json& members = asyncResp->res.jsonValue["Members"];
     for (const char* memberName :
-         std::to_array({"Base", "TaskEvent", "NodeManager", "ResourceEvent", "BiosAttributeRegistry", "OpenBMC"}))
+         std::to_array({"Base", "TaskEvent", "NodeManager", "ResourceEvent",
+                        "BiosAttributeRegistry", "OpenBMC"}))
     {
         nlohmann::json::object_t member;
         member["@odata.id"] = boost::urls::format("/redfish/v1/Registries/{}",
diff --git a/redfish-core/lib/meterstatedata.hpp b/redfish-core/lib/meterstatedata.hpp
index 4b755855..e2653c5f 100644
--- a/redfish-core/lib/meterstatedata.hpp
+++ b/redfish-core/lib/meterstatedata.hpp
@@ -256,7 +256,7 @@ inline void
                     }
                 }
                 return task::completed;
-                },
+            },
                 signalMatchStr);
             task->startTimer(std::chrono::minutes(1));
             task->populateResp(asyncResp->res);
@@ -365,7 +365,7 @@ inline void getProvisionDyamicFeatureData(
         }
         getCPUProvisionDynamic(asyncResp, processorId, reqFeature,
                                featureEnabled);
-        },
+    },
         ondemandService, objectPath, featureEnableInterfaceName, method);
 }
 } // namespace ondemand
@@ -426,14 +426,14 @@ inline void requestRoutesMeterStateData(App& app)
             }
             messages::resourceNotFound(asyncResp->res, "OnDemandFeature",
                                        reqFeature);
-            },
+        },
             "xyz.openbmc_project.ObjectMapper",
             "/xyz/openbmc_project/object_mapper",
             "xyz.openbmc_project.ObjectMapper", "GetSubTree",
             "/xyz/openbmc_project/ondemand", 0,
             std::array<const std::string, 1>{
                 "xyz.openbmc_project.CPU.FeatureEnable"});
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/metric_report.hpp b/redfish-core/lib/metric_report.hpp
index 7543186b..3eb69277 100644
--- a/redfish-core/lib/metric_report.hpp
+++ b/redfish-core/lib/metric_report.hpp
@@ -82,7 +82,7 @@ inline void requestRoutesMetricReportCollection(App& app)
             boost::urls::url("/redfish/v1/TelemetryService/MetricReports"),
             interfaces,
             "/xyz/openbmc_project/Telemetry/Reports/TelemetryService");
-        });
+    });
 }
 
 inline void requestRoutesMetricReport(App& app)
@@ -126,10 +126,10 @@ inline void requestRoutesMetricReport(App& app)
                 }
 
                 telemetry::fillReport(asyncResp->res.jsonValue, id, ret);
-                });
-            },
+            });
+        },
             telemetry::service, reportPath, telemetry::reportInterface,
             "Update");
-        });
+    });
 }
 } // namespace redfish
diff --git a/redfish-core/lib/metric_report_definition.hpp b/redfish-core/lib/metric_report_definition.hpp
index 970e79c3..b2ab0fbd 100644
--- a/redfish-core/lib/metric_report_definition.hpp
+++ b/redfish-core/lib/metric_report_definition.hpp
@@ -890,7 +890,7 @@ class AddReport
             {
                 messages::success(asyncResp->res);
             }
-            },
+        },
             telemetry::service, "/xyz/openbmc_project/Telemetry/Reports",
             "xyz.openbmc_project.Telemetry.ReportManager", "AddReport",
             "TelemetryService/" + args.id, args.name, args.reportingType,
@@ -938,7 +938,7 @@ inline void retrieveMetricPropertyToDbusPaths(
                 return;
             }
             callback(uriToDbus);
-            });
+        });
     }
 }
 
@@ -1034,7 +1034,7 @@ class UpdateMetrics
             {
                 return;
             }
-            },
+        },
             "xyz.openbmc_project.Telemetry", getDbusReportPath(reportId),
             "org.freedesktop.DBus.Properties", "Set",
             "xyz.openbmc_project.Telemetry.Report", "ReadingParameters",
@@ -1085,7 +1085,7 @@ inline void
         {
             return;
         }
-        },
+    },
         "xyz.openbmc_project.Telemetry", getDbusReportPath(id),
         "org.freedesktop.DBus.Properties", "Set",
         "xyz.openbmc_project.Telemetry.Report", "Enabled",
@@ -1141,7 +1141,7 @@ inline void setReportTypeAndInterval(
         {
             return;
         }
-        },
+    },
         "xyz.openbmc_project.Telemetry", getDbusReportPath(id),
         "xyz.openbmc_project.Telemetry.Report", "SetReportingProperties",
         dbusReportingType, recurrenceInterval);
@@ -1170,7 +1170,7 @@ inline void
         {
             return;
         }
-        },
+    },
         "xyz.openbmc_project.Telemetry", getDbusReportPath(id),
         "org.freedesktop.DBus.Properties", "Set",
         "xyz.openbmc_project.Telemetry.Report", "ReportUpdates",
@@ -1198,7 +1198,7 @@ inline void
         {
             return;
         }
-        },
+    },
         "xyz.openbmc_project.Telemetry", getDbusReportPath(id),
         "org.freedesktop.DBus.Properties", "Set",
         "xyz.openbmc_project.Telemetry.Report", "ReportActions",
@@ -1304,9 +1304,9 @@ inline void
                     return;
                 }
                 updateMetricsReq->insert(uriToDbus);
-                });
+            });
         }
-        });
+    });
 }
 
 inline void handleMetricReportDefinitionCollectionHead(
@@ -1455,8 +1455,8 @@ inline void handleReportPut(App& app, const crow::Request& req,
             [asyncResp, addReportReq](const std::map<std::string, std::string>&
                                           metricPropertyToDbusPaths) {
             addReportReq->insert(metricPropertyToDbusPaths);
-            });
-        },
+        });
+    },
         service, reportPath, "xyz.openbmc_project.Object.Delete", "Delete");
 }
 
@@ -1482,7 +1482,7 @@ inline void
             return;
         }
         asyncResp->res.result(boost::beast::http::status::no_content);
-        },
+    },
         service, reportPath, "xyz.openbmc_project.Object.Delete", "Delete");
 }
 } // namespace telemetry
@@ -1530,7 +1530,7 @@ inline void handleMetricReportDefinitionsPost(
                 return;
             }
             addReportReq->insert(uriToDbus);
-            });
+        });
     }
 }
 
@@ -1573,7 +1573,7 @@ inline void
         }
 
         telemetry::fillReportDefinition(asyncResp, id, properties);
-        });
+    });
 }
 
 inline void handleMetricReportDelete(
@@ -1609,7 +1609,7 @@ inline void handleMetricReportDelete(
         }
 
         asyncResp->res.result(boost::beast::http::status::no_content);
-        },
+    },
         telemetry::service, reportPath, "xyz.openbmc_project.Object.Delete",
         "Delete");
 }
diff --git a/redfish-core/lib/network_protocol.hpp b/redfish-core/lib/network_protocol.hpp
index 83b6b666..151f993d 100644
--- a/redfish-core/lib/network_protocol.hpp
+++ b/redfish-core/lib/network_protocol.hpp
@@ -116,7 +116,7 @@ void getEthernetIfaceData(CallbackFunc&& callback)
         extractNTPServersAndDomainNamesData(dbusData, ntpServers, domainNames);
 
         callback(true, ntpServers, domainNames);
-        });
+    });
 }
 
 inline void afterNetworkPortRequest(
@@ -257,11 +257,11 @@ inline void handleNTPProtocolEnabled(
         "/xyz/openbmc_project/time/sync_method",
         "xyz.openbmc_project.Time.Synchronization", "TimeSyncMethod",
         timeSyncMethod, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                messages::internalError(asyncResp->res);
-            }
-        });
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+        }
+    });
 }
 
 inline void
@@ -377,11 +377,11 @@ inline void
                             messages::internalError(asyncResp->res);
                             return;
                         }
-                        });
+                    });
                 }
             }
         }
-        });
+    });
 }
 
 inline void
@@ -417,7 +417,7 @@ inline void
                         messages::internalError(asyncResp->res);
                         return;
                     }
-                    });
+                });
                 sdbusplus::asio::setProperty(
                     *crow::connections::systemBus, entry.second.begin()->first,
                     entry.first,
@@ -429,10 +429,10 @@ inline void
                         messages::internalError(asyncResp->res);
                         return;
                     }
-                    });
+                });
             }
         }
-        });
+    });
 }
 
 inline std::string getHostName()
@@ -471,7 +471,7 @@ inline void
         {
             asyncResp->res.jsonValue["NTP"]["ProtocolEnabled"] = false;
         }
-        });
+    });
 }
 
 inline std::string encodeServiceObjectPath(std::string_view serviceName)
diff --git a/redfish-core/lib/pcie.hpp b/redfish-core/lib/pcie.hpp
index 3831e184..6bd74f91 100644
--- a/redfish-core/lib/pcie.hpp
+++ b/redfish-core/lib/pcie.hpp
@@ -67,7 +67,7 @@ static inline void handlePCIeDevicePath(
                 return;
             }
             callback(pcieDevicePath, object.begin()->first);
-            });
+        });
         return;
     }
 
@@ -96,7 +96,7 @@ static inline void getValidPCIeDevicePath(
         handlePCIeDevicePath(pcieDeviceId, asyncResp, pcieDevicePaths,
                              callback);
         return;
-        });
+    });
 }
 
 static inline void handlePCIeDeviceCollectionGet(
@@ -254,7 +254,7 @@ inline void getPCIeDeviceSlotPath(
             return;
         }
         callback(endpoints[0]);
-        });
+    });
 }
 
 inline void
@@ -277,7 +277,7 @@ inline void
             const boost::system::error_code& ec2,
             const dbus::utility::DBusPropertiesMap& pcieSlotProperties) {
         addPCIeSlotProperties(asyncResp->res, ec2, pcieSlotProperties);
-        });
+    });
 }
 
 inline void afterGetPCIeDeviceSlotPath(
@@ -290,7 +290,7 @@ inline void afterGetPCIeDeviceSlotPath(
          pcieDeviceSlot](const boost::system::error_code& ec,
                          const dbus::utility::MapperGetObject& object) {
         afterGetDbusObject(asyncResp, pcieDeviceSlot, ec, object);
-        });
+    });
 }
 
 inline void
@@ -317,7 +317,7 @@ inline void
         {
             asyncResp->res.jsonValue["Status"]["Health"] = "Critical";
         }
-        });
+    });
 }
 
 inline void
@@ -343,7 +343,7 @@ inline void
         {
             asyncResp->res.jsonValue["Status"]["State"] = "Absent";
         }
-        });
+    });
 }
 
 inline void
@@ -408,7 +408,7 @@ inline void
         {
             asyncResp->res.jsonValue["SparePartNumber"] = *sparePartNumber;
         }
-        });
+    });
 }
 
 inline void addPCIeDeviceProperties(
@@ -521,7 +521,7 @@ inline void getPCIeDeviceProperties(
             return;
         }
         callback(pcieDevProperties);
-        });
+    });
 }
 
 inline void addPCIeDeviceCommonProperties(
@@ -669,8 +669,8 @@ inline void handlePCIeFunctionCollectionGet(
                 const dbus::utility::DBusPropertiesMap& pcieDevProperties) {
             addPCIeFunctionList(asyncResp->res, pcieDeviceId,
                                 pcieDevProperties);
-            });
         });
+    });
 }
 
 inline void requestRoutesSystemPCIeFunctionCollection(App& app)
@@ -823,7 +823,7 @@ inline void
                                             pcieFunctionId);
             addPCIeFunctionProperties(asyncResp->res, pcieFunctionId,
                                       pcieDevProperties);
-            });
+        });
     });
 }
 
diff --git a/redfish-core/lib/pcie_slots.hpp b/redfish-core/lib/pcie_slots.hpp
index 92ae576c..b8e63892 100644
--- a/redfish-core/lib/pcie_slots.hpp
+++ b/redfish-core/lib/pcie_slots.hpp
@@ -154,7 +154,7 @@ inline void onMapperAssociationDone(
         [asyncResp](const boost::system::error_code& ec2,
                     const dbus::utility::DBusPropertiesMap& propertiesList) {
         onPcieSlotGetAllDone(asyncResp, ec2, propertiesList);
-        });
+    });
 }
 
 inline void
@@ -204,7 +204,7 @@ inline void
                     const dbus::utility::MapperEndPoints& endpoints) {
                 onMapperAssociationDone(asyncResp, chassisID, pcieSlotPath,
                                         connectionName, ec2, endpoints);
-                });
+            });
         }
     }
 }
@@ -227,7 +227,7 @@ inline void handlePCIeSlotCollectionGet(
          chassisID](const boost::system::error_code& ec,
                     const dbus::utility::MapperGetSubTreeResponse& subtree) {
         onMapperSubtreeDone(asyncResp, chassisID, ec, subtree);
-        });
+    });
 }
 
 inline void requestRoutesPCIeSlots(App& app)
diff --git a/redfish-core/lib/power.hpp b/redfish-core/lib/power.hpp
index e7094ad0..a39fab79 100644
--- a/redfish-core/lib/power.hpp
+++ b/redfish-core/lib/power.hpp
@@ -110,8 +110,8 @@ inline void setPowerCapOverride(
                 }
                 sensorsAsyncResp->asyncResp->res.result(
                     boost::beast::http::status::no_content);
-                });
             });
+        });
     };
     redfish::chassis_utils::getValidChassisPath(sensorsAsyncResp->asyncResp,
                                                 sensorsAsyncResp->chassisId,
@@ -300,7 +300,7 @@ inline void requestRoutesPower(App& app)
 
         dbus::utility::getSubTreePaths("/xyz/openbmc_project/inventory", 0,
                                        interfaces, std::move(chassisHandler));
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Chassis/<str>/Power/")
         .privileges(redfish::privileges::patchPower)
@@ -337,7 +337,7 @@ inline void requestRoutesPower(App& app)
             allCollections.emplace("Voltages", *std::move(voltageCollections));
             setSensorsOverride(sensorAsyncResp, allCollections);
         }
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/power_supply.hpp b/redfish-core/lib/power_supply.hpp
index c8fc5527..99b2e6cc 100644
--- a/redfish-core/lib/power_supply.hpp
+++ b/redfish-core/lib/power_supply.hpp
@@ -87,7 +87,7 @@ inline void
         }
 
         updatePowerSupplyList(asyncResp, chassisId, subtreePaths);
-        });
+    });
 }
 
 inline void handlePowerSupplyCollectionHead(
@@ -112,7 +112,7 @@ inline void handlePowerSupplyCollectionHead(
         asyncResp->res.addHeader(
             boost::beast::http::field::link,
             "</redfish/v1/JsonSchemas/PowerSupplyCollection/PowerSupplyCollection.json>; rel=describedby");
-        });
+    });
 }
 
 inline void handlePowerSupplyCollectionGet(
@@ -214,7 +214,7 @@ inline void getValidPowerSupplyPath(
                                        powerSupplyId);
             return;
         }
-        });
+    });
 }
 
 inline void
@@ -240,7 +240,7 @@ inline void
         {
             asyncResp->res.jsonValue["Status"]["State"] = "Absent";
         }
-        });
+    });
 }
 
 inline void
@@ -266,7 +266,7 @@ inline void
         {
             asyncResp->res.jsonValue["Status"]["Health"] = "Critical";
         }
-        });
+    });
 }
 
 inline void
@@ -331,7 +331,7 @@ inline void
         {
             asyncResp->res.jsonValue["SparePartNumber"] = *sparePartNumber;
         }
-        });
+    });
 }
 
 inline void getPowerSupplyFirmwareVersion(
@@ -354,7 +354,7 @@ inline void getPowerSupplyFirmwareVersion(
             return;
         }
         asyncResp->res.jsonValue["FirmwareVersion"] = value;
-        });
+    });
 }
 
 inline void
@@ -378,7 +378,7 @@ inline void
         }
         asyncResp->res.jsonValue["Location"]["PartLocation"]["ServiceLabel"] =
             value;
-        });
+    });
 }
 
 inline void handleGetEfficiencyResponse(
@@ -447,7 +447,7 @@ inline void handlePowerSupplyAttributesSubTreeResponse(
         "xyz.openbmc_project.Control.PowerSupplyAttributes", "DeratingFactor",
         [asyncResp](const boost::system::error_code& ec1, uint32_t value) {
         handleGetEfficiencyResponse(asyncResp, ec1, value);
-        });
+    });
 }
 
 inline void
@@ -461,7 +461,7 @@ inline void
         [asyncResp](const boost::system::error_code& ec,
                     const dbus::utility::MapperGetSubTreeResponse& subtree) {
         handlePowerSupplyAttributesSubTreeResponse(asyncResp, ec, subtree);
-        });
+    });
 }
 
 inline void
@@ -515,7 +515,7 @@ inline void
                                           powerSupplyPath);
             getPowerSupplyLocation(asyncResp, object.begin()->first,
                                    powerSupplyPath);
-            });
+        });
 
         getEfficiencyPercent(asyncResp);
     });
@@ -549,7 +549,7 @@ inline void
                 boost::beast::http::field::link,
                 "</redfish/v1/JsonSchemas/PowerSupply/PowerSupply.json>; rel=describedby");
         });
-        });
+    });
 }
 
 inline void
diff --git a/redfish-core/lib/processor.hpp b/redfish-core/lib/processor.hpp
index 80c51dd4..ee9691db 100644
--- a/redfish-core/lib/processor.hpp
+++ b/redfish-core/lib/processor.hpp
@@ -72,7 +72,7 @@ inline void getProcessorUUID(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
             return;
         }
         asyncResp->res.jsonValue["UUID"] = property;
-        });
+    });
 }
 
 inline void getCpuDataByInterface(
@@ -290,7 +290,7 @@ inline void getCpuDataByService(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
             asyncResp->res.jsonValue["TotalCores"] = totalCores;
         }
         return;
-        });
+    });
 }
 
 /**
@@ -384,7 +384,7 @@ inline void
         [asyncResp](const boost::system::error_code& ec,
                     const dbus::utility::DBusPropertiesMap& properties) {
         readThrottleProperties(asyncResp, ec, properties);
-        });
+    });
 }
 
 inline void getCpuAssetData(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
@@ -458,7 +458,7 @@ inline void getCpuAssetData(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
         {
             asyncResp->res.jsonValue["SparePartNumber"] = *sparePartNumber;
         }
-        });
+    });
 }
 
 inline void getCpuRevisionData(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
@@ -494,7 +494,7 @@ inline void getCpuRevisionData(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
         {
             asyncResp->res.jsonValue["Version"] = *version;
         }
-        });
+    });
 }
 
 inline void getAcceleratorDataByService(
@@ -548,7 +548,7 @@ inline void getAcceleratorDataByService(
         asyncResp->res.jsonValue["Status"]["State"] = state;
         asyncResp->res.jsonValue["Status"]["Health"] = health;
         asyncResp->res.jsonValue["ProcessorType"] = "Accelerator";
-        });
+    });
 }
 
 // OperatingConfig D-Bus Types
@@ -690,7 +690,7 @@ inline void
                 }
 
                 highSpeedCoreIdsHandler(asyncResp, baseSpeedList);
-                });
+            });
         }
 
         if (baseSpeedPriorityEnabled != nullptr)
@@ -698,7 +698,7 @@ inline void
             json["BaseSpeedPriorityState"] =
                 *baseSpeedPriorityEnabled ? "Enabled" : "Disabled";
         }
-        });
+    });
 }
 
 /**
@@ -728,7 +728,7 @@ inline void getCpuLocationCode(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
 
         asyncResp->res.jsonValue["Location"]["PartLocation"]["ServiceLabel"] =
             property;
-        });
+    });
 }
 
 /**
@@ -758,7 +758,7 @@ inline void getCpuUniqueId(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         }
         asyncResp->res
             .jsonValue["ProcessorId"]["ProtectedIdentificationNumber"] = id;
-        });
+    });
 }
 
 /**
@@ -838,7 +838,7 @@ inline void getProcessorObject(const std::shared_ptr<bmcweb::AsyncResp>& resp,
             return;
         }
         messages::resourceNotFound(resp->res, "Processor", processorId);
-        });
+    });
 }
 
 inline void
@@ -1002,7 +1002,7 @@ inline void
                 baseSpeedArray.emplace_back(std::move(speed));
             }
         }
-        });
+    });
 }
 
 /**
@@ -1129,7 +1129,7 @@ inline void patchAppliedOperatingConfig(
         [resp, appliedConfigUri](const boost::system::error_code& ec,
                                  const sdbusplus::message_t& msg) {
         handleAppliedConfigResponse(resp, appliedConfigUri, ec, msg);
-        });
+    });
 }
 
 inline void
@@ -1225,9 +1225,8 @@ inline void requestRoutesOperatingConfigCollection(App& app)
 
                 // Use the common search routine to construct the
                 // Collection of all Config objects under this CPU.
-                constexpr std::array<std::string_view, 1> interface {
-                    "xyz.openbmc_project.Inventory.Item.Cpu.OperatingConfig"
-                };
+                constexpr std::array<std::string_view, 1> interface{
+                    "xyz.openbmc_project.Inventory.Item.Cpu.OperatingConfig"};
                 collection_util::getCollectionMembers(
                     asyncResp,
                     boost::urls::format(
@@ -1236,8 +1235,8 @@ inline void requestRoutesOperatingConfigCollection(App& app)
                     interface, object.c_str());
                 return;
             }
-            });
         });
+    });
 }
 
 inline void requestRoutesOperatingConfig(App& app)
@@ -1310,8 +1309,8 @@ inline void requestRoutesOperatingConfig(App& app)
             }
             messages::resourceNotFound(asyncResp->res, "OperatingConfig",
                                        configName);
-            });
         });
+    });
 }
 
 inline void requestRoutesProcessorCollection(App& app)
@@ -1364,7 +1363,7 @@ inline void requestRoutesProcessorCollection(App& app)
             asyncResp,
             boost::urls::url("/redfish/v1/Systems/system/Processors"),
             processorInterfaces);
-        });
+    });
 }
 
 inline void requestRoutesProcessor(App& app)
@@ -1414,7 +1413,7 @@ inline void requestRoutesProcessor(App& app)
         getProcessorObject(
             asyncResp, processorId,
             std::bind_front(getProcessorData, asyncResp, processorId));
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Systems/<str>/Processors/<str>/")
         .privileges(redfish::privileges::patchProcessor)
@@ -1464,7 +1463,7 @@ inline void requestRoutesProcessor(App& app)
                                                asyncResp, processorId,
                                                appliedConfigUri));
         }
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/redfish_sessions.hpp b/redfish-core/lib/redfish_sessions.hpp
index 28213e0d..a4d71dab 100644
--- a/redfish-core/lib/redfish_sessions.hpp
+++ b/redfish-core/lib/redfish_sessions.hpp
@@ -175,11 +175,11 @@ inline void
                 return;
             }
             return;
-            },
+        },
             ipmiSessionService, ipmiSessionInfPath,
             "org.freedesktop.DBus.Properties", "GetAll",
             "xyz.openbmc_project.Ipmi.SessionInfo");
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetSubTree", "/", 0, interfaces);
@@ -259,7 +259,7 @@ inline void
         }
         messages::resourceNotFound(asyncResp->res, "Session", sessionId);
         return;
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths", "/", 0,
@@ -349,7 +349,7 @@ inline void handleSessionCollectionGet(
         }
         asyncResp->res.jsonValue["Members@odata.count"] =
             asyncResp->res.jsonValue["Members"].size();
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths", "/", 0,
@@ -436,7 +436,6 @@ inline void handleSessionCollectionPost(
         asyncResp->res.result(boost::beast::http::status::created);
         fillSessionObject(asyncResp->res, *session);
     }
-
 }
 inline void handleSessionServiceHead(
     crow::App& app, const crow::Request& req,
diff --git a/redfish-core/lib/redfish_util.hpp b/redfish-core/lib/redfish_util.hpp
index fad410d1..d224e3ef 100644
--- a/redfish-core/lib/redfish_util.hpp
+++ b/redfish-core/lib/redfish_util.hpp
@@ -93,7 +93,7 @@ void getMainChassisId(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
         std::string chassisId = subtree[0].first.substr(idPos + 1);
         BMCWEB_LOG_DEBUG("chassisId = {}", chassisId);
         callback(chassisId, asyncResp);
-        });
+    });
 }
 
 template <typename CallbackFunc>
@@ -170,7 +170,7 @@ void getPortStatusAndPath(
                     socketData.begin(), socketData.end(),
                     [&kv](const std::tuple<std::string, std::string, bool>& i) {
                     return std::get<1>(i) == kv.first;
-                    });
+                });
                 if (find != socketData.end())
                 {
                     // It only takes one enabled systemd service to consider a
@@ -198,7 +198,7 @@ void getPortStatusAndPath(
         }
 
         callback(ec, socketData);
-        },
+    },
         "org.freedesktop.systemd1", "/org/freedesktop/systemd1",
         "org.freedesktop.systemd1.Manager", "ListUnits");
 }
@@ -252,7 +252,7 @@ void getPortNumber(const std::string& socketPath, CallbackFunc&& callback)
             BMCWEB_LOG_ERROR("{}", ec3);
         }
         callback(ec, port);
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/roles.hpp b/redfish-core/lib/roles.hpp
index 784f716a..7cd55b23 100644
--- a/redfish-core/lib/roles.hpp
+++ b/redfish-core/lib/roles.hpp
@@ -97,7 +97,7 @@ inline void requestRoutesRoles(App& app)
         asyncResp->res.jsonValue["@odata.id"] =
             boost::urls::format("/redfish/v1/AccountService/Roles/{}", roleId);
         asyncResp->res.jsonValue["AssignedPrivileges"] = std::move(privArray);
-        });
+    });
 }
 
 inline void requestRoutesRoleCollection(App& app)
@@ -145,8 +145,8 @@ inline void requestRoutesRoleCollection(App& app)
             }
             asyncResp->res.jsonValue["Members@odata.count"] =
                 memberArray.size();
-            });
         });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/sensor_patching.hpp b/redfish-core/lib/sensor_patching.hpp
index 444c6adb..48d5961c 100644
--- a/redfish-core/lib/sensor_patching.hpp
+++ b/redfish-core/lib/sensor_patching.hpp
@@ -95,7 +95,7 @@ inline void
                             sensorAsyncResp->asyncResp->res);
                         return;
                     }
-                    },
+                },
                     item.second, item.first, "org.freedesktop.DBus.Properties",
                     "Set", "xyz.openbmc_project.Sensor.Value", "Value",
                     std::variant<double>(iterator->second.first));
@@ -139,7 +139,7 @@ inline void requestRoutesSensorPatching(App& app)
         overrideMap.emplace(nameType.second, std::make_pair(value, "Reading"));
 
         setSensor(sensorsAsyncResp, overrideMap);
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/sensors.hpp b/redfish-core/lib/sensors.hpp
index c5f0f7bb..15a2506d 100644
--- a/redfish-core/lib/sensors.hpp
+++ b/redfish-core/lib/sensors.hpp
@@ -417,7 +417,7 @@ void getObjectsWithConnection(
         BMCWEB_LOG_DEBUG("Found {} connections", connections.size());
         callback(std::move(connections), std::move(objectsWithConnection));
         BMCWEB_LOG_DEBUG("getObjectsWithConnection resp_handler exit");
-        });
+    });
     BMCWEB_LOG_DEBUG("getObjectsWithConnection exit");
 }
 
@@ -593,8 +593,8 @@ void getChassis(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                              &nodeSensorList, culledSensorList);
             BMCWEB_LOG_DEBUG("Finishing with {}", culledSensorList->size());
             callback(culledSensorList);
-            });
         });
+    });
     BMCWEB_LOG_DEBUG("getChassis exit");
 }
 
@@ -1048,7 +1048,7 @@ inline void populateFanRedundancy(
                                  [sensorsAsyncResp](const std::string& entry) {
                     return entry.find(sensorsAsyncResp->chassisId) !=
                            std::string::npos;
-                    });
+                });
 
                 if (found == endpoints.end())
                 {
@@ -1135,7 +1135,7 @@ inline void populateFanRedundancy(
                             std::find_if(fanRedfish.begin(), fanRedfish.end(),
                                          [itemName](const nlohmann::json& fan) {
                             return fan["Name"] == itemName;
-                            });
+                        });
                         if (schemaItem != fanRedfish.end())
                         {
                             nlohmann::json::object_t collectionId;
@@ -1177,10 +1177,10 @@ inline void populateFanRedundancy(
                     redundancy["Status"]["State"] = "Enabled";
 
                     jResp.emplace_back(std::move(redundancy));
-                    });
                 });
+            });
         }
-        });
+    });
 }
 
 inline void
@@ -1514,7 +1514,7 @@ static void getInventoryItemsData(
                                   invConnectionsIndex + 1);
 
             BMCWEB_LOG_DEBUG("getInventoryItemsData respHandler exit");
-            });
+        });
     }
 
     BMCWEB_LOG_DEBUG("getInventoryItemsData exit");
@@ -1596,7 +1596,7 @@ static void getInventoryItemsConnections(
 
         callback(invConnections);
         BMCWEB_LOG_DEBUG("getInventoryItemsConnections respHandler exit");
-        });
+    });
     BMCWEB_LOG_DEBUG("getInventoryItemsConnections exit");
 }
 
@@ -1740,7 +1740,7 @@ static void getInventoryItemAssociations(
         }
         callback(inventoryItems);
         BMCWEB_LOG_DEBUG("getInventoryItemAssociations respHandler exit");
-        });
+    });
 
     BMCWEB_LOG_DEBUG("getInventoryItemAssociations exit");
 }
@@ -1930,7 +1930,7 @@ void getInventoryLeds(
         getInventoryLedData(sensorsAsyncResp, inventoryItems, ledConnections,
                             std::move(callback));
         BMCWEB_LOG_DEBUG("getInventoryLeds respHandler exit");
-        });
+    });
     BMCWEB_LOG_DEBUG("getInventoryLeds exit");
 }
 
@@ -1981,10 +1981,10 @@ void getPowerSupplyAttributesData(
     const std::string& psAttributesConnection = (*it).second;
 
     // Response handler for Get DeratingFactor property
-    auto respHandler =
-        [sensorsAsyncResp, inventoryItems,
-         callback{std::forward<Callback>(callback)}](
-            const boost::system::error_code& ec, const uint32_t value) {
+    auto respHandler = [sensorsAsyncResp, inventoryItems,
+                        callback{std::forward<Callback>(callback)}](
+                           const boost::system::error_code& ec,
+                           const uint32_t value) {
         BMCWEB_LOG_DEBUG("getPowerSupplyAttributesData respHandler enter");
         if (ec)
         {
@@ -2114,7 +2114,7 @@ void getPowerSupplyAttributes(
                                      psAttributesConnections,
                                      std::move(callback));
         BMCWEB_LOG_DEBUG("getPowerSupplyAttributes respHandler exit");
-        });
+    });
     BMCWEB_LOG_DEBUG("getPowerSupplyAttributes exit");
 }
 
@@ -2526,7 +2526,7 @@ inline void getSensorData(
                 }
             }
             BMCWEB_LOG_DEBUG("getManagedObjectsCb exit");
-            });
+        });
     }
     BMCWEB_LOG_DEBUG("getSensorData exit");
 }
@@ -2765,7 +2765,7 @@ inline void setSensorsOverride(
                         messages::internalError(
                             sensorAsyncResp->asyncResp->res);
                     }
-                    });
+                });
             }
         };
         // Get object with connection for the given sensor name
@@ -2925,7 +2925,7 @@ inline void
         std::string type = path.filename();
         objectPropertiesToJson(name, type, sensors::node::sensors, valuesDict,
                                asyncResp->res.jsonValue, nullptr);
-        });
+    });
 }
 
 inline void handleSensorGet(App& app, const crow::Request& req,
@@ -2977,7 +2977,7 @@ inline void handleSensorGet(App& app, const crow::Request& req,
         }
         getSensorFromDbus(asyncResp, sensorPath, subtree);
         BMCWEB_LOG_DEBUG("respHandler1 exit");
-        });
+    });
 }
 
 } // namespace sensors
diff --git a/redfish-core/lib/storage.hpp b/redfish-core/lib/storage.hpp
index 1f41ea86..42a2a03e 100644
--- a/redfish-core/lib/storage.hpp
+++ b/redfish-core/lib/storage.hpp
@@ -63,9 +63,8 @@ inline void handleSystemsStorageCollectionGet(
         "/redfish/v1/Systems/system/Storage";
     asyncResp->res.jsonValue["Name"] = "Storage Collection";
 
-    constexpr std::array<std::string_view, 1> interface {
-        "xyz.openbmc_project.Inventory.Item.Storage"
-    };
+    constexpr std::array<std::string_view, 1> interface{
+        "xyz.openbmc_project.Inventory.Item.Storage"};
     collection_util::getCollectionMembers(
         asyncResp, boost::urls::format("/redfish/v1/Systems/system/Storage"),
         interface);
@@ -83,9 +82,8 @@ inline void handleStorageCollectionGet(
         "#StorageCollection.StorageCollection";
     asyncResp->res.jsonValue["@odata.id"] = "/redfish/v1/Storage";
     asyncResp->res.jsonValue["Name"] = "Storage Collection";
-    constexpr std::array<std::string_view, 1> interface {
-        "xyz.openbmc_project.Inventory.Item.Storage"
-    };
+    constexpr std::array<std::string_view, 1> interface{
+        "xyz.openbmc_project.Inventory.Item.Storage"};
     collection_util::getCollectionMembers(
         asyncResp, boost::urls::format("/redfish/v1/Storage"), interface);
 }
@@ -172,7 +170,7 @@ inline void afterSystemsStorageGetSubtree(
                                      dbus::utility::MapperServiceMap>& object) {
         return sdbusplus::message::object_path(object.first).filename() ==
                storageId;
-        });
+    });
     if (storage == subtree.end())
     {
         messages::resourceNotFound(asyncResp->res, "#Storage.v1_13_0.Storage",
@@ -241,7 +239,7 @@ inline void afterSubtree(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                                      dbus::utility::MapperServiceMap>& object) {
         return sdbusplus::message::object_path(object.first).filename() ==
                storageId;
-        });
+    });
     if (storage == subtree.end())
     {
         messages::resourceNotFound(asyncResp->res, "#Storage.v1_13_0.Storage",
@@ -350,7 +348,7 @@ inline void getDriveAsset(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         {
             asyncResp->res.jsonValue["Model"] = *model;
         }
-        });
+    });
 }
 
 inline void getDrivePresent(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -373,7 +371,7 @@ inline void getDrivePresent(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         {
             asyncResp->res.jsonValue["Status"]["State"] = "Absent";
         }
-        });
+    });
 }
 
 inline void getDriveState(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -399,7 +397,7 @@ inline void getDriveState(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         {
             asyncResp->res.jsonValue["Status"]["State"] = "Updating";
         }
-        });
+    });
 }
 
 inline std::optional<drive::MediaType> convertDriveType(std::string_view type)
@@ -610,7 +608,7 @@ inline void
         // to the user in unencrypted form."
         asyncResp->res.jsonValue["EncryptionStatus"] =
             drive::EncryptionStatus::Unlocked;
-        });
+    });
 }
 
 static void addAllDriveInfo(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -657,7 +655,7 @@ inline void afterGetSubtreeSystemsStorageDrive(
                                    dbus::utility::MapperServiceMap>& object) {
         return sdbusplus::message::object_path(object.first).filename() ==
                driveId;
-        });
+    });
 
     if (drive == subtree.end())
     {
@@ -812,9 +810,9 @@ inline void afterChassisDriveCollectionSubtreeGet(
                 // navigation links will be registered in next patch set
             }
             asyncResp->res.jsonValue["Members@odata.count"] = resp.size();
-            }); // end association lambda
+        }); // end association lambda
 
-    }           // end Iterate over all retrieved ObjectPaths
+    }       // end Iterate over all retrieved ObjectPaths
 }
 /**
  * Chassis drives, this URL will show all the DriveCollection
@@ -918,7 +916,7 @@ inline void
                 const boost::system::error_code& ec,
                 const dbus::utility::MapperGetSubTreeResponse& subtree) {
             buildDrive(asyncResp, chassisId, driveName, ec, subtree);
-            });
+        });
     }
 }
 
@@ -973,10 +971,10 @@ inline void
                     return; // no drives = no failures
                 }
                 matchAndFillDrive(asyncResp, chassisId, driveName, resp);
-                });
+            });
             break;
         }
-        });
+    });
 }
 
 /**
@@ -1065,7 +1063,7 @@ inline void populateStorageController(
         {
             asyncResp->res.jsonValue["Status"]["State"] = "Absent";
         }
-        });
+    });
 
     sdbusplus::asio::getAllProperties(
         *crow::connections::systemBus, connectionName, path,
@@ -1075,7 +1073,7 @@ inline void populateStorageController(
                         std::pair<std::string, dbus::utility::DbusVariantType>>&
                         propertiesList) {
         getStorageControllerAsset(asyncResp, ec, propertiesList);
-        });
+    });
 }
 
 inline void getStorageControllerHandler(
@@ -1182,7 +1180,7 @@ inline void handleSystemsStorageControllerCollectionGet(
                     const dbus::utility::MapperGetSubTreePathsResponse&
                         controllerList) {
         populateStorageControllerCollection(asyncResp, ec, controllerList);
-        });
+    });
 }
 
 inline void handleSystemsStorageControllerGet(
@@ -1210,7 +1208,7 @@ inline void handleSystemsStorageControllerGet(
          controllerId](const boost::system::error_code& ec,
                        const dbus::utility::MapperGetSubTreeResponse& subtree) {
         getStorageControllerHandler(asyncResp, controllerId, ec, subtree);
-        });
+    });
 }
 
 inline void requestRoutesStorageControllerCollection(App& app)
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 80aba548..606f1c7b 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -271,7 +271,7 @@ inline void
             return;
         }
         getProcessorProperties(asyncResp, properties);
-        });
+    });
 }
 
 /*
@@ -309,7 +309,7 @@ inline void
                     return;
                 }
                 updateDimmProperties(asyncResp, dimmState);
-                });
+            });
         }
         return;
     }
@@ -376,7 +376,7 @@ inline void
             return;
         }
         processMemoryProperties(asyncResp, service, path, properties);
-        });
+    });
 }
 
 /*
@@ -518,7 +518,7 @@ inline void
                                 BMCWEB_LOG_DEBUG("UUID = {}", valueStr);
                                 asyncResp->res.jsonValue["UUID"] = valueStr;
                             }
-                            });
+                        });
                     }
                     else if (interfaceName ==
                              "xyz.openbmc_project.Inventory.Item.System")
@@ -592,7 +592,7 @@ inline void
                             sw_util::populateSoftwareInformation(
                                 asyncResp, sw_util::biosPurpose, "BiosVersion",
                                 false);
-                            });
+                        });
 
                         sdbusplus::asio::getProperty<std::string>(
                             *crow::connections::systemBus, connection.first,
@@ -610,12 +610,12 @@ inline void
                             }
 
                             asyncResp->res.jsonValue["AssetTag"] = value;
-                            });
+                        });
                     }
                 }
             }
         }
-        });
+    });
 }
 
 /**
@@ -685,7 +685,7 @@ inline void getHostState(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
             asyncResp->res.jsonValue["PowerState"] = "Off";
             asyncResp->res.jsonValue["Status"]["State"] = "Disabled";
         }
-        });
+    });
 }
 
 /**
@@ -942,7 +942,7 @@ inline void getBootProgress(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 
         asyncResp->res.jsonValue["BootProgress"]["LastState"] =
             dbusToRfBootProgress(bootProgressStr);
-        });
+    });
 }
 
 /**
@@ -976,7 +976,7 @@ inline void getBootProgressLastStateTime(
         // Convert to ISO 8601 standard
         asyncResp->res.jsonValue["BootProgress"]["LastStateTime"] =
             redfish::time_utils::getDateTimeUintUs(lastStateTime);
-        });
+    });
 }
 
 /**
@@ -1028,7 +1028,7 @@ inline void getCPLDBootProgress(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
         aResp->res.jsonValue["BootProgress"]["Oem"]["CpldLastState"] =
             *powerState;
         aResp->res.jsonValue["BootProgress"]["Oem"]["CpldErr"] = *errorSource;
-        },
+    },
         "xyz.openbmc_project.DCSCM.Cpld.Manager",
         "/xyz/openbmc_project/dcscm/cpld/manager/CPU",
         "org.freedesktop.DBus.Properties", "GetAll",
@@ -1073,7 +1073,7 @@ inline void
         }
 
         asyncResp->res.jsonValue["Boot"]["BootSourceOverrideMode"] = rfType;
-        });
+    });
 }
 
 /**
@@ -1105,7 +1105,7 @@ inline void
         asyncResp->res
             .jsonValue["Boot"]
                       ["BootSourceOverrideTarget@Redfish.AllowableValues"] = {
-            "None", "Pxe", "Hdd", "Cd","Safe", "Diags", "BiosSetup", "Usb"};
+            "None", "Pxe", "Hdd", "Cd", "Safe", "Diags", "BiosSetup", "Usb"};
 
         if (bootModeStr !=
             "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular")
@@ -1117,7 +1117,7 @@ inline void
                     rfMode;
             }
         }
-        });
+    });
 }
 
 /**
@@ -1160,7 +1160,7 @@ inline void
         // Get BootMode as BootSourceOverrideTarget is constructed
         // from both BootSource and BootMode
         getBootOverrideMode(asyncResp);
-        });
+    });
 }
 
 /**
@@ -1208,7 +1208,7 @@ inline void processBootOverrideEnable(
             asyncResp->res.jsonValue["Boot"]["BootSourceOverrideEnabled"] =
                 "Continuous";
         }
-        });
+    });
 }
 
 /**
@@ -1240,7 +1240,7 @@ inline void
         }
 
         processBootOverrideEnable(asyncResp, bootOverrideEnable);
-        });
+    });
 }
 
 /**
@@ -1296,7 +1296,7 @@ inline void
         // Convert to ISO 8601 standard
         asyncResp->res.jsonValue["LastResetTime"] =
             redfish::time_utils::getDateTimeUint(lastResetTimeStamp);
-        });
+    });
 }
 
 /**
@@ -1358,7 +1358,7 @@ inline void getAutomaticRebootAttempts(
             asyncResp->res.jsonValue["Boot"]["AutomaticRetryAttempts"] =
                 *retryAttempts;
         }
-        });
+    });
 }
 
 /**
@@ -1408,7 +1408,7 @@ inline void
         asyncResp->res
             .jsonValue["Boot"]["AutomaticRetryConfig@Redfish.AllowableValues"] =
             {"Disabled", "RetryAttempts"};
-        });
+    });
 }
 
 /**
@@ -1430,14 +1430,14 @@ inline void setAutomaticRetryAttempts(
         "/xyz/openbmc_project/state/host0",
         "xyz.openbmc_project.Control.Boot.RebootAttempts", "RetryAttempts",
         retryAttempts, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                BMCWEB_LOG_ERROR(
-                    "DBUS response error: Set setAutomaticRetryAttempts{}", ec);
-                messages::internalError(asyncResp->res);
-                return;
-            }
-        });
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR(
+                "DBUS response error: Set setAutomaticRetryAttempts{}", ec);
+            messages::internalError(asyncResp->res);
+            return;
+        }
+    });
 }
 
 inline computer_system::PowerRestorePolicyTypes
@@ -1496,7 +1496,7 @@ inline void
         }
 
         asyncResp->res.jsonValue["PowerRestorePolicy"] = restore;
-        });
+    });
 }
 
 /**
@@ -1533,7 +1533,7 @@ inline void
         {
             asyncResp->res.jsonValue["Boot"]["StopBootOnFault"] = "Never";
         }
-        });
+    });
 }
 
 /**
@@ -1618,8 +1618,8 @@ inline void getTrustedModuleRequiredToBoot(
                     .jsonValue["Boot"]["TrustedModuleRequiredToBoot"] =
                     "Disabled";
             }
-            });
         });
+    });
 }
 
 /**
@@ -1700,8 +1700,8 @@ inline void setTrustedModuleRequiredToBoot(
                 return;
             }
             BMCWEB_LOG_DEBUG("Set TrustedModuleRequiredToBoot done.");
-            });
         });
+    });
 }
 
 /**
@@ -1762,7 +1762,7 @@ inline void setBootType(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             return;
         }
         BMCWEB_LOG_DEBUG("Boot type update done.");
-        });
+    });
 }
 
 /**
@@ -1825,7 +1825,7 @@ inline void setBootEnable(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             return;
         }
         BMCWEB_LOG_DEBUG("Boot override enable update done.");
-        });
+    });
 
     if (!bootOverrideEnable)
     {
@@ -1849,7 +1849,7 @@ inline void setBootEnable(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             return;
         }
         BMCWEB_LOG_DEBUG("Boot one_time update done.");
-        });
+    });
 }
 
 /**
@@ -1902,7 +1902,7 @@ inline void
             return;
         }
         BMCWEB_LOG_DEBUG("Boot source update done.");
-        });
+    });
 
     sdbusplus::asio::setProperty(
         *crow::connections::systemBus, "xyz.openbmc_project.Settings",
@@ -1916,7 +1916,7 @@ inline void
             return;
         }
         BMCWEB_LOG_DEBUG("Boot mode update done.");
-        });
+    });
 }
 
 /**
@@ -2002,15 +2002,15 @@ inline void setAssetTag(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             *crow::connections::systemBus, service, path,
             "xyz.openbmc_project.Inventory.Decorator.AssetTag", "AssetTag",
             assetTag, [asyncResp](const boost::system::error_code& ec2) {
-                if (ec2)
-                {
-                    BMCWEB_LOG_DEBUG("D-Bus response error on AssetTag Set {}",
-                                     ec2);
-                    messages::internalError(asyncResp->res);
-                    return;
-                }
-            });
+            if (ec2)
+            {
+                BMCWEB_LOG_DEBUG("D-Bus response error on AssetTag Set {}",
+                                 ec2);
+                messages::internalError(asyncResp->res);
+                return;
+            }
         });
+    });
 }
 
 /**
@@ -2061,12 +2061,11 @@ inline void setStopBootOnFault(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
         return;
     }
 
-    sdbusplus::asio::setProperty(*crow::connections::systemBus,
-                                 "xyz.openbmc_project.Settings",
-                                 "/xyz/openbmc_project/logging/settings",
-                                 "xyz.openbmc_project.Logging.Settings",
-                                 "QuiesceOnHwError", *stopBootEnabled,
-                                 [aResp](const boost::system::error_code& ec) {
+    sdbusplus::asio::setProperty(
+        *crow::connections::systemBus, "xyz.openbmc_project.Settings",
+        "/xyz/openbmc_project/logging/settings",
+        "xyz.openbmc_project.Logging.Settings", "QuiesceOnHwError",
+        *stopBootEnabled, [aResp](const boost::system::error_code& ec) {
         if (ec)
         {
             if (ec.value() != EBADR)
@@ -2117,12 +2116,12 @@ inline void
         "/xyz/openbmc_project/control/host0/auto_reboot",
         "xyz.openbmc_project.Control.Boot.RebootPolicy", "AutoReboot",
         autoRebootEnabled, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                messages::internalError(asyncResp->res);
-                return;
-            }
-        });
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+            return;
+        }
+    });
 }
 
 inline std::string dbusPowerRestorePolicyFromRedfish(std::string_view policy)
@@ -2170,12 +2169,12 @@ inline void
         "/xyz/openbmc_project/control/host0/power_restore_policy",
         "xyz.openbmc_project.Control.Power.RestorePolicy", "PowerRestorePolicy",
         powerRestorePolicy, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                messages::internalError(asyncResp->res);
-                return;
-            }
-        });
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+            return;
+        }
+    });
 }
 
 #ifdef BMCWEB_ENABLE_REDFISH_PROVISIONING_FEATURE
@@ -2228,7 +2227,7 @@ inline void getPlatformState(std::shared_ptr<bmcweb::AsyncResp> aResp)
         }
         oemPFR["Data"] = *postcode;
         oemPFR["PlatformState"] = *platformState;
-        },
+    },
         "xyz.openbmc_project.PFR.Manager", "/xyz/openbmc_project/pfr",
         "org.freedesktop.DBus.Properties", "GetAll",
         "xyz.openbmc_project.State.Boot.Platform");
@@ -2299,7 +2298,7 @@ inline void getProvisioningStatus(std::shared_ptr<bmcweb::AsyncResp> asyncResp)
         {
             oemPFR["ProvisioningStatus"] = "NotProvisioned";
         }
-        });
+    });
 }
 #endif
 
@@ -2418,8 +2417,8 @@ inline void getPowerMode(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 
             BMCWEB_LOG_DEBUG("Current power mode: {}", pmode);
             translatePowerMode(asyncResp, pmode);
-            });
         });
+    });
 }
 
 /**
@@ -2537,8 +2536,8 @@ inline void setPowerMode(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                 messages::internalError(asyncResp->res);
                 return;
             }
-            });
         });
+    });
 }
 
 /**
@@ -2662,7 +2661,7 @@ inline void
             }
             hostWatchdogTimer["TimeoutAction"] = action;
         }
-        });
+    });
 }
 
 /**
@@ -2700,13 +2699,13 @@ inline void
             "/xyz/openbmc_project/watchdog/host0",
             "xyz.openbmc_project.State.Watchdog", "ExpireAction",
             wdtTimeOutActStr, [asyncResp](const boost::system::error_code& ec) {
-                if (ec)
-                {
-                    BMCWEB_LOG_DEBUG("DBUS response error {}", ec);
-                    messages::internalError(asyncResp->res);
-                    return;
-                }
-            });
+            if (ec)
+            {
+                BMCWEB_LOG_DEBUG("DBUS response error {}", ec);
+                messages::internalError(asyncResp->res);
+                return;
+            }
+        });
     }
 
     if (wdtEnable)
@@ -2722,7 +2721,7 @@ inline void
                 messages::internalError(asyncResp->res);
                 return;
             }
-            });
+        });
     }
 }
 
@@ -2869,8 +2868,8 @@ inline void
                 messages::internalError(asyncResp->res);
                 return;
             }
-            });
         });
+    });
 
     BMCWEB_LOG_DEBUG("EXIT: Get idle power saver parameters");
 }
@@ -2957,13 +2956,13 @@ inline void
                 *crow::connections::systemBus, service, path,
                 "xyz.openbmc_project.Control.Power.IdlePowerSaver", "Enabled",
                 *ipsEnable, [asyncResp](const boost::system::error_code& ec2) {
-                    if (ec2)
-                    {
-                        BMCWEB_LOG_DEBUG("DBUS response error {}", ec2);
-                        messages::internalError(asyncResp->res);
-                        return;
-                    }
-                });
+                if (ec2)
+                {
+                    BMCWEB_LOG_DEBUG("DBUS response error {}", ec2);
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+            });
         }
         if (ipsEnterUtil)
         {
@@ -2978,7 +2977,7 @@ inline void
                     messages::internalError(asyncResp->res);
                     return;
                 }
-                });
+            });
         }
         if (ipsEnterTime)
         {
@@ -2995,7 +2994,7 @@ inline void
                     messages::internalError(asyncResp->res);
                     return;
                 }
-                });
+            });
         }
         if (ipsExitUtil)
         {
@@ -3010,7 +3009,7 @@ inline void
                     messages::internalError(asyncResp->res);
                     return;
                 }
-                });
+            });
         }
         if (ipsExitTime)
         {
@@ -3027,9 +3026,9 @@ inline void
                     messages::internalError(asyncResp->res);
                     return;
                 }
-                });
+            });
         }
-        });
+    });
 
     BMCWEB_LOG_DEBUG("EXIT: Set idle power saver parameters");
 }
@@ -3104,7 +3103,7 @@ inline void handleComputerSystemCollectionGet(
         nlohmann::json::object_t hypervisor;
         hypervisor["@odata.id"] = "/redfish/v1/Systems/hypervisor";
         ifaceArray2.emplace_back(std::move(hypervisor));
-        });
+    });
 }
 
 /**
@@ -3127,7 +3126,7 @@ inline void doNMI(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
             return;
         }
         messages::success(asyncResp->res);
-        },
+    },
         serviceName, objectPath, interfaceName, method);
 }
 
@@ -3261,7 +3260,7 @@ inline void handleComputerSystemResetActionPost(
                 return;
             }
             messages::success(asyncResp->res);
-            });
+        });
     }
     else
     {
@@ -3279,7 +3278,7 @@ inline void handleComputerSystemResetActionPost(
                 return;
             }
             messages::success(asyncResp->res);
-            });
+        });
     }
 }
 
@@ -3453,7 +3452,7 @@ inline void
             }
 
             health->inventory = resp;
-            });
+        });
         health->populate();
     }
 
diff --git a/redfish-core/lib/task.hpp b/redfish-core/lib/task.hpp
index 21dd7058..824d82bc 100644
--- a/redfish-core/lib/task.hpp
+++ b/redfish-core/lib/task.hpp
@@ -297,7 +297,7 @@ struct TaskData : std::enable_shared_from_this<TaskData>
                     [self] { self->match.reset(); });
                 return;
             }
-            });
+        });
 
         extendTimer(timeout);
         messages.emplace_back(messages::taskStarted(std::to_string(index)));
@@ -347,7 +347,7 @@ inline void requestRoutesTaskMonitor(App& app)
             // we compare against the string version as on failure
             // strtoul returns 0
             return std::to_string(task->index) == strParam;
-            });
+        });
 
         if (find == task::tasks.end())
         {
@@ -362,7 +362,7 @@ inline void requestRoutesTaskMonitor(App& app)
             return;
         }
         ptr->populateResp(asyncResp->res);
-        });
+    });
 }
 
 inline void requestRoutesTask(App& app)
@@ -388,7 +388,7 @@ inline void requestRoutesTask(App& app)
             // we compare against the string version as on failure
             // strtoul returns 0
             return std::to_string(task->index) == strParam;
-            });
+        });
 
         if (find == task::tasks.end())
         {
@@ -436,7 +436,7 @@ inline void requestRoutesTask(App& app)
             asyncResp->res.jsonValue["HidePayload"] = true;
         }
         asyncResp->res.jsonValue["PercentComplete"] = ptr->percentComplete;
-        });
+    });
 }
 
 inline void requestRoutesTaskCollection(App& app)
@@ -470,7 +470,7 @@ inline void requestRoutesTaskCollection(App& app)
                                     std::to_string(task->index));
             members.emplace_back(std::move(member));
         }
-        });
+    });
 }
 
 inline void requestRoutesTaskService(App& app)
@@ -504,7 +504,7 @@ inline void requestRoutesTaskService(App& app)
         asyncResp->res.jsonValue["ServiceEnabled"] = true;
         asyncResp->res.jsonValue["Tasks"]["@odata.id"] =
             "/redfish/v1/TaskService/Tasks";
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/telemetry_service.hpp b/redfish-core/lib/telemetry_service.hpp
index 2077c5ac..70c2bc14 100644
--- a/redfish-core/lib/telemetry_service.hpp
+++ b/redfish-core/lib/telemetry_service.hpp
@@ -89,7 +89,7 @@ inline void handleTelemetryServiceGet(
 
         asyncResp->res.jsonValue["SupportedCollectionFunctions"] =
             std::move(supportedCollectionFunctions);
-        });
+    });
 }
 
 inline void requestRoutesTelemetryService(App& app)
diff --git a/redfish-core/lib/thermal.hpp b/redfish-core/lib/thermal.hpp
index cc548e17..9d057f2c 100644
--- a/redfish-core/lib/thermal.hpp
+++ b/redfish-core/lib/thermal.hpp
@@ -42,7 +42,7 @@ inline void requestRoutesThermal(App& app)
 
         // TODO Need to get Chassis Redundancy information.
         getChassisData(sensorAsyncResp);
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Chassis/<str>/Thermal/")
         .privileges(redfish::privileges::patchThermal)
@@ -86,7 +86,7 @@ inline void requestRoutesThermal(App& app)
             allCollections.emplace("Fans", *std::move(fanCollections));
         }
         setSensorsOverride(sensorsAsyncResp, allCollections);
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/thermal_subsystem.hpp b/redfish-core/lib/thermal_subsystem.hpp
index a560c2c4..a1d315f1 100644
--- a/redfish-core/lib/thermal_subsystem.hpp
+++ b/redfish-core/lib/thermal_subsystem.hpp
@@ -88,7 +88,7 @@ inline void
 
         asyncResp->res.jsonValue["FanRedundancy"].push_back(
             std::move(redundandy));
-        });
+    });
 }
 
 inline void doThermalSubsystemCollection(
diff --git a/redfish-core/lib/trigger.hpp b/redfish-core/lib/trigger.hpp
index 48e348ec..f03fbf32 100644
--- a/redfish-core/lib/trigger.hpp
+++ b/redfish-core/lib/trigger.hpp
@@ -942,7 +942,7 @@ inline void handleTriggerCollectionPost(
         [asyncResp, id = ctx.id](const boost::system::error_code& ec,
                                  const std::string& dbusPath) {
         afterCreateTrigger(ec, dbusPath, asyncResp, id);
-        },
+    },
         service, "/xyz/openbmc_project/Telemetry/Triggers",
         "xyz.openbmc_project.Telemetry.TriggerManager", "AddTrigger",
         "TelemetryService/" + ctx.id, ctx.name, ctx.actions, ctx.sensors,
@@ -974,7 +974,7 @@ inline void requestRoutesTriggerCollection(App& app)
             boost::urls::url("/redfish/v1/TelemetryService/Triggers"),
             interfaces,
             "/xyz/openbmc_project/Telemetry/Triggers/TelemetryService");
-        });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/TelemetryService/Triggers/")
         .privileges(redfish::privileges::postTriggersCollection)
@@ -1018,8 +1018,8 @@ inline void requestRoutesTrigger(App& app)
             {
                 messages::internalError(asyncResp->res);
             }
-            });
         });
+    });
 
     BMCWEB_ROUTE(app, "/redfish/v1/TelemetryService/Triggers/<str>/")
         .privileges(redfish::privileges::deleteTriggers)
@@ -1049,10 +1049,10 @@ inline void requestRoutesTrigger(App& app)
             }
 
             asyncResp->res.result(boost::beast::http::status::no_content);
-            },
+        },
             telemetry::service, triggerPath,
             "xyz.openbmc_project.Object.Delete", "Delete");
-        });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/update_service.hpp b/redfish-core/lib/update_service.hpp
index 585d3051..51a357b0 100644
--- a/redfish-core/lib/update_service.hpp
+++ b/redfish-core/lib/update_service.hpp
@@ -89,7 +89,7 @@ inline static void activateImage(const std::string& objPath,
                                  errorCode);
                 BMCWEB_LOG_DEBUG("error msg = {}", errorCode.message());
             }
-            },
+        },
             service, objPath, "org.freedesktop.DBus.Properties", "Set",
             activationIntf, reqActivationPropName,
             std::variant<std::string>(reqActivationsActive));
@@ -158,16 +158,16 @@ inline static void activateImage(const std::string& objPath,
                                          ec3);
                     }
                     return;
-                    },
+                },
                     service, objPath, "org.freedesktop.DBus.Properties", "Set",
                     activationIntf, reqActivationPropName,
                     std::variant<std::string>(reqActivation));
-                },
+            },
                 invDict[0].first, "/xyz/openbmc_project/software/" + imgTarget,
                 "org.freedesktop.DBus.Properties", "Get", activationIntf,
                 "Activation");
         }
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetSubTree", "/",
@@ -347,7 +347,7 @@ static void
                         // unless it is an error
 
                         return !task::completed;
-                            },
+                    },
                             "type='signal',interface='org.freedesktop.DBus.Properties',"
                             "member='PropertiesChanged',path='" +
                                 objPath.str + "'");
@@ -356,7 +356,7 @@ static void
                     task->payload.emplace(std::move(payload));
                 }
                 fwUpdateInProgress = false;
-                });
+            });
 
             break;
         }
@@ -498,7 +498,7 @@ static void monitorForSoftwareAvailable(
                 }
             }
         }
-        });
+    });
 }
 
 /**
@@ -620,13 +620,13 @@ inline void requestRoutesUpdateServiceActionsSimpleUpdate(App& app)
             {
                 BMCWEB_LOG_DEBUG("Call to DownloaViaTFTP Success");
             }
-            },
+        },
             "xyz.openbmc_project.Software.Download",
             "/xyz/openbmc_project/software", "xyz.openbmc_project.Common.TFTP",
             "DownloadViaTFTP", fwFile, tftpServer);
 
         BMCWEB_LOG_DEBUG("Exit UpdateService.SimpleUpdate doPost");
-        });
+    });
 }
 
 inline void uploadImageFile(crow::Response& res, std::string_view body)
@@ -678,14 +678,14 @@ inline void setApplyTime(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         "/xyz/openbmc_project/software/apply_time",
         "xyz.openbmc_project.Software.ApplyTime", "RequestedApplyTime",
         applyTimeNewVal, [asyncResp](const boost::system::error_code& ec) {
-            if (ec)
-            {
-                BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
-                messages::internalError(asyncResp->res);
-                return;
-            }
-            messages::success(asyncResp->res);
-        });
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        messages::success(asyncResp->res);
+    });
 }
 
 inline void
@@ -899,7 +899,7 @@ inline void requestRoutesUpdateService(App& app)
                                         ["HttpPushUriApplyTime"]["ApplyTime"] =
                     "OnReset";
             }
-            });
+        });
 
         // Get the ApplyOptions value
         crow::connections::systemBus->async_method_call(
@@ -921,11 +921,11 @@ inline void requestRoutesUpdateService(App& app)
                 asyncResp->res.jsonValue["Oem"]["ApplyOptions"]["ClearConfig"] =
                     *b;
             }
-            },
+        },
             "xyz.openbmc_project.Software.BMC.Updater",
             "/xyz/openbmc_project/software", "org.freedesktop.DBus.Properties",
             "Get", "xyz.openbmc_project.Software.ApplyOptions", "ClearConfig");
-        });
+    });
     BMCWEB_ROUTE(app, "/redfish/v1/UpdateService/")
         .privileges(redfish::privileges::patchUpdateService)
         .methods(boost::beast::http::verb::patch)(
@@ -981,7 +981,7 @@ inline void requestRoutesUpdateService(App& app)
                             return;
                         }
                         messages::success(asyncResp->res);
-                        },
+                    },
                         "xyz.openbmc_project.Software.BMC.Updater",
                         "/xyz/openbmc_project/software",
                         "org.freedesktop.DBus.Properties", "Set",
@@ -1087,7 +1087,7 @@ inline void requestRoutesUpdateService(App& app)
                         }
                         httpPushUriTargetBusy = targetBusy;
                         httpPushUriTargets = uriTargets;
-                        },
+                    },
                         "xyz.openbmc_project.ObjectMapper",
                         "/xyz/openbmc_project/object_mapper",
                         "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths",
@@ -1105,7 +1105,7 @@ inline void requestRoutesUpdateService(App& app)
                 httpPushUriTargetBusy = *imgTargetBusy;
             }
         }
-        });
+    });
 
 // The "old" behavior of the update service URI causes redfish-service validator
 // failures when the Allow header is supported, given that in the spec,
@@ -1126,7 +1126,7 @@ inline void requestRoutesUpdateService(App& app)
             "299 - \"POST to /redfish/v1/UpdateService is deprecated. Use "
             "the value contained within HttpPushUri.\"");
         handleUpdateServicePost(app, req, asyncResp);
-        });
+    });
 #endif
     BMCWEB_ROUTE(app, "/redfish/v1/UpdateService/update/")
         .privileges(redfish::privileges::postUpdateService)
@@ -1157,7 +1157,7 @@ inline void requestRoutesSoftwareInventoryCollection(App& app)
             asyncResp,
             boost::urls::url("/redfish/v1/UpdateService/FirmwareInventory"),
             iface, "/xyz/openbmc_project/software");
-        });
+    });
 }
 /* Fill related item links (i.e. bmc, bios) in for inventory */
 inline static void
@@ -1257,7 +1257,7 @@ inline void
         std::string formatDesc = swInvPurpose->substr(endDesc);
         asyncResp->res.jsonValue["Description"] = formatDesc + " image";
         getRelatedItems(asyncResp, *swInvPurpose);
-        });
+    });
 }
 
 inline void requestRoutesSoftwareInventory(App& app)
@@ -1331,8 +1331,8 @@ inline void requestRoutesSoftwareInventory(App& app)
 
             asyncResp->res.jsonValue["Updateable"] = false;
             sw_util::getSwUpdatableStatus(asyncResp, swId);
-            });
         });
+    });
 }
 
 } // namespace redfish
diff --git a/redfish-core/lib/virtual_media.hpp b/redfish-core/lib/virtual_media.hpp
index e84d3876..6c616389 100644
--- a/redfish-core/lib/virtual_media.hpp
+++ b/redfish-core/lib/virtual_media.hpp
@@ -137,7 +137,7 @@ inline void
 
         BMCWEB_LOG_DEBUG("Parent item not found");
         asyncResp->res.result(boost::beast::http::status::not_found);
-        });
+    });
 }
 
 /**
@@ -181,7 +181,7 @@ void findItemAndRunHandler(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
         BMCWEB_LOG_DEBUG("GetObjectType: {}", service);
 
         findAndParseObject(service, resName, aResp, std::move(handler));
-        },
+    },
         "xyz.openbmc_project.ObjectMapper",
         "/xyz/openbmc_project/object_mapper",
         "xyz.openbmc_project.ObjectMapper", "GetObject",
@@ -369,7 +369,7 @@ inline void getVmResourceList(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
             members.emplace_back(std::move(item));
         }
         asyncResp->res.jsonValue["Members@odata.count"] = members.size();
-        });
+    });
 }
 
 inline void
@@ -719,7 +719,7 @@ static inline std::shared_ptr<MatchWrapper>
         boost::asio::post(crow::connections::systemBus->get_io_context(),
                           [name, matchWrapper = matchWrapper]()
 
-                          {
+        {
             BMCWEB_LOG_DEBUG("Removing matcher for {} node.", name);
             matchWrapper->stop();
         });
@@ -834,7 +834,7 @@ inline void doMountVmLegacy(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             messages::operationFailed(asyncResp->res);
             wrapper->stop();
         }
-        },
+    },
         service, objectPath, "xyz.openbmc_project.VirtualMedia.Legacy", "Mount",
         imageUrl, rw, unixFd);
 }
@@ -1027,7 +1027,7 @@ inline void doEjectAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             messages::operationFailed(asyncResp->res);
             wrapper->stop();
         }
-        },
+    },
         service, objectPath, ifaceName, "Unmount");
 }
 
@@ -1106,8 +1106,8 @@ inline void handleManagersVirtualMediaActionInsertPost(
             }
             BMCWEB_LOG_DEBUG("Parent item not found");
             messages::resourceNotFound(asyncResp->res, "VirtualMedia", resName);
-            });
         });
+    });
 }
 
 inline void handleManagersVirtualMediaActionEject(
@@ -1169,8 +1169,8 @@ inline void handleManagersVirtualMediaActionEject(
             }
             BMCWEB_LOG_DEBUG("Parent item not found");
             messages::resourceNotFound(asyncResp->res, "VirtualMedia", resName);
-            });
         });
+    });
 }
 
 inline void handleManagersVirtualMediaCollectionGet(
@@ -1210,7 +1210,7 @@ inline void handleManagersVirtualMediaCollectionGet(
         BMCWEB_LOG_DEBUG("GetObjectType: {}", service);
 
         getVmResourceList(asyncResp, service, name);
-        });
+    });
 }
 
 inline void
@@ -1245,7 +1245,7 @@ inline void
         BMCWEB_LOG_DEBUG("GetObjectType: {}", service);
 
         getVmData(asyncResp, service, name, resName);
-        });
+    });
 }
 
 void insertMediaCheckMode(
@@ -1285,7 +1285,7 @@ inline void requestNBDVirtualMediaRoutes(App& app)
                const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                const std::string& name, const std::string& resName) {
         findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode);
-        });
+    });
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/<str>/VirtualMedia/<str>/Actions/"
                       "VirtualMedia.InsertMedia")
         .privileges(redfish::privileges::putVirtualMedia)
@@ -1294,7 +1294,7 @@ inline void requestNBDVirtualMediaRoutes(App& app)
                const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                const std::string& name, const std::string& resName) {
         findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode);
-        });
+    });
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/<str>/VirtualMedia/<str>/Actions/"
                       "VirtualMedia.InsertMedia")
         .privileges(redfish::privileges::deleteVirtualMedia)
@@ -1303,7 +1303,7 @@ inline void requestNBDVirtualMediaRoutes(App& app)
                const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
                const std::string& name, const std::string& resName) {
         findItemAndRunHandler(asyncResp, name, resName, insertMediaCheckMode);
-        });
+    });
     BMCWEB_ROUTE(
         app,
         "/redfish/v1/Managers/<str>/VirtualMedia/<str>/Actions/VirtualMedia.InsertMedia")
diff --git a/redfish-core/src/registries.cpp b/redfish-core/src/registries.cpp
index 8cbc3685..353f5487 100644
--- a/redfish-core/src/registries.cpp
+++ b/redfish-core/src/registries.cpp
@@ -18,7 +18,7 @@ const Message* getMessageFromRegistry(const std::string& messageKey,
         std::find_if(registry.begin(), registry.end(),
                      [&messageKey](const MessageEntry& messageEntry) {
         return std::strcmp(messageEntry.first, messageKey.c_str()) == 0;
-        });
+    });
     if (messageIt != registry.end())
     {
         return &messageIt->second;
-- 
2.34.1

