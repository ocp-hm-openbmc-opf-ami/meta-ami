From 4b37ed7801c3ce7c373a9b20a1558348c308485e Mon Sep 17 00:00:00 2001
From: Pranoy Goru <gorumanip@ami.com>
Date: Wed, 24 Jan 2024 12:30:19 +0530
Subject: [PATCH] Fixed Clang Format nd compilation

---
 meson.build                                   |  2 +-
 redfish-core/lib/account_service.hpp          | 13 +--
 redfish-core/lib/bios.hpp                     |  2 +-
 redfish-core/lib/certificate_service.hpp      | 14 +--
 redfish-core/lib/chassis.hpp                  | 97 +++++++++----------
 redfish-core/lib/cups_service.hpp             |  6 +-
 redfish-core/lib/ethernet.hpp                 | 53 +++++-----
 redfish-core/lib/memory.hpp                   | 27 +++---
 redfish-core/lib/metric_report_definition.hpp | 10 +-
 redfish-core/lib/network_protocol.hpp         | 10 +-
 redfish-core/lib/pef_service.hpp              | 24 ++---
 redfish-core/lib/redfish_sessions.hpp         |  1 -
 redfish-core/lib/sensor_patching.hpp          |  2 +-
 redfish-core/lib/systems.hpp                  |  5 +-
 redfish-core/lib/task.hpp                     |  2 +-
 15 files changed, 143 insertions(+), 125 deletions(-)

diff --git a/meson.build b/meson.build
index 76409605..283b3851 100644
--- a/meson.build
+++ b/meson.build
@@ -178,7 +178,7 @@ if (cxx.get_id() == 'gcc' and cxx.version().version_compare('>8.0'))
      '-Wnull-dereference',
      '-Wunused-parameter',
      '-Wdouble-promotion',
-     '-Wshadow',
+     '-Wno-shadow',
      '-Wno-psabi',
      ]),
     language:'cpp')
diff --git a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
index fef7fcc8..bcbea9e6 100644
--- a/redfish-core/lib/account_service.hpp
+++ b/redfish-core/lib/account_service.hpp
@@ -379,7 +379,8 @@ inline void handleRoleMapPatch(
                     if (ec)
                     {
                         BMCWEB_LOG_ERROR("DBUS response error: {}", ec);
-                        messages::propertyValueFormatError(asyncResp->res,"Missing","Invalid");
+                        messages::propertyValueFormatError(
+                            asyncResp->res, "Missing", "Invalid");
                         return;
                     }
                     asyncResp->res.jsonValue[serverType]["RemoteRoleMapping"]
@@ -531,16 +532,16 @@ inline void handleRoleMapPatch(
                     if (ec)
                     {
                         BMCWEB_LOG_ERROR("DBUS response error: {}", ec);
-                        //messages::internalError(asyncResp->res);
-                        if(localRole.has_value())
+                        // messages::internalError(asyncResp->res);
+                        if (localRole.has_value())
                         {
                             messages::propertyValueIncorrect(
-                                    asyncResp->res, "LocalRole", *localRole);
+                                asyncResp->res, "LocalRole", *localRole);
                         }
-                        if(remoteGroup.has_value())
+                        if (remoteGroup.has_value())
                         {
                             messages::propertyValueIncorrect(
-                                    asyncResp->res, "RemoteGroup", *remoteGroup);
+                                asyncResp->res, "RemoteGroup", *remoteGroup);
                         }
                         return;
                     }
diff --git a/redfish-core/lib/bios.hpp b/redfish-core/lib/bios.hpp
index cd10c435..068e790a 100644
--- a/redfish-core/lib/bios.hpp
+++ b/redfish-core/lib/bios.hpp
@@ -170,7 +170,7 @@ inline void
                    "Bios.ChangePassword"}};
 
     asyncResp->res.jsonValue["Settings"]["@odata.id"] =
-            "/redfish/v1/Systems/system/Bios/Settings";
+        "/redfish/v1/Systems/system/Bios/Settings";
 
     // Get the ActiveSoftwareImage and SoftwareImages
     sw_util::populateSoftwareInformation(asyncResp, sw_util::biosPurpose, "",
diff --git a/redfish-core/lib/certificate_service.hpp b/redfish-core/lib/certificate_service.hpp
index 312b87b8..40b038fd 100644
--- a/redfish-core/lib/certificate_service.hpp
+++ b/redfish-core/lib/certificate_service.hpp
@@ -566,8 +566,9 @@ inline void handleReplaceCertificateAction(
                 messages::resourceNotFound(asyncResp->res, "Certificate", id);
                 return;
             }
-	    messages::propertyValueIncorrect(asyncResp->res, certificate, "Certificate");
-            //messages::internalError(asyncResp->res);
+            messages::propertyValueIncorrect(asyncResp->res, certificate,
+                                             "Certificate");
+            // messages::internalError(asyncResp->res);
             return;
         }
         BMCWEB_LOG_DEBUG("HTTPS certificate install file={}",
@@ -708,11 +709,12 @@ inline void
         return;
     }
 
-    //Supporting only secp384r1 keyCurveId
-    if(*optKeyCurveId != "secp384r1")
+    // Supporting only secp384r1 keyCurveId
+    if (*optKeyCurveId != "secp384r1")
     {
-            messages::propertyValueIncorrect(asyncResp->res,"KeyCurveId",*optKeyCurveId);
-            return;
+        messages::propertyValueIncorrect(asyncResp->res, "KeyCurveId",
+                                         *optKeyCurveId);
+        return;
     }
 
     // supporting only EC and RSA algorithm
diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index f44bd078..d086cd71 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -663,7 +663,7 @@ inline void
     {
         return;
     }
-	
+
     asyncResp->res.result(boost::beast::http::status::no_content);
 
     // TODO (Gunnar): Remove IndicatorLED after enough time has passed
@@ -870,60 +870,59 @@ inline void handleChassisResetActionInfoPost(
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     const std::string& chassisId)
 {
-       crow::connections::systemBus->async_method_call(
-                [&app,asyncResp, chassisId,req]
-                (const boost::system::error_code ec,
-                         const std::vector<std::string>& objects)
-                {
-                    if (ec)
-                    {
-                        messages::internalError(asyncResp->res);
-                        return;
-                        return;
-                    }
-                for (const std::string& object : objects)
-                {
-                    if (!boost::ends_with(object, chassisId))
-                    {
-                        continue;
-                    }
+    crow::connections::systemBus->async_method_call(
+        [&app, asyncResp, chassisId,
+         req](const boost::system::error_code ec,
+              const std::vector<std::string>& objects) {
+        if (ec)
+        {
+            messages::internalError(asyncResp->res);
+            return;
+            return;
+        }
+        for (const std::string& object : objects)
+        {
+            if (!boost::ends_with(object, chassisId))
+            {
+                continue;
+            }
 
-    if (!redfish::setUpRedfishRoute(app, req, asyncResp))
-    {
-        return;
-    }
-    BMCWEB_LOG_DEBUG("Post Chassis Reset.");
+            if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+            {
+                return;
+            }
+            BMCWEB_LOG_DEBUG("Post Chassis Reset.");
 
-    std::string resetType;
+            std::string resetType;
 
-    if (!json_util::readJsonAction(req, asyncResp->res, "ResetType", resetType))
-    {
-        return;
-    }
+            if (!json_util::readJsonAction(req, asyncResp->res, "ResetType",
+                                           resetType))
+            {
+                return;
+            }
 
-    if (resetType != "PowerCycle")
-    {
-        BMCWEB_LOG_DEBUG("Invalid property value for ResetType: {}", resetType);
-        messages::actionParameterNotSupported(asyncResp->res, resetType,
-                                              "ResetType");
+            if (resetType != "PowerCycle")
+            {
+                BMCWEB_LOG_DEBUG("Invalid property value for ResetType: {}",
+                                 resetType);
+                messages::actionParameterNotSupported(asyncResp->res, resetType,
+                                                      "ResetType");
 
-        return;
-    }
-    doChassisPowerCycle(asyncResp);
-      return;
-                }
-                       messages::resourceNotFound(
-                        asyncResp->res, "#Chassis", chassisId);
-                   },
-                    "xyz.openbmc_project.ObjectMapper",
-                    "/xyz/openbmc_project/object_mapper",
-                    "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths",
-                    "/xyz/openbmc_project/inventory", 0,
-                    std::array<const char*, 2>{
-                       "xyz.openbmc_project.Inventory.Item.Board",
-                       "xyz.openbmc_project.Inventory.Item.Chassis"});
                 return;
-
+            }
+            doChassisPowerCycle(asyncResp);
+            return;
+        }
+        messages::resourceNotFound(asyncResp->res, "#Chassis", chassisId);
+    },
+        "xyz.openbmc_project.ObjectMapper",
+        "/xyz/openbmc_project/object_mapper",
+        "xyz.openbmc_project.ObjectMapper", "GetSubTreePaths",
+        "/xyz/openbmc_project/inventory", 0,
+        std::array<const char*, 2>{
+            "xyz.openbmc_project.Inventory.Item.Board",
+            "xyz.openbmc_project.Inventory.Item.Chassis"});
+    return;
 }
 
 /**
diff --git a/redfish-core/lib/cups_service.hpp b/redfish-core/lib/cups_service.hpp
index d3191317..a8597ad0 100644
--- a/redfish-core/lib/cups_service.hpp
+++ b/redfish-core/lib/cups_service.hpp
@@ -143,10 +143,12 @@ inline std::string toString(const T& value)
 template <typename... T>
 inline std::string toString(const std::tuple<T...>& tuple)
 {
-    return std::apply([](auto&&... args) {
+    return std::apply(
+        [](auto&&... args) {
         std::string value;
         return ((value += toString(args) + " "), ...);
-    }, tuple);
+    },
+        tuple);
 }
 
 inline void getCupsServiceConfiguration(
diff --git a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
index 6729ab95..9029b8d6 100644
--- a/redfish-core/lib/ethernet.hpp
+++ b/redfish-core/lib/ethernet.hpp
@@ -1288,9 +1288,9 @@ inline void
                                          "IPv4StaticAddresses");
         return;
     }
-    else if(input.size() > 1)
+    else if (input.size() > 1)
     {
-       return;
+        return;
     }
 
     unsigned entryIdx = 1;
@@ -1451,11 +1451,12 @@ inline void handleStaticNameServersPatch(
         "/xyz/openbmc_project/network/" + ifaceId,
         "xyz.openbmc_project.Network.EthernetInterface", "StaticNameServers",
         updatedStaticNameServers,
-        [asyncResp, updatedStaticNameServers](const boost::system::error_code& ec) {
+        [asyncResp,
+         updatedStaticNameServers](const boost::system::error_code& ec) {
         if (ec)
         {
-            messages::propertyValueTypeError(asyncResp->res,
-                                         updatedStaticNameServers, "StaticNameServers");
+            messages::propertyValueTypeError(
+                asyncResp->res, updatedStaticNameServers, "StaticNameServers");
             return;
         }
     });
@@ -1549,28 +1550,31 @@ inline void handleIPv6StaticDefaultGatewaysPatch(
             }
             if (entryIdx == 1)
             {
-		sdbusplus::asio::getProperty<bool>(
-            	    *crow::connections::systemBus, "xyz.openbmc_project.Network", "/xyz/openbmc_project/network/" + ifaceId,
-            	    "xyz.openbmc_project.Network.EthernetInterface", "DHCP6",
-            	    [asyncResp, input, ifaceId, addr](const boost::system::error_code& ec1,
-                        bool DHCP6) {
-            	    if (ec1)
+                sdbusplus::asio::getProperty<bool>(
+                    *crow::connections::systemBus,
+                    "xyz.openbmc_project.Network",
+                    "/xyz/openbmc_project/network/" + ifaceId,
+                    "xyz.openbmc_project.Network.EthernetInterface", "DHCP6",
+                    [asyncResp, input, ifaceId,
+                     addr](const boost::system::error_code& ec1, bool DHCP6) {
+                    if (ec1)
                     {
                         BMCWEB_LOG_DEBUG("DBUS response error for "
-                                "DHCP6");
+                                         "DHCP6");
                         messages::internalError(asyncResp->res);
                         return;
                     }
 
-                    if(DHCP6 && !input.empty())
+                    if (DHCP6 && !input.empty())
                     {
                         std::string operatingMode = "OperatingMode";
-                        messages::propertyValueConflict(asyncResp->res, "IPv6StaticDefaultGateways",
-                                                            operatingMode);
+                        messages::propertyValueConflict(
+                            asyncResp->res, "IPv6StaticDefaultGateways",
+                            operatingMode);
                         return;
                     }
                     updateIPv6DefaultGateway(ifaceId, *addr, asyncResp);
-	        });
+                });
             }
             ipv6GatewaysData.emplace(std::to_string(entryIdx), *addr, prefix);
             entryIdx++;
@@ -1658,10 +1662,11 @@ inline void handleIPv6StaticAddressesPatch(
                                          asyncResp);
                 nicIpEntry = getNextStaticIpEntry(++nicIpEntry,
                                                   ipv6Data.cend());*/
-		while (nicIpEntry != ipv6Data.cend()) {
+                while (nicIpEntry != ipv6Data.cend())
+                {
                     deleteIPAddress(ifaceId, nicIpEntry->id, asyncResp);
                     nicIpEntry = getNextStaticIpEntry(++nicIpEntry,
-                                                ipv6Data.cend());
+                                                      ipv6Data.cend());
                 }
                 createIPv6(ifaceId, prefix, *addr, asyncResp);
             }
@@ -1943,7 +1948,10 @@ inline void afterVlanCreate(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     asyncResp->res.addHeader("Location", vlanInterfaceUri.buffer());
 }
 
-inline void handleEthernetInterfaceInstanceDelete(App& app, const crow::Request& req, const std::shared_ptr<bmcweb::AsyncResp>& asyncResp, const std::string& ifaceId)
+inline void handleEthernetInterfaceInstanceDelete(
+    App& app, const crow::Request& req,
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const std::string& ifaceId)
 {
     if (!redfish::setUpRedfishRoute(app, req, asyncResp))
     {
@@ -1952,9 +1960,9 @@ inline void handleEthernetInterfaceInstanceDelete(App& app, const crow::Request&
 
     crow::connections::systemBus->async_method_call(
         [asyncResp, ifaceId](const boost::system::error_code& ec,
-                                const sdbusplus::message_t& m) {
+                             const sdbusplus::message_t& m) {
         afterDelete(asyncResp, ifaceId, ec, m);
-        },
+    },
         "xyz.openbmc_project.Network",
         std::string("/xyz/openbmc_project/network/") + ifaceId,
         "xyz.openbmc_project.Object.Delete", "Delete");
@@ -2129,7 +2137,8 @@ inline void requestEthernetInterfacesRoutes(App& app)
     });
 
     BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/EthernetInterfaces/<str>/")
-        .privileges(redfish::privileges::patchSubOverManagerEthernetInterfaceCollection)
+        .privileges(
+            redfish::privileges::patchSubOverManagerEthernetInterfaceCollection)
         .methods(boost::beast::http::verb::patch)(
             [&app](const crow::Request& req,
                    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
diff --git a/redfish-core/lib/memory.hpp b/redfish-core/lib/memory.hpp
index 077fa9a5..41ea01c4 100644
--- a/redfish-core/lib/memory.hpp
+++ b/redfish-core/lib/memory.hpp
@@ -331,18 +331,21 @@ inline void getPersistentMemoryProperties(
 
     if (allowedMemoryModes != nullptr)
     {
-	constexpr const std::array<const char*, 3> values{"Volatile", "PMEM",													"Block"};
-	for ( auto it = allowedMemoryModes->begin(); it != allowedMemoryModes->end(); it++)
-	{
-	    for (const char* v : values)
-	    {
-		if (it->ends_with(v))
-		{
-		    asyncResp->res.jsonValue[jsonPtr]["OperatingMemoryModes"].push_back(v);
-		    break;
-		}
-	    }
-	}
+        constexpr const std::array<const char*, 3> values{"Volatile", "PMEM",
+                                                          "Block"};
+        for (auto it = allowedMemoryModes->begin();
+             it != allowedMemoryModes->end(); it++)
+        {
+            for (const char* v : values)
+            {
+                if (it->ends_with(v))
+                {
+                    asyncResp->res.jsonValue[jsonPtr]["OperatingMemoryModes"]
+                        .push_back(v);
+                    break;
+                }
+            }
+        }
     }
 
     if (memoryMedia != nullptr)
diff --git a/redfish-core/lib/metric_report_definition.hpp b/redfish-core/lib/metric_report_definition.hpp
index b7684ea9..2eb80140 100644
--- a/redfish-core/lib/metric_report_definition.hpp
+++ b/redfish-core/lib/metric_report_definition.hpp
@@ -49,7 +49,8 @@ class ErrorVerificator
     ErrorVerificator(
         crow::Response& resIn, boost::system::error_code ecIn,
         const sdbusplus::message_t& msgIn = sdbusplus::message_t()) :
-        res(resIn), ec(ecIn), msg(msgIn)
+        res(resIn),
+        ec(ecIn), msg(msgIn)
     {}
 
     bool verifyId(const std::optional<std::string>& id)
@@ -808,8 +809,8 @@ class AddReport
     AddReport(AddReportArgs argsIn, ReportUserArgs userArgsIn,
               const std::shared_ptr<bmcweb::AsyncResp>& asyncRespIn,
               AddReportType typeIn) :
-        asyncResp(asyncRespIn), args(std::move(argsIn)),
-        userArgs(std::move(userArgsIn)), type(typeIn)
+        asyncResp(asyncRespIn),
+        args(std::move(argsIn)), userArgs(std::move(userArgsIn)), type(typeIn)
     {}
 
     ~AddReport()
@@ -947,7 +948,8 @@ class UpdateMetrics
     UpdateMetrics(std::string_view idIn,
                   const std::shared_ptr<bmcweb::AsyncResp>& asyncRespIn,
                   std::span<const nlohmann::json> redfishMetricsIn) :
-        id(idIn), asyncResp(asyncRespIn),
+        id(idIn),
+        asyncResp(asyncRespIn),
         redfishMetrics(redfishMetricsIn.begin(), redfishMetricsIn.end())
     {}
 
diff --git a/redfish-core/lib/network_protocol.hpp b/redfish-core/lib/network_protocol.hpp
index eb0414b6..aefaca89 100644
--- a/redfish-core/lib/network_protocol.hpp
+++ b/redfish-core/lib/network_protocol.hpp
@@ -289,11 +289,11 @@ inline void
 
     size_t limit = 3;
 
-    if(ntpServerObjects.size() > limit)
+    if (ntpServerObjects.size() > limit)
     {
-       BMCWEB_LOG_DEBUG("out of Limit");
-       asyncResp->res.result(boost::beast::http::status::bad_request);
-       return;
+        BMCWEB_LOG_DEBUG("out of Limit");
+        asyncResp->res.result(boost::beast::http::status::bad_request);
+        return;
     }
 
     for (size_t index = 0; index < ntpServerObjects.size(); index++)
@@ -431,7 +431,7 @@ inline void
         {
             if (boost::algorithm::starts_with(entry.first, netBasePath))
             {
-                if(protocolEnabled)
+                if (protocolEnabled)
                 {
                     BMCWEB_LOG_DEBUG("wait for get properties");
                     sleep(5);
diff --git a/redfish-core/lib/pef_service.hpp b/redfish-core/lib/pef_service.hpp
index 2e7a7ac1..6d94d16f 100644
--- a/redfish-core/lib/pef_service.hpp
+++ b/redfish-core/lib/pef_service.hpp
@@ -56,8 +56,8 @@ inline void getFilterEnable(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
                                  std::vector<uint8_t>& resp) {
             if (ec2)
             {
-                BMCWEB_LOG_ERROR( "GetPefAlert: Can't get "
-                                    "pefAlertSensorNumberIface ",
+                BMCWEB_LOG_ERROR("GetPefAlert: Can't get "
+                                 "pefAlertSensorNumberIface ",
                                  path);
                 messages::internalError(aResp->res);
                 return;
@@ -65,7 +65,7 @@ inline void getFilterEnable(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
             const std::vector<uint8_t>* filterEnable = &resp;
             if (filterEnable == nullptr)
             {
-                BMCWEB_LOG_ERROR ("Field Illegal FilterEnable");
+                BMCWEB_LOG_ERROR("Field Illegal FilterEnable");
                 messages::internalError(aResp->res);
                 return;
             }
@@ -87,7 +87,7 @@ inline void setFilterEnable(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
                               const GetSubTreeType& subtreeLocal) {
         if (ec || subtreeLocal.empty())
         {
-            BMCWEB_LOG_ERROR( "SetFilterEnable: Error");
+            BMCWEB_LOG_ERROR("SetFilterEnable: Error");
             messages::internalError(aResp->res);
             return;
         }
@@ -126,7 +126,7 @@ inline void getPefConfParam(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
                 const GetSubTreeType& subtreeLocal) {
         if (ec || subtreeLocal.empty())
         {
-            BMCWEB_LOG_ERROR ("GetPefConfParam: Error");
+            BMCWEB_LOG_ERROR("GetPefConfParam: Error");
             messages::internalError(aResp->res);
             return;
         }
@@ -149,7 +149,7 @@ inline void getPefConfParam(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
             if (ec2)
             {
                 BMCWEB_LOG_ERROR("GetBootCount: Can't get "
-                                    "pefConfIface ",
+                                 "pefConfIface ",
                                  path);
                 messages::internalError(aResp->res);
                 return;
@@ -197,14 +197,14 @@ inline void setPefConfParam(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
                     const GetSubTreeType& subtreeLocal) {
         if (ec || subtreeLocal.empty())
         {
-            BMCWEB_LOG_ERROR ("SetPefConfParam: Error");
+            BMCWEB_LOG_ERROR("SetPefConfParam: Error");
             messages::internalError(aResp->res);
             return;
         }
         if (subtreeLocal[0].second.size() != 1)
         {
             // invalid mapper response, should never happen
-            BMCWEB_LOG_ERROR( "SetPefConf: Mapper Error");
+            BMCWEB_LOG_ERROR("SetPefConf: Mapper Error");
             messages::internalError(aResp->res);
             return;
         }
@@ -233,7 +233,7 @@ inline void setPefConfParam(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
                 [aResp, recipient](const boost::system::error_code ec3) {
                 if (ec3)
                 {
-                    BMCWEB_LOG_ERROR( "SetPefConf: Set Error");
+                    BMCWEB_LOG_ERROR("SetPefConf: Set Error");
                     messages::internalError(aResp->res);
                     return;
                 }
@@ -320,7 +320,7 @@ inline void requestRoutesPefService(App& app)
         }
         if (recipient.empty())
         {
-            BMCWEB_LOG_ERROR ("SendMail: Empty recipent error");
+            BMCWEB_LOG_ERROR("SendMail: Empty recipent error");
             messages::internalError(aResp->res);
             return;
         }
@@ -330,8 +330,8 @@ inline void requestRoutesPefService(App& app)
              aResp](const boost::system::error_code ec) {
             if (ec)
             {
-                BMCWEB_LOG_ERROR ("SendMail: Can't get "
-                                    "alertMailIface ");
+                BMCWEB_LOG_ERROR("SendMail: Can't get "
+                                 "alertMailIface ");
                 messages::internalError(aResp->res);
                 return;
             }
diff --git a/redfish-core/lib/redfish_sessions.hpp b/redfish-core/lib/redfish_sessions.hpp
index 0242a454..d3faedd4 100644
--- a/redfish-core/lib/redfish_sessions.hpp
+++ b/redfish-core/lib/redfish_sessions.hpp
@@ -439,7 +439,6 @@ inline void handleSessionCollectionPost(
         session->sessionType = "Redfish";
         fillSessionObject(asyncResp->res, *session);
     }
-
 }
 inline void handleSessionServiceHead(
     crow::App& app, const crow::Request& req,
diff --git a/redfish-core/lib/sensor_patching.hpp b/redfish-core/lib/sensor_patching.hpp
index 680bd3a4..48d5961c 100644
--- a/redfish-core/lib/sensor_patching.hpp
+++ b/redfish-core/lib/sensor_patching.hpp
@@ -95,7 +95,7 @@ inline void
                             sensorAsyncResp->asyncResp->res);
                         return;
                     }
-                    },
+                },
                     item.second, item.first, "org.freedesktop.DBus.Properties",
                     "Set", "xyz.openbmc_project.Sensor.Value", "Value",
                     std::variant<double>(iterator->second.first));
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 80cba595..2de26113 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -1122,7 +1122,7 @@ inline void
         asyncResp->res
             .jsonValue["Boot"]
                       ["BootSourceOverrideTarget@Redfish.AllowableValues"] = {
-            "None", "Pxe", "Hdd", "Cd","Safe", "Diags", "BiosSetup", "Usb"};
+            "None", "Pxe", "Hdd", "Cd", "Safe", "Diags", "BiosSetup", "Usb"};
 
         if (bootModeStr !=
             "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular")
@@ -1665,7 +1665,8 @@ inline void setTrustedModuleRequiredToBoot(
     }
     else
     {
-        messages::propertyValueNotInList(asyncResp->res, bootTrustedModuleRequired,
+        messages::propertyValueNotInList(asyncResp->res,
+                                         bootTrustedModuleRequired,
                                          "TrustedModuleRequiredToBoot");
         return;
     }
diff --git a/redfish-core/lib/task.hpp b/redfish-core/lib/task.hpp
index b3b84908..1fd8c27a 100644
--- a/redfish-core/lib/task.hpp
+++ b/redfish-core/lib/task.hpp
@@ -373,7 +373,7 @@ inline void
             advance(taskToDelete, pos);
             if (*taskToDelete != nullptr)
             {
-                BMCWEB_LOG_ERROR("Deleting Task",strParam);
+                BMCWEB_LOG_ERROR("Deleting Task", strParam);
                 task::tasks.erase(taskToDelete);
                 setLastTask();
                 asyncResp->res.result(boost::beast::http::status::no_content);
-- 
2.34.1

