From c3b072d30d4e91ddd169797eb87ededd59979ff1 Mon Sep 17 00:00:00 2001
From: Arun Thomas Baby <arunthomasb@ami.com>
Date: Thu, 21 Dec 2023 00:59:04 -0500
Subject: [PATCH 168/168] Fix the datatype Error in Memory Instance

For some properties under getPersistentMemoryProperties,
wrong datatype were used when compared with the dbus property
type. Also some attribute names has Typo.

TESTED:Got response for Memory instance after adding all dbus
objecrs with any errors.

Signed-off-by: Arun Thomas Baby <arunthomasb@ami.com>
---
 redfish-core/lib/memory.hpp | 40 ++++++++++++++++++-------------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/redfish-core/lib/memory.hpp b/redfish-core/lib/memory.hpp
index a45a0a71..3fb6ac92 100644
--- a/redfish-core/lib/memory.hpp
+++ b/redfish-core/lib/memory.hpp
@@ -181,20 +181,20 @@ inline void getPersistentMemoryProperties(
     const uint64_t* pmRegionMaxSizeInKiB = nullptr;
     const uint64_t* allocationIncrementInKiB = nullptr;
     const uint64_t* allocationAlignmentInKiB = nullptr;
-    const uint64_t* volatileRegionNumberLimit = nullptr;
-    const uint64_t* pmRegionNumberLimit = nullptr;
-    const uint64_t* spareDeviceCount = nullptr;
+    const uint32_t* volatileRegionNumberLimit = nullptr;
+    const uint32_t* pmRegionNumberLimit = nullptr;
+    const uint32_t* spareDeviceCount = nullptr;
     const bool* isSpareDeviceInUse = nullptr;
     const bool* isRankSpareEnabled = nullptr;
     const std::vector<uint32_t>* maxAveragePowerLimitmW = nullptr;
     const bool* configurationLocked = nullptr;
-    const std::string* allowedMemoryModes = nullptr;
+    const std::vector<std::string>* allowedMemoryModes = nullptr;
     const std::string* memoryMedia = nullptr;
     const bool* configurationLockCapable = nullptr;
     const bool* dataLockCapable = nullptr;
     const bool* passphraseCapable = nullptr;
-    const uint64_t* maxPassphraseCount = nullptr;
-    const uint64_t* passphraseLockLimit = nullptr;
+    const uint32_t* maxPassphraseCount = nullptr;
+    const uint32_t* passphraseLockLimit = nullptr;
 
     const bool success = sdbusplus::unpackPropertiesNoThrow(
         dbus_utils::UnpackErrorPrinter(), properties, "ModuleManufacturerID",
@@ -203,8 +203,8 @@ inline void getPersistentMemoryProperties(
         subsystemDeviceID, "VolatileRegionSizeLimitInKiB",
         volatileRegionSizeLimitInKiB, "PmRegionSizeLimitInKiB",
         pmRegionSizeLimitInKiB, "VolatileSizeInKiB", volatileSizeInKiB,
-        "PmSizeInKiB", pmSizeInKiB, "CacheSizeInKB", cacheSizeInKB,
-        "VoltaileRegionMaxSizeInKib", voltaileRegionMaxSizeInKib,
+        "PmSizeInKiB", pmSizeInKiB, "CacheSizeInKiB", cacheSizeInKB,
+        "VolatileRegionMaxSizeInKiB", voltaileRegionMaxSizeInKib,
         "PmRegionMaxSizeInKiB", pmRegionMaxSizeInKiB,
         "AllocationIncrementInKiB", allocationIncrementInKiB,
         "AllocationAlignmentInKiB", allocationAlignmentInKiB,
@@ -331,18 +331,18 @@ inline void getPersistentMemoryProperties(
 
     if (allowedMemoryModes != nullptr)
     {
-        constexpr const std::array<const char*, 3> values{"Volatile", "PMEM",
-                                                          "Block"};
-
-        for (const char* v : values)
-        {
-            if (allowedMemoryModes->ends_with(v))
-            {
-                asyncResp->res.jsonValue[jsonPtr]["OperatingMemoryModes"]
-                    .push_back(v);
-                break;
-            }
-        }
+	constexpr const std::array<const char*, 3> values{"Volatile", "PMEM",													"Block"};
+	for ( auto it = allowedMemoryModes->begin(); it != allowedMemoryModes->end(); it++)
+	{
+	    for (const char* v : values)
+	    {
+		if (it->ends_with(v))
+		{
+		    asyncResp->res.jsonValue[jsonPtr]["OperatingMemoryModes"].push_back(v);
+		    break;
+		}
+	    }
+	}
     }
 
     if (memoryMedia != nullptr)
-- 
2.34.1

