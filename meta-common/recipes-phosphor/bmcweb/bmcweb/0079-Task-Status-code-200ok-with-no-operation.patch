From d17dac71a44dec12031411b4d9b00a6dcb9ea819 Mon Sep 17 00:00:00 2001
From: ramadevip <ramadevip@ami.com>
Date: Tue, 4 Jul 2023 20:16:10 +0530
Subject: [PATCH] Task Status code 200ok with no operation

Signed-off-by: ramadevip <ramadevip@ami.com>
---
 redfish-core/lib/chassis.hpp | 21 +++++++++++++++++++--
 redfish-core/lib/systems.hpp | 12 ++++++------
 2 files changed, 25 insertions(+), 8 deletions(-)

diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 7fef289e..2e8b7017 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -641,7 +641,7 @@ inline void
      setPowerTransitionTimer(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
               const uint16_t chassisHostTransitionTimeOut)
 {
-        BMCWEB_LOG_DEBUG << " ############ setPowerTransitionTimer";
+        BMCWEB_LOG_DEBUG << " setPowerTransitionTimer";
     const char* busName = "xyz.openbmc_project.ObjectMapper";
     const char* path = "/xyz/openbmc_project/object_mapper";
     const char* interface = "xyz.openbmc_project.ObjectMapper";
@@ -752,6 +752,23 @@ inline void
         busName, path, interface, method, "/", 0, interfaces);
 }
 
+/*
+ * Function to get the status code ad 200 Ok with message response as NoOperation
+ *
+ * @param[in] asyncResp - Shared pointer for completing asynchronous call
+ */
+inline void NoOperation(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
+{
+ asyncResp->res.result(boost::beast::http::status::ok);
+ asyncResp->res.jsonValue["@odata.type"] = " #Message.v1_1_1.Message";
+ asyncResp->res.jsonValue["MessageId"] = "Base.1.13.0.NoOperation";
+ asyncResp->res.jsonValue["Message"] = "The request body submitted contain no data to act upon "
+                                       "and no changes to the resource took place.";
+ asyncResp->res.jsonValue["MessageArgs"] = "[]";
+ asyncResp->res.jsonValue["MessageSeverity"] = "Warning";
+ asyncResp->res.jsonValue["Resolution"] = "Add properties in the JSON object and resubmit the request.";
+}
+
 const PropertyValue getOperatingSystemState(
                             const std::string& processName,
                             const std::string& objectPath,
@@ -1031,7 +1048,7 @@ inline void handleChassisResetActionInfoPost(
 
                             if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
                             {
-                                    messages::noOperation(asyncResp->res);
+				    NoOperation(asyncResp);
                                     return;
                             }
 
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 70b17207..30182b4f 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -3360,7 +3360,7 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
                 if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive")
                 {
                         BMCWEB_LOG_DEBUG << " Host is in Standby state";
-                        messages::noOperation(asyncResp->res);
+			NoOperation(asyncResp);
                         flag = false;
                 }
                 else
@@ -3375,7 +3375,7 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
                 if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
                 {
                         BMCWEB_LOG_DEBUG << " Host is in Inactive state";
-                        messages::noOperation(asyncResp->res);
+			NoOperation(asyncResp);
                         flag = false;
                 }
                 else
@@ -3389,7 +3389,7 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
         {
                  if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
                  {
-                         messages::noOperation(asyncResp->res);
+			 NoOperation(asyncResp);
                          flag = false;
                  }
                  else
@@ -3404,7 +3404,7 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
                 if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
                 {
                         BMCWEB_LOG_DEBUG << " Host is in Inactive state";
-                        messages::noOperation(asyncResp->res);
+			NoOperation(asyncResp);
                         flag = false;
                 }
                 else
@@ -3418,7 +3418,7 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
         {
                 if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
                 {
-                        messages::noOperation(asyncResp->res);
+			NoOperation(asyncResp);
                         flag = false;
                 }
                 else
@@ -3432,7 +3432,7 @@ inline void systemResetAction(const std::shared_ptr<bmcweb::AsyncResp>& asyncRes
         {
                 if (requestedOperatingSystemState != "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Standby")
                 {
-                        messages::noOperation(asyncResp->res);
+			NoOperation(asyncResp);
                         flag = false;
                 }
                 else
-- 
2.25.1

