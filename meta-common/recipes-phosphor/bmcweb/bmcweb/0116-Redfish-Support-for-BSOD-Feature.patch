From fb58f4812f102caebbb138a2cc95ecaef8e5e1ed Mon Sep 17 00:00:00 2001
From: prasannas <prasannas@ami.com>
Date: Thu, 14 Sep 2023 09:34:37 +0530
Subject: [PATCH 2432/2432] Redfish Support for BSOD Feature

---
 redfish-core/include/redfish.hpp |  4 +++-
 redfish-core/lib/bsodjpeg.hpp    | 47 ++++++++++++++++++++++++++++++++++++++++
 redfish-core/lib/managers.hpp    |  1 +
 3 files changed, 51 insertions(+), 1 deletion(-)
 create mode 100644 redfish-core/lib/bsodjpeg.hpp

diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index 2f07c2a..094134e 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -57,6 +57,7 @@
 #include "trigger.hpp"
 #include "update_service.hpp"
 #include "virtual_media.hpp"
+#include "bsodjpeg.hpp"
 
 namespace redfish
 {
@@ -105,7 +106,8 @@ class RedfishService
         requestRoutesManagerResetToDefaultsAction(app);
         requestRoutesManagerDiagnosticData(app);
         requestRoutesChassisCollection(app);
-        requestRoutesChassis(app);
+        requestRoutesBsodjpeg(app);
+	requestRoutesChassis(app);
         requestRoutesChassisResetAction(app);
         requestRoutesChassisResetActionInfo(app);
         requestRoutesChassisDrive(app);
diff --git a/redfish-core/lib/bsodjpeg.hpp b/redfish-core/lib/bsodjpeg.hpp
new file mode 100644
index 0000000..3e5b622
--- /dev/null
+++ b/redfish-core/lib/bsodjpeg.hpp
@@ -0,0 +1,47 @@
+#include <fstream>
+#include <iterator>
+#include <vector>
+#include "log_services.hpp"
+
+namespace redfish
+{
+inline void getBsodjpeg(std::shared_ptr<bmcweb::AsyncResp> asyncResp)
+{
+    std::string inputImagePath = "/tmp/screenShotBSOD.jpeg";
+    std::ifstream imageFile(inputImagePath, std::ios::binary);
+
+    if (!imageFile)
+    {
+        BMCWEB_LOG_DEBUG<< "Failed to open image file.";
+	asyncResp->res.jsonValue["Image"]="Image File is  not Created";
+	return;
+    }
+
+    imageFile.seekg(0, std::ios::end);
+    std::streampos fileSize = imageFile.tellg();
+    imageFile.seekg(0, std::ios::beg);
+   
+    std::vector<unsigned char> imageData(static_cast<size_t>(fileSize));
+    imageFile.read(reinterpret_cast<char*>(imageData.data()),static_cast<int>(fileSize));
+    imageFile.close();
+   
+    std::string_view strdata(reinterpret_cast<char*>(imageData.data()),imageData.size());
+    std::string output = crow::utility::base64encode(strdata);
+    asyncResp->res.jsonValue["Image"]=output;  
+}
+
+
+inline void requestRoutesBsodjpeg(App& app)
+{
+    BMCWEB_ROUTE(app, "/redfish/v1/Managers/bmc/Oem/OpenBmc/Jpeg")
+        .privileges({{"Login"}, {"ConfigureComponents"}})
+        .methods(boost::beast::http::verb::get)([&app](const crow::Request& req,
+                   const std::shared_ptr<bmcweb::AsyncResp>& asyncResp){
+                if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+        {
+            return;
+        }
+		getBsodjpeg(asyncResp);
+            });
+}
+}
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index 340da8b..ba662a3 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -2249,6 +2249,7 @@ inline void requestRoutesManager(App& app)
         oem["@odata.id"] = "/redfish/v1/Managers/bmc#/Oem";
         oemOpenbmc["@odata.type"] = "#OemManager.OpenBmc";
         oemOpenbmc["@odata.id"] = "/redfish/v1/Managers/bmc#/Oem/OpenBmc";
+        oemOpenbmc["@odata.id"]="/redfish/v1/Managers/bmc/Oem/OpenBmc/Jpeg";
 
         nlohmann::json::object_t certificates;
         certificates["@odata.id"] =
-- 
2.9.5

