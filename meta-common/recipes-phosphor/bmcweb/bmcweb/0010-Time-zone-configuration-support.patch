From e2a039a972e492d34c8fcef0dc11c57e73ba47c3 Mon Sep 17 00:00:00 2001
From: Nibin Chacko <nibinc@ami.com>
Date: Wed, 24 Jan 2024 11:46:35 -0500
Subject: [PATCH 10/10] Time zone configuration support

---
 http/utility.hpp              | 146 ++++++++++++++++++++++++++++++++++
 redfish-core/lib/managers.hpp | 110 +++++++++++++++----------
 2 files changed, 216 insertions(+), 40 deletions(-)

diff --git a/http/utility.hpp b/http/utility.hpp
index dc7ea7f1..f9cb3535 100644
--- a/http/utility.hpp
+++ b/http/utility.hpp
@@ -2,9 +2,12 @@
 
 #include "bmcweb_config.h"
 
+#include "nlohmann/json.hpp"
+
 #include <openssl/crypto.h>
 
 #include <boost/callable_traits.hpp>
+#include <boost/date_time/posix_time/posix_time.hpp>
 #include <boost/url/parse.hpp>
 #include <boost/url/url.hpp>
 #include <boost/url/url_view.hpp>
@@ -14,10 +17,13 @@
 #include <chrono>
 #include <cstddef>
 #include <cstdint>
+#include <cstring>
 #include <ctime>
+#include <fstream>
 #include <functional>
 #include <iomanip>
 #include <limits>
+#include <regex>
 #include <stdexcept>
 #include <string>
 #include <string_view>
@@ -277,6 +283,136 @@ inline bool base64Decode(std::string_view input, std::string& output)
     return true;
 }
 
+inline float tzFormatConvert(std::string timeZone)
+{
+    try
+    {
+        auto i = timeZone.find(':');
+        timeZone = timeZone.replace(i, 1, ".");
+        std::string minute = timeZone.substr(i + 1);
+        float fValue = std::stof(minute.c_str());
+        fValue /= 60;
+        minute = std::to_string(fValue);
+        auto j = minute.find('.');
+        minute = minute.substr(j + 1);
+        timeZone = timeZone.replace(i + 1, 2, minute);
+
+        float res = std::stof(timeZone.c_str());
+        return res;
+    }
+    catch (std::exception& ex)
+    {
+        BMCWEB_LOG_ERROR("Invalid parameter type {}", ex.what());
+        return 0;
+    }
+}
+
+static std::string localTimeZone = "/etc/timezone";
+
+namespace details
+{
+// constexpr uint64_t maxMilliSeconds = 253402300799999;
+// constexpr uint64_t maxSeconds = 253402300799;
+inline std::string getDateTime(boost::posix_time::milliseconds timeSinceEpoch)
+{
+    boost::posix_time::ptime epoch(boost::gregorian::date(1970, 1, 1));
+    boost::posix_time::ptime time = epoch + timeSinceEpoch;
+    // append zero offset to the end according to the Redfish spec for Date-Time
+    return boost::posix_time::to_iso_extended_string(time) + "+00:00";
+}
+} // namespace details
+
+inline std::string getTimeZone(std::string filePath)
+{
+    std::fstream in(filePath, std::ios::in);
+    if (!in.is_open())
+    {
+        return "+00:00";
+    }
+    std::string temp = "";
+    in >> temp;
+    in.close();
+    return temp;
+}
+
+inline void saveTimeZone(std::string filePath, std::string timeZone)
+{
+    std::fstream out(filePath, std::ios::out);
+    if (!out.is_open())
+        return;
+    out << timeZone;
+    out.close();
+    return;
+}
+
+inline std::string getDateTime(const std::time_t& time)
+{
+    std::array<char, 128> dateTime;
+    std::string redfishDateTime("0000-00-00T00:00:00Z00:00");
+
+    std::string timeZone = getTimeZone(crow::utility::localTimeZone);
+    auto value = tzFormatConvert(timeZone);
+    int seconds = static_cast<int>(value * 3600);
+    std::chrono::time_point<std::chrono::system_clock> now =
+        std::chrono::system_clock::from_time_t(time);
+    std::time_t now_offset = std::chrono::system_clock::to_time_t(
+        now + std::chrono::seconds(seconds));
+
+    if (std::strftime(dateTime.begin(), dateTime.size(), "%FT%T%z",
+                      std::localtime(&now_offset)))
+    {
+        // insert the colon required by the ISO 8601 standard
+        redfishDateTime = std::string(dateTime.data());
+        redfishDateTime.replace(redfishDateTime.begin() + 19,
+                                redfishDateTime.end(), timeZone);
+    }
+
+    return redfishDateTime;
+}
+
+inline std::string getDateTimeUint(uint64_t secondsSinceEpoch)
+{
+    // secondsSinceEpoch = std::min(secondsSinceEpoch, details::maxSeconds);
+    boost::posix_time::seconds boostSeconds(secondsSinceEpoch);
+    return details::getDateTime(
+        boost::posix_time::milliseconds(boostSeconds.total_milliseconds()));
+}
+
+inline std::string getDateTimeUintMs(uint64_t milliSecondsSinceEpoch)
+{
+    // milliSecondsSinceEpoch =
+    //    std::min(details::maxMilliSeconds, milliSecondsSinceEpoch);
+    return details::getDateTime(
+        boost::posix_time::milliseconds(milliSecondsSinceEpoch));
+}
+
+inline std::string getDateTimeStdtime(std::time_t secondsSinceEpoch)
+{
+    boost::posix_time::ptime time =
+        boost::posix_time::from_time_t(secondsSinceEpoch);
+    return boost::posix_time::to_iso_extended_string(time) + "+00:00";
+}
+
+inline std::pair<std::string, std::string> getDateTimeOffsetNow()
+{
+    std::time_t time = std::time(nullptr);
+    // std::string dateTime = getDateTimeStdtime(time);
+    std::string dateTime = getDateTime(time);
+
+    /* extract the local Time Offset value from the
+     * recevied dateTime string.
+     */
+    std::string timeOffset("Z00:00");
+    std::size_t lastPos = dateTime.size();
+    std::size_t len = timeOffset.size();
+    if (lastPos > len)
+    {
+        timeOffset = dateTime.substr(lastPos - len);
+    }
+
+    return std::make_pair(dateTime, timeOffset);
+}
+
 inline bool constantTimeStringCompare(std::string_view a, std::string_view b)
 {
     // Important note, this function is ONLY constant time if the two input
@@ -296,6 +432,16 @@ struct ConstantTimeCompare
     }
 };
 
+inline std::time_t getTimestamp(uint64_t millisTimeStamp)
+{
+    // Retrieve Created property with format:
+    // yyyy-mm-ddThh:mm:ss
+    std::chrono::milliseconds chronoTimeStamp(millisTimeStamp);
+    return std::chrono::duration_cast<std::chrono::duration<int>>(
+               chronoTimeStamp)
+        .count();
+}
+
 namespace details
 {
 inline boost::urls::url
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index 8ea35908..e96b9467 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -249,7 +249,7 @@ inline void requestRoutesManagerResetToDefaultsAction(App& app)
             // Factory Reset doesn't actually happen until a reboot
             // Can't erase what the BMC is running on
             doBMCGracefulRestart(asyncResp);
-	    messages::success(asyncResp->res);
+            messages::success(asyncResp->res);
         },
             "xyz.openbmc_project.Software.BMC.Updater",
             "/xyz/openbmc_project/software",
@@ -1878,6 +1878,22 @@ inline void
     });
 }
 
+inline void setTimeZone(std::shared_ptr<bmcweb::AsyncResp> aResp,
+                        std::string timeZone)
+{
+    std::regex tz_regex("[-+][0-1][0-9]:[0-5][0-9]");
+    auto reg = std::regex_match(timeZone, tz_regex);
+    if (reg)
+    {
+        crow::utility::saveTimeZone(crow::utility::localTimeZone, timeZone);
+    }
+    else
+    {
+        messages::propertyValueFormatError(aResp->res, timeZone,
+                                           "DateTimeLocalOffset");
+    }
+}
+
 inline void setDateTime(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
                         std::string datetime)
 {
@@ -1902,7 +1918,10 @@ inline void setDateTime(std::shared_ptr<bmcweb::AsyncResp> asyncResp,
             BMCWEB_LOG_DEBUG("Failed to set elapsed time. "
                              "DBUS response error {}",
                              ec);
-            messages::internalError(asyncResp->res);
+            messages::propertyValueResourceConflict(
+                asyncResp->res, "DateTime", datetime,
+                boost::urls::url_view(
+                    "/redfish/v1/Managers/bmc/NetworkProtocol"));
             return;
         }
         asyncResp->res.jsonValue["DateTime"] = datetime;
@@ -2012,7 +2031,7 @@ inline void requestRoutesManager(App& app)
             "ResetAll", "ResetToDefaultButKeepReservedSettings"};
 
         std::pair<std::string, std::string> redfishDateTimeOffset =
-            redfish::time_utils::getDateTimeOffsetNow();
+            crow::utility::getDateTimeOffsetNow();
 
         asyncResp->res.jsonValue["DateTime"] = redfishDateTimeOffset.first;
         asyncResp->res.jsonValue["DateTimeLocalOffset"] =
@@ -2057,17 +2076,17 @@ inline void requestRoutesManager(App& app)
                                              "FirmwareVersion", true);
 
         managerGetLastResetTime(asyncResp);
-	getSystemLocationIndicatorActive(asyncResp);
+        getSystemLocationIndicatorActive(asyncResp);
         // ManagerDiagnosticData is added for all BMCs.
         nlohmann::json& managerDiagnosticData =
             asyncResp->res.jsonValue["ManagerDiagnosticData"];
         managerDiagnosticData["@odata.id"] =
             "/redfish/v1/Managers/bmc/ManagerDiagnosticData";
 
-//#ifdef BMCWEB_ENABLE_REDFISH_OEM_MANAGER_FAN_DATA
-//        auto pids = std::make_shared<GetPIDValues>(asyncResp);
-//        pids->run();
-//#endif
+        // #ifdef BMCWEB_ENABLE_REDFISH_OEM_MANAGER_FAN_DATA
+        //         auto pids = std::make_shared<GetPIDValues>(asyncResp);
+        //         pids->run();
+        // #endif
 
         getMainChassisId(asyncResp,
                          [](const std::string& chassisId,
@@ -2231,41 +2250,47 @@ inline void requestRoutesManager(App& app)
         std::optional<nlohmann::json> oem;
         std::optional<nlohmann::json> links;
         std::optional<std::string> datetime;
-	std::optional<bool> locationIndicatorActive;
+        std::optional<bool> locationIndicatorActive;
+        std::optional<std::string> timeZone;
 
-        if (!json_util::readJsonPatch(req, asyncResp->res, "Oem", oem,
-                                      "DateTime", datetime, "Links", links, "LocationIndicatorActive", locationIndicatorActive))
+        if (!json_util::readJsonPatch(
+                req, asyncResp->res, "Oem", oem, "DateTime", datetime, "Links",
+                links, "LocationIndicatorActive", locationIndicatorActive,
+                "DateTimeLocalOffset", timeZone))
         {
             return;
         }
         asyncResp->res.result(boost::beast::http::status::no_content);
         if (oem)
         {
-//#ifdef BMCWEB_ENABLE_REDFISH_OEM_MANAGER_FAN_DATA
-//            std::optional<nlohmann::json> openbmc;
-//            if (!redfish::json_util::readJson(*oem, asyncResp->res, "OpenBmc",
-//                                              openbmc))
-//            {
-//                return;
-//            }
-//            if (openbmc)
-//            {
-//                std::optional<nlohmann::json> fan;
-//                if (!redfish::json_util::readJson(*openbmc, asyncResp->res,
-//                                                  "Fan", fan))
-//                {
-//                    return;
-//                }
-//                if (fan)
-//                {
-//                    auto pid = std::make_shared<SetPIDValues>(asyncResp, *fan);
-//                    pid->run();
-//                }
-//            }
-//#else
-//            messages::propertyUnknown(asyncResp->res, "Oem");
-//            return;
-//#endif
+            // #ifdef BMCWEB_ENABLE_REDFISH_OEM_MANAGER_FAN_DATA
+            //             std::optional<nlohmann::json> openbmc;
+            //             if (!redfish::json_util::readJson(*oem,
+            //             asyncResp->res, "OpenBmc",
+            //                                               openbmc))
+            //             {
+            //                 return;
+            //             }
+            //             if (openbmc)
+            //             {
+            //                 std::optional<nlohmann::json> fan;
+            //                 if (!redfish::json_util::readJson(*openbmc,
+            //                 asyncResp->res,
+            //                                                   "Fan", fan))
+            //                 {
+            //                     return;
+            //                 }
+            //                 if (fan)
+            //                 {
+            //                     auto pid =
+            //                     std::make_shared<SetPIDValues>(asyncResp,
+            //                     *fan); pid->run();
+            //                 }
+            //             }
+            // #else
+            //             messages::propertyUnknown(asyncResp->res, "Oem");
+            //             return;
+            // #endif
         }
         if (links)
         {
@@ -2295,10 +2320,15 @@ inline void requestRoutesManager(App& app)
         {
             setDateTime(asyncResp, std::move(*datetime));
         }
-	if (locationIndicatorActive)
- 	{
-     	    setSystemLocationIndicatorActive(asyncResp, *locationIndicatorActive);
- 	}
+        if (locationIndicatorActive)
+        {
+            setSystemLocationIndicatorActive(asyncResp,
+                                             *locationIndicatorActive);
+        }
+        if (timeZone)
+        {
+            setTimeZone(asyncResp, std::move(*timeZone));
+        }
     });
 }
 
-- 
2.34.1

