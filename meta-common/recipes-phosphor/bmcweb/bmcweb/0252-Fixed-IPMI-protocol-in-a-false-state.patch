From d5962af5178bc2fa9ff9d913426279ed3f9709ba Mon Sep 17 00:00:00 2001
From: Gokulprasath <gokulp@ami.com>
Date: Thu, 25 Apr 2024 17:23:37 +0530
Subject: [PATCH 252/252] Fixed IPMI protocol in a false state

---
 redfish-core/lib/network_protocol.hpp | 83 +++++++++++++++++++++++++--
 1 file changed, 77 insertions(+), 6 deletions(-)

diff --git a/redfish-core/lib/network_protocol.hpp b/redfish-core/lib/network_protocol.hpp
index 92309555..7605c77c 100644
--- a/redfish-core/lib/network_protocol.hpp
+++ b/redfish-core/lib/network_protocol.hpp
@@ -40,6 +40,13 @@ namespace redfish
 void getNTPProtocolEnabled(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp);
 std::string getHostName();
 
+static constexpr const char* serviceManagerService =
+    "xyz.openbmc_project.Control.Service.Manager";
+static constexpr const char* serviceManagerPath =
+    "/xyz/openbmc_project/control/service/";
+static constexpr const char* portConfigInterface =
+    "xyz.openbmc_project.Control.Service.SocketAttributes";
+
 static constexpr const char* sshServiceName = "dropbear";
 static constexpr const char* httpsServiceName = "bmcweb";
 static constexpr const char* ipmbServiceName = "ipmb";
@@ -264,10 +271,16 @@ inline void getNetworkData(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         const std::string& protocolName = protocol.first;
         const std::string& serviceName = protocol.second;
 
-        service_util::getEnabled(
-            asyncResp, serviceName,
-            nlohmann::json::json_pointer(std::string("/") + protocolName +
-                                         "/ProtocolEnabled"));
+        std::cerr << "protocolName " << protocolName << "\n";
+        std::cerr << "serviceName " << serviceName << "\n";
+
+        if (ipmiServiceName != serviceName)
+        {
+            service_util::getEnabled(
+                asyncResp, serviceName,
+                nlohmann::json::json_pointer(std::string("/") + protocolName +
+                                             "/ProtocolEnabled"));
+        }
         service_util::getPortNumber(
             asyncResp, serviceName,
             nlohmann::json::json_pointer(std::string("/") + protocolName +
@@ -457,6 +470,38 @@ inline void
     });
 }
 
+void setEnabled(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                const bool enabled)
+{
+    sdbusplus::asio::setProperty(
+        *crow::connections::systemBus,
+        "xyz.openbmc_project.Control.Service.Manager",
+        "/xyz/openbmc_project/control/service/phosphor_2dipmi_2dnet_40eth0",
+        "xyz.openbmc_project.Control.Service.Attributes", "Running", enabled,
+        [asyncResp](const boost::system::error_code& ec) {
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
+            messages::internalError(asyncResp->res);
+            return;
+        }
+    });
+
+    sdbusplus::asio::setProperty(
+        *crow::connections::systemBus,
+        "xyz.openbmc_project.Control.Service.Manager",
+        "/xyz/openbmc_project/control/service/phosphor_2dipmi_2dnet_40eth0",
+        "xyz.openbmc_project.Control.Service.Attributes", "Enabled", enabled,
+        [asyncResp](const boost::system::error_code& ec) {
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("D-Bus responses error: {}", ec);
+            messages::internalError(asyncResp->res);
+            return;
+        }
+    });
+}
+
 inline void
     handleProtocolEnabled(const bool protocolEnabled,
                           const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -671,9 +716,10 @@ inline void handleManagersNetworkProtocolPatch(
         }
         if (ipmiEnabled)
         {
-            handleProtocolEnabled(
+            /* handleProtocolEnabled(
                 *ipmiEnabled, asyncResp,
-                encodeServiceObjectPath(std::string(ipmiServiceName)));
+                encodeServiceObjectPath(std::string(ipmiServiceName))); */
+            setEnabled(asyncResp, *ipmiEnabled);
         }
         if (ipmiMasked)
         {
@@ -806,10 +852,34 @@ inline void handleManagersNetworkProtocolHead(
         "</redfish/v1/JsonSchemas/ManagerNetworkProtocol/ManagerNetworkProtocol.json>; rel=describedby");
 }
 
+void getEnabled(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                const std::string& serviceName, const std::string& ObjectName,
+                const std::string& propertyName)
+{
+    sdbusplus::asio::getProperty<bool>(
+        *crow::connections::systemBus, serviceManagerService,
+        serviceManagerPath + serviceName,
+        "xyz.openbmc_project.Control.Service.Attributes", "Enabled",
+        [asyncResp, ObjectName,
+         propertyName](const boost::system::error_code& ec, bool eventValue) {
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR("D-BUS response error on EventSeverity Get{}", ec);
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        asyncResp->res.jsonValue[ObjectName][propertyName] = eventValue;
+    });
+}
+
 inline void getIpmiMasked(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 {
     service_util::getMasked(asyncResp, ipmiServiceName, "IPMI", "Masked");
 }
+inline void getIpmiEnabled(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
+{
+    getEnabled(asyncResp, ipmiServiceName, "IPMI", "ProtocolEnabled");
+}
 
 inline void getSSHMasked(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 {
@@ -834,6 +904,7 @@ inline void handleManagersNetworkProtocolGet(
     getSSHMasked(asyncResp);
     getBMCWEBMasked(asyncResp);
     getIpmbMasked(asyncResp);
+    getIpmiEnabled(asyncResp);
 }
 
 inline void requestRoutesNetworkProtocol(App& app)
-- 
2.34.1

