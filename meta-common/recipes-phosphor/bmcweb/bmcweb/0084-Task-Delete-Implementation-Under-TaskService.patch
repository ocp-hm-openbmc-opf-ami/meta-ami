From 5348bfd4fdf40e61cd053fe91ae42139b4e1633b Mon Sep 17 00:00:00 2001
From: vamsikrishnak <vamsikrishnak@ami.com>
Date: Sat, 14 Oct 2023 22:37:15 +0530
Subject: [PATCH] Task Delete Implementation Under TaskService

Description:

Added Delete task method under TaskService to delete created tasks.

Signed-off-by: vamsikrishnak <vamsikrishnak@ami.com>
---
 redfish-core/include/redfish.hpp |  1 +
 redfish-core/lib/task.hpp        | 70 +++++++++++++++++++++++++++++++++++++++-
 2 files changed, 70 insertions(+), 1 deletion(-)

diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index 444cf78..ca80d89 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -251,6 +251,7 @@ class RedfishService
         requestRoutesCupsService(app);
         requestRoutesCupsSensors(app);
 
+        requestRoutesTaskDelete(app);
         requestRoutesTaskMonitor(app);
         requestRoutesTaskService(app);
         requestRoutesTaskCollection(app);
diff --git a/redfish-core/lib/task.hpp b/redfish-core/lib/task.hpp
index 824d82b..6e5abab 100644
--- a/redfish-core/lib/task.hpp
+++ b/redfish-core/lib/task.hpp
@@ -44,6 +44,7 @@ constexpr size_t maxTaskCount = 100; // arbitrary limit
 // NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables)
 static std::deque<std::shared_ptr<struct TaskData>> tasks;
 
+static size_t lastTask = 1;
 constexpr bool completed = true;
 
 struct Payload
@@ -113,7 +114,8 @@ struct TaskData : std::enable_shared_from_this<TaskData>
                            const std::shared_ptr<TaskData>&)>&& handler,
         const std::string& match)
     {
-        static size_t lastTask = 0;
+        if (tasks.size() == 0)
+            lastTask = 1;
         struct MakeSharedHelper : public TaskData
         {
             MakeSharedHelper(
@@ -324,6 +326,64 @@ struct TaskData : std::enable_shared_from_this<TaskData>
 
 } // namespace task
 
+inline void setLastTask()
+{
+    for (const std::shared_ptr<task::TaskData>& task : task::tasks)
+    {
+        // Setting lastTask index after deleting task
+        task::lastTask = task->index + 1;
+    }
+    return;
+}
+
+inline void
+    handleTaskDelete(App& app, const crow::Request& req,
+                     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                     const std::string& strParam)
+{
+    if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+    {
+        return;
+    }
+    int pos = 0;
+    auto find =
+        std::find_if(task::tasks.begin(), task::tasks.end(),
+                     [&strParam](const std::shared_ptr<task::TaskData>& task) {
+        if (!task)
+        {
+            return false;
+        }
+
+        // we compare against the string version as on failure
+        // strtoul returns 0
+        return std::to_string(task->index) == strParam;
+    });
+
+    if (find == task::tasks.end())
+    {
+        messages::resourceNotFound(asyncResp->res, "Task", strParam);
+        return;
+    }
+
+    for (const std::shared_ptr<task::TaskData>& task : task::tasks)
+    {
+        if (std::to_string(task->index) == strParam)
+        {
+            auto taskToDelete = task::tasks.begin();
+            advance(taskToDelete, pos);
+            if (*taskToDelete != nullptr)
+            {
+                BMCWEB_LOG_ERROR("Deleting Task",strParam);
+                task::tasks.erase(taskToDelete);
+                setLastTask();
+                asyncResp->res.result(boost::beast::http::status::no_content);
+                return;
+            }
+        }
+        pos++;
+    }
+}
+
 inline void requestRoutesTaskMonitor(App& app)
 {
     BMCWEB_ROUTE(app, "/redfish/v1/TaskService/Tasks/<str>/Monitor/")
@@ -507,4 +567,12 @@ inline void requestRoutesTaskService(App& app)
     });
 }
 
+inline void requestRoutesTaskDelete(App& app)
+{
+    BMCWEB_ROUTE(app, "/redfish/v1/TaskService/Tasks/<str>/")
+        .privileges(redfish::privileges::deleteTask)
+        .methods(boost::beast::http::verb::delete_)(
+            std::bind_front(handleTaskDelete, std::ref(app)));
+}
+
 } // namespace redfish
-- 
2.9.5

