From bc3c07b63ae87c28e9b2ecb5c583e0c1add23cc5 Mon Sep 17 00:00:00 2001
From: prasannas <prasannas@ami.com>
Date: Wed, 24 Jan 2024 17:48:14 +0530
Subject: [PATCH 162/162] While Patch DHCPv4 and DHCPv6 Attribute throw 500
 Internal server error

---
 redfish-core/lib/ethernet.hpp | 68 ++++++++++++++++++++---------------
 1 file changed, 39 insertions(+), 29 deletions(-)

diff --git a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
index e0b658ca..115bd6cf 100644
--- a/redfish-core/lib/ethernet.hpp
+++ b/redfish-core/lib/ethernet.hpp
@@ -920,6 +920,32 @@ void getEthernetIfaceList(CallbackFunc&& callback)
     });
 }
 
+inline bool isHostnameValid(const std::string& hostname)
+{
+    // A valid host name can never have the dotted-decimal form (RFC 1123)
+    if (std::ranges::all_of(hostname, ::isdigit))
+    {
+        return false;
+    }
+    // Each label(hostname/subdomains) within a valid FQDN
+    // MUST handle host names of up to 64 characters (RFC 1123)
+    // labels cannot start or end with hyphens (RFC 952)
+    // hostname starts with an alphanumeric character
+    const std::regex pattern("^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,62}[a-zA-Z0-9])?$");
+
+    return std::regex_match(hostname, pattern);
+}
+
+inline bool isDomainnameValid(const std::string& domainname)
+{
+    // Can have multiple subdomains
+    // Top Level Domain's min length is 2 character
+    const static std::regex pattern(
+        "^([A-Za-z0-9][a-zA-Z0-9\\-]{1,61}|[a-zA-Z0-9]{1,30}\\.)*[a-zA-Z]{2,}$");
+
+    return std::regex_match(domainname, pattern);
+}
+
 inline void
     handleHostnamePatch(const std::string& hostname,
                         const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
@@ -931,6 +957,13 @@ inline void
                                            "HostName");
         return;
     }
+    if (!isHostnameValid(hostname))
+    {
+        messages::propertyValueFormatError(asyncResp->res, hostname,
+                                           "HostName");
+        return;
+    }
+
     sdbusplus::asio::setProperty(
         *crow::connections::systemBus, "xyz.openbmc_project.Network",
         "/xyz/openbmc_project/network/config",
@@ -986,32 +1019,6 @@ inline void
     });
 }
 
-inline bool isHostnameValid(const std::string& hostname)
-{
-    // A valid host name can never have the dotted-decimal form (RFC 1123)
-    if (std::ranges::all_of(hostname, ::isdigit))
-    {
-        return false;
-    }
-    // Each label(hostname/subdomains) within a valid FQDN
-    // MUST handle host names of up to 64 characters (RFC 1123)
-    // labels cannot start or end with hyphens (RFC 952)
-    // hostname starts with an alphanumeric character
-    const std::regex pattern("^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,62}[a-zA-Z0-9])?$");
-
-    return std::regex_match(hostname, pattern);
-}
-
-inline bool isDomainnameValid(const std::string& domainname)
-{
-    // Can have multiple subdomains
-    // Top Level Domain's min length is 2 character
-    const static std::regex pattern(
-        "^([A-Za-z0-9][a-zA-Z0-9\\-]{1,61}|[a-zA-Z0-9]{1,30}\\.)*[a-zA-Z]{2,}$");
-
-    return std::regex_match(domainname, pattern);
-}
-
 inline void handleFqdnPatch(const std::string& ifaceId, const std::string& fqdn,
                             const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 {
@@ -1191,7 +1198,8 @@ inline void handleDHCPPatch(const std::string& ifaceId,
     {
         if (*v4dhcpParms.useDnsServers != *v6dhcpParms.useDnsServers)
         {
-            messages::generalError(asyncResp->res);
+            messages::propertyValueConflict(
+                asyncResp->res, "DHCPv4.UseDNSServers", "DHCPv6.UseDNSServers");
             return;
         }
         nextDNS = *v4dhcpParms.useDnsServers;
@@ -1214,7 +1222,8 @@ inline void handleDHCPPatch(const std::string& ifaceId,
     {
         if (*v4dhcpParms.useNtpServers != *v6dhcpParms.useNtpServers)
         {
-            messages::generalError(asyncResp->res);
+            messages::propertyValueConflict(
+                asyncResp->res, "DHCPv4.UseNTPServers", "DHCPv6.UseNTPServers");
             return;
         }
         nextNTP = *v4dhcpParms.useNtpServers;
@@ -1237,7 +1246,8 @@ inline void handleDHCPPatch(const std::string& ifaceId,
     {
         if (*v4dhcpParms.useDomainName != *v6dhcpParms.useDomainName)
         {
-            messages::generalError(asyncResp->res);
+            messages::propertyValueConflict(
+                asyncResp->res, "DHCPv4.UseDomainName", "DHCPv6.UseDomainName");
             return;
         }
         nextUseDomain = *v4dhcpParms.useDomainName;
-- 
2.25.1

