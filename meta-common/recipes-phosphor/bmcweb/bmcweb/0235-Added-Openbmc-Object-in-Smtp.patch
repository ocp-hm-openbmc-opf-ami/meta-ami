From f4a216efab866c351a44b11b4bcec1219b4563b9 Mon Sep 17 00:00:00 2001
From: prasannas <prasannas@ami.com>
Date: Fri, 29 Mar 2024 17:56:04 +0530
Subject: [PATCH 235/235] Added Openbmc Object in Smtp

---
 redfish-core/lib/event_service.hpp | 945 +++++++++++++++--------------
 redfish-core/lib/pef_service.hpp   |   8 +-
 2 files changed, 497 insertions(+), 456 deletions(-)

diff --git a/redfish-core/lib/event_service.hpp b/redfish-core/lib/event_service.hpp
index c5ba7153..2346099d 100644
--- a/redfish-core/lib/event_service.hpp
+++ b/redfish-core/lib/event_service.hpp
@@ -134,46 +134,46 @@ inline void getSmtpConfig(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
             messages::internalError(asyncResp->res);
             return;
         }
-        asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]
+        asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
                                 ["Authentication"] = authentication;
 
-        asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]["Enable"] =
-            enable;
+        asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
+                                ["Enable"] = enable;
 
         if (host != nullptr)
         {
-            asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]["Host"] =
-                *host;
+            asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
+                                    ["Host"] = *host;
         }
         if (username != nullptr)
         {
-            asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]["UserName"] =
-                *username;
+            asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
+                                    ["UserName"] = *username;
         }
         if (password != nullptr)
         {
-            asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]["Password"] =
-                *password;
+            asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
+                                    ["Password"] = *password;
         }
 
         if (port != nullptr)
         {
-            asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]["Port"] =
-                *port;
+            asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
+                                    ["Port"] = *port;
         }
         if (recipient != nullptr)
         {
-            asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]
+            asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
                                     ["Recipient"] = *recipient;
         }
         if (sender != nullptr)
         {
-            asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]["Sender"] =
-                *sender;
+            asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
+                                    ["Sender"] = *sender;
         }
 
-        asyncResp->res.jsonValue["Oem"]["SMTP"][configuration]["TLSEnable"] =
-            TLSEnable;
+        asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"][configuration]
+                                ["TLSEnable"] = TLSEnable;
     });
 }
 
@@ -229,17 +229,17 @@ inline void
               << sslPrimaryServerKeyFile.c_str() << "\n";
 
     isPrimaryCACERT = ensureOpensslKeyPresentAndValid(sslPrimaryCACERTFile);
-    asyncResp->res.jsonValue["Oem"]["SMTP"]["PrimaryConfiguration"]
+    asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"]["PrimaryConfiguration"]
                             ["isCACERTExist"] = isPrimaryCACERT;
     isPrimaryServerCRT =
         ensureOpensslKeyPresentAndValid(sslPrimaryServerCRTFile);
 
-    asyncResp->res.jsonValue["Oem"]["SMTP"]["PrimaryConfiguration"]
+    asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"]["PrimaryConfiguration"]
                             ["isServerCRTExist"] = isPrimaryServerCRT;
     isPrimaryServerKey =
         ensureOpensslKeyPresentAndValid(sslPrimaryServerKeyFile);
 
-    asyncResp->res.jsonValue["Oem"]["SMTP"]["PrimaryConfiguration"]
+    asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"]["PrimaryConfiguration"]
                             ["isServerKeyExist"] = isPrimaryServerKey;
 
     if (isPrimaryCACERT)
@@ -250,9 +250,9 @@ inline void
         std::cerr << "Modified date and time for Primary CACERT "
                   << primaryCACERTModifiedDate << "\n";
 
-        asyncResp->res.jsonValue["Oem"]["SMTP"]["PrimaryConfiguration"]
-                                ["primaryCACERTModifiedDate"] =
-            primaryCACERTModifiedDate;
+        asyncResp->res
+            .jsonValue["Oem"]["OpenBmc"]["SMTP"]["PrimaryConfiguration"]
+                      ["primaryCACERTModifiedDate"] = primaryCACERTModifiedDate;
     }
     if (isPrimaryServerCRT)
     {
@@ -262,8 +262,9 @@ inline void
         std::cerr << "Modified date and time for Primary CACERT "
                   << primaryCACERTModifiedDate << "\n";
 
-        asyncResp->res.jsonValue["Oem"]["SMTP"]["PrimaryConfiguration"]
-                                ["primaryserverCRTModifiedDate"] =
+        asyncResp->res
+            .jsonValue["Oem"]["OpenBmc"]["SMTP"]["PrimaryConfiguration"]
+                      ["primaryserverCRTModifiedDate"] =
             primaryCACERTModifiedDate;
     }
     if (isPrimaryServerKey)
@@ -274,8 +275,9 @@ inline void
         std::cerr << "Modified date and time for Primary CACERT "
                   << primaryCACERTModifiedDate << "\n";
 
-        asyncResp->res.jsonValue["Oem"]["SMTP"]["PrimaryConfiguration"]
-                                ["primaryServerKeyModifiedDate"] =
+        asyncResp->res
+            .jsonValue["Oem"]["OpenBmc"]["SMTP"]["PrimaryConfiguration"]
+                      ["primaryServerKeyModifiedDate"] =
             primaryCACERTModifiedDate;
     }
 
@@ -289,17 +291,17 @@ inline void
               << sslSecondaryServerKeyFile.c_str() << "\n";
 
     isSecondrayCACERT = ensureOpensslKeyPresentAndValid(sslSecondaryCACERTFile);
-    asyncResp->res.jsonValue["Oem"]["SMTP"]["SecondaryConfiguration"]
+    asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"]["SecondaryConfiguration"]
                             ["isCACERTExist"] = isSecondrayCACERT;
     isSecondrayServerKey =
         ensureOpensslKeyPresentAndValid(sslSecondaryServerKeyFile);
 
-    asyncResp->res.jsonValue["Oem"]["SMTP"]["SecondaryConfiguration"]
+    asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"]["SecondaryConfiguration"]
                             ["isServerKeyExist"] = isSecondrayServerKey;
     isSecondrayServerCRT =
         ensureOpensslKeyPresentAndValid(sslSecondaryServerCRTFile);
 
-    asyncResp->res.jsonValue["Oem"]["SMTP"]["SecondaryConfiguration"]
+    asyncResp->res.jsonValue["Oem"]["OpenBmc"]["SMTP"]["SecondaryConfiguration"]
                             ["isServerCRTExist"] = isSecondrayServerCRT;
 
     if (isSecondrayCACERT)
@@ -309,8 +311,9 @@ inline void
         std::cerr << "Modified date and time for Primary CACERT "
                   << modifiedDate << "\n";
 
-        asyncResp->res.jsonValue["Oem"]["SMTP"]["SecondaryConfiguration"]
-                                ["secondaryCACERTModifiedDate"] = modifiedDate;
+        asyncResp->res
+            .jsonValue["Oem"]["OpenBmc"]["SMTP"]["SecondaryConfiguration"]
+                      ["secondaryCACERTModifiedDate"] = modifiedDate;
     }
     if (isSecondrayServerCRT)
     {
@@ -319,9 +322,9 @@ inline void
         std::cerr << "Modified date and time for Primary CACERT "
                   << modifiedDate << "\n";
 
-        asyncResp->res.jsonValue["Oem"]["SMTP"]["SecondaryConfiguration"]
-                                ["secondaryserverCRTModifiedDate"] =
-            modifiedDate;
+        asyncResp->res
+            .jsonValue["Oem"]["OpenBmc"]["SMTP"]["SecondaryConfiguration"]
+                      ["secondaryserverCRTModifiedDate"] = modifiedDate;
     }
     if (isSecondrayServerKey)
     {
@@ -330,9 +333,9 @@ inline void
         std::cerr << "Modified date and time for Primary CACERT "
                   << modifiedDate << "\n";
 
-        asyncResp->res.jsonValue["Oem"]["SMTP"]["SecondaryConfiguration"]
-                                ["secondaryServerKeyModifiedDate"] =
-            modifiedDate;
+        asyncResp->res
+            .jsonValue["Oem"]["OpenBmc"]["SMTP"]["SecondaryConfiguration"]
+                      ["secondaryServerKeyModifiedDate"] = modifiedDate;
     }
 }
 
@@ -913,543 +916,575 @@ inline void requestRoutesEventService(App& app)
         }
         if (oem)
         {
-            std::optional<nlohmann::json> smtp;
-            if (!json_util::readJson(*oem, asyncResp->res, "SMTP", smtp))
+            std::optional<nlohmann::json> openbmc;
+            if (!json_util::readJson(*oem, asyncResp->res, "OpenBmc", openbmc))
             {
                 return;
             }
-            if (smtp)
+            if (openbmc)
             {
-                std::optional<nlohmann::json> PrimaryConfiguration;
-                std::optional<nlohmann::json> SecondaryConfiguration;
-                if (!json_util::readJson(
-                        *smtp, asyncResp->res, "PrimaryConfiguration",
-                        PrimaryConfiguration, "SecondaryConfiguration",
-                        SecondaryConfiguration))
+                std::optional<nlohmann::json> smtp;
+                if (!json_util::readJson(*openbmc, asyncResp->res, "SMTP",
+                                         smtp))
                 {
                     return;
                 }
-
-                if (PrimaryConfiguration)
+                if (smtp)
                 {
-                    std::optional<bool> authentication;
-                    std::optional<bool> enable;
-                    std::optional<std::string> host;
-                    std::optional<std::string> password;
-                    std::optional<uint16_t> port;
-                    std::optional<std::vector<std::string>> recipient;
-                    std::optional<std::string> sender;
-                    std::optional<bool> tlsenable;
-                    std::optional<std::string> username;
-
+                    std::optional<nlohmann::json> PrimaryConfiguration;
+                    std::optional<nlohmann::json> SecondaryConfiguration;
                     if (!json_util::readJson(
-                            *PrimaryConfiguration, asyncResp->res,
-                            "Authentication", authentication, "Enable", enable,
-                            "Host", host, "Password", password, "Port", port,
-                            "Recipient", recipient, "Sender", sender,
-                            "TLSEnable", tlsenable, "UserName", username))
+                            *smtp, asyncResp->res, "PrimaryConfiguration",
+                            PrimaryConfiguration, "SecondaryConfiguration",
+                            SecondaryConfiguration))
                     {
                         return;
                     }
-                    if (recipient)
-                    {
-                        std::size_t size = recipient.value().size();
 
-                        if (size > 4)
+                    if (PrimaryConfiguration)
+                    {
+                        std::optional<bool> authentication;
+                        std::optional<bool> enable;
+                        std::optional<std::string> host;
+                        std::optional<std::string> password;
+                        std::optional<uint16_t> port;
+                        std::optional<std::vector<std::string>> recipient;
+                        std::optional<std::string> sender;
+                        std::optional<bool> tlsenable;
+                        std::optional<std::string> username;
+
+                        if (!json_util::readJson(
+                                *PrimaryConfiguration, asyncResp->res,
+                                "Authentication", authentication, "Enable",
+                                enable, "Host", host, "Password", password,
+                                "Port", port, "Recipient", recipient, "Sender",
+                                sender, "TLSEnable", tlsenable, "UserName",
+                                username))
                         {
-                            messages::arraySizeTooLong(asyncResp->res,
-                                                       "Recipient", size);
                             return;
                         }
-                        else
+                        if (recipient)
+                        {
+                            std::size_t size = recipient.value().size();
+
+                            if (size > 4)
+                            {
+                                messages::arraySizeTooLong(asyncResp->res,
+                                                           "Recipient", 4);
+                                return;
+                            }
+                            else
+                            {
+                                setRecipient(
+                                    asyncResp,
+                                    "xyz.openbmc_project.mail.alert.primary",
+                                    *recipient);
+                            }
+                        }
+                        if (authentication)
+                        {
+                            if (*authentication)
+                            {
+                                if (username && password)
+                                {
+                                    if (username == "" && password == "")
+                                    {
+                                        messages::propertyValueEmpty(
+                                            asyncResp->res, *username,
+                                            "UserName and Password");
+                                        return;
+                                    }
+                                    else if (username == "")
+                                    {
+                                        messages::propertyValueEmpty(
+                                            asyncResp->res, *username,
+                                            "UserName");
+                                        return;
+                                    }
+                                    else if (password == "")
+                                    {
+                                        messages::propertyValueEmpty(
+                                            asyncResp->res, *password,
+                                            "password");
+                                        return;
+                                    }
+                                    else
+                                    {
+                                        setAuthentication(
+                                            asyncResp,
+                                            "xyz.openbmc_project.mail.alert.primary",
+                                            *authentication);
+                                    }
+                                }
+                                else
+                                {
+                                    handleauthenticationpatch(
+                                        asyncResp,
+                                        "xyz.openbmc_project.mail.alert.primary",
+                                        "Authentication", *authentication);
+                                }
+                            }
+                            else
+                            {
+                                setAuthentication(
+                                    asyncResp,
+                                    "xyz.openbmc_project.mail.alert.primary",
+                                    *authentication);
+                            }
+                        }
+
+                        if (username)
                         {
-                            setRecipient(
+                            setUsername(
                                 asyncResp,
                                 "xyz.openbmc_project.mail.alert.primary",
-                                *recipient);
+                                *username);
                         }
-                    }
-                    if (authentication)
-                    {
-                        if (*authentication)
+                        if (password)
                         {
-                            if (username && password)
+                            setPassword(
+                                asyncResp,
+                                "xyz.openbmc_project.mail.alert.primary",
+                                *password);
+                        }
+
+                        if (tlsenable)
+                        {
+                            std::cerr << "Checking tlsenable value ==>  "
+                                      << *tlsenable << "\n";
+                            if (*tlsenable)
                             {
-                                if (username == "" && password == "")
+                                bool isPrimaryCACERT = true;
+                                bool isPrimaryServerKey = true;
+                                bool isPrimaryServerCRT = true;
+
+                                /* Primary SSL */
+
+                                std::cerr << "SSL Primary CACERT Context file= "
+                                          << sslPrimaryCACERTFile.c_str()
+                                          << "\n";
+                                std::cerr << "SSL Primary CRT Context file= "
+                                          << sslPrimaryServerCRTFile.c_str()
+                                          << "\n";
+                                std::cerr << "SSL Primary Key Context file= "
+                                          << sslPrimaryServerKeyFile.c_str()
+                                          << "\n";
+
+                                isPrimaryCACERT =
+                                    ensureOpensslKeyPresentAndValid(
+                                        sslPrimaryCACERTFile);
+
+                                isPrimaryServerKey =
+                                    ensureOpensslKeyPresentAndValid(
+                                        sslPrimaryServerKeyFile);
+
+                                isPrimaryServerCRT =
+                                    ensureOpensslKeyPresentAndValid(
+                                        sslPrimaryServerCRTFile);
+
+                                if (!isPrimaryCACERT)
                                 {
+                                    std::cerr
+                                        << "Checking certs in inside checkfile exits "
+                                        << isPrimaryCACERT << "\n";
+                                    asyncResp->res
+                                        .jsonValue["Actions"]
+                                                  ["#SMTP.certificate"]
+                                                  ["target"] =
+                                        "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
                                     messages::propertyValueEmpty(
-                                        asyncResp->res, *username,
-                                        "UserName and Password");
+                                        asyncResp->res,
+                                        primaryCacertFileName +
+                                            "Certificate is missing",
+                                        sslPrimaryCACERTFile);
                                     return;
                                 }
-                                else if (username == "")
+                                else if (!isPrimaryServerKey)
                                 {
+                                    std::cerr
+                                        << "Checking certs in inside checkfile exits "
+                                        << isPrimaryServerKey << "\n";
+                                    asyncResp->res
+                                        .jsonValue["Actions"]
+                                                  ["#SMTP.certificate"]
+                                                  ["target"] =
+                                        "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
                                     messages::propertyValueEmpty(
-                                        asyncResp->res, *username, "UserName");
-                                    return;
+                                        asyncResp->res,
+                                        primaryServerKeyFileName +
+                                            "Certificate is missing",
+                                        sslPrimaryServerKeyFile);
                                 }
-                                else if (password == "")
+                                else if (!isPrimaryServerCRT)
                                 {
+                                    std::cerr
+                                        << "Checking certs in inside checkfile exits "
+                                        << isPrimaryServerCRT << "\n";
+                                    asyncResp->res
+                                        .jsonValue["Actions"]
+                                                  ["#SMTP.certificate"]
+                                                  ["target"] =
+                                        "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
                                     messages::propertyValueEmpty(
-                                        asyncResp->res, *password, "password");
-                                    return;
+                                        asyncResp->res,
+                                        primaryServerCRTFileName +
+                                            "Certificate is missing",
+                                        sslPrimaryServerCRTFile);
                                 }
                                 else
                                 {
-                                    setAuthentication(
+                                    setTlsEnable(
                                         asyncResp,
                                         "xyz.openbmc_project.mail.alert.primary",
-                                        *authentication);
+                                        *tlsenable);
                                 }
                             }
                             else
                             {
-                                handleauthenticationpatch(
+                                setTlsEnable(
                                     asyncResp,
                                     "xyz.openbmc_project.mail.alert.primary",
-                                    "Authentication", *authentication);
+                                    *tlsenable);
                             }
                         }
-                        else
+                        if (enable)
                         {
-                            setAuthentication(
-                                asyncResp,
-                                "xyz.openbmc_project.mail.alert.primary",
-                                *authentication);
+                            if (*enable)
+                            {
+                                setServiceEnable(
+                                    asyncResp,
+                                    "xyz.openbmc_project.mail.alert.primary",
+                                    *enable);
+                            }
+                            else
+                            {
+                                if (SecondaryConfiguration)
+                                {
+                                    std::optional<bool> authentication;
+                                    std::optional<bool> enable2;
+                                    std::optional<std::string> host;
+                                    std::optional<std::string> password;
+                                    std::optional<uint16_t> port;
+                                    std::optional<std::vector<std::string>>
+                                        recipient;
+                                    std::optional<std::string> sender;
+                                    std::optional<bool> tlsenable;
+                                    std::optional<std::string> username;
+                                    if (!json_util::readJson(
+                                            *SecondaryConfiguration,
+                                            asyncResp->res, "Authentication",
+                                            authentication, "Enable", enable,
+                                            "Host", host, "Password", password,
+                                            "Port", port, "Recipient",
+                                            recipient, "Sender", sender,
+                                            "TLSEnable", tlsenable, "UserName",
+                                            username))
+                                    {
+                                        return;
+                                    }
+                                    if (enable)
+                                    {
+                                        if (*enable)
+                                        {
+                                            messages::propertyValueConflict(
+                                                asyncResp->res,
+                                                "PrimaryConfiguration.Enable",
+                                                "SecondaryConfiguration.Enable");
+                                            return;
+                                        }
+                                        else
+                                        {
+                                            setServiceEnable(
+                                                asyncResp,
+                                                "xyz.openbmc_project.mail.alert.primary",
+                                                *enable);
+                                        }
+                                    }
+                                }
+                                else
+                                {
+                                    sdbusplus::asio::getProperty<bool>(
+                                        *crow::connections::systemBus,
+                                        "xyz.openbmc_project.mail",
+                                        "/xyz/openbmc_project/mail/alert",
+                                        "xyz.openbmc_project.mail.alert.secondary",
+                                        "Enable",
+                                        [asyncResp, &enable](
+                                            const boost::system::error_code& ec,
+                                            bool ServiceEnabled) {
+                                        if (ec)
+                                        {
+                                            BMCWEB_LOG_ERROR(
+                                                "D-BUS response error on SnmpTrapStatus Get{}",
+                                                ec);
+                                            messages::internalError(
+                                                asyncResp->res);
+                                            return;
+                                        }
+                                        if (ServiceEnabled)
+                                        {
+                                            messages::propertyValueConflict(
+                                                asyncResp->res,
+                                                "PrimaryConfiguration.Enable",
+                                                "SecondaryConfiguration.Enable");
+                                            return;
+                                        }
+                                        else
+                                        {
+                                            setServiceEnable(
+                                                asyncResp,
+                                                "xyz.openbmc_project.mail.alert.primary",
+                                                *enable);
+                                        }
+                                    });
+                                }
+                            }
                         }
-                    }
-
-                    if (username)
-                    {
-                        setUsername(asyncResp,
+                        if (host)
+                        {
+                            setHost(asyncResp,
                                     "xyz.openbmc_project.mail.alert.primary",
-                                    *username);
-                    }
-                    if (password)
-                    {
-                        setPassword(asyncResp,
+                                    *host);
+                        }
+                        if (sender)
+                        {
+                            setSender(asyncResp,
+                                      "xyz.openbmc_project.mail.alert.primary",
+                                      *sender);
+                        }
+                        if (port)
+                        {
+                            setport(asyncResp,
                                     "xyz.openbmc_project.mail.alert.primary",
-                                    *password);
+                                    *port);
+                        }
                     }
-
-                    if (tlsenable)
+                    if (SecondaryConfiguration)
                     {
-                        std::cerr << "Checking tlsenable value ==>  "
-                                  << *tlsenable << "\n";
-                        if (*tlsenable)
+                        std::optional<bool> authentication;
+                        std::optional<bool> enable;
+                        std::optional<std::string> host;
+                        std::optional<std::string> password;
+                        std::optional<uint16_t> port;
+                        std::optional<std::vector<std::string>> recipient;
+                        std::optional<std::string> sender;
+                        std::optional<bool> tlsenable;
+                        std::optional<std::string> username;
+
+                        if (!json_util::readJson(
+                                *SecondaryConfiguration, asyncResp->res,
+                                "Authentication", authentication, "Enable",
+                                enable, "Host", host, "Password", password,
+                                "Port", port, "Recipient", recipient, "Sender",
+                                sender, "TLSEnable", tlsenable, "UserName",
+                                username))
                         {
-                            bool isPrimaryCACERT = true;
-                            bool isPrimaryServerKey = true;
-                            bool isPrimaryServerCRT = true;
-
-                            /* Primary SSL */
-
-                            std::cerr << "SSL Primary CACERT Context file= "
-                                      << sslPrimaryCACERTFile.c_str() << "\n";
-                            std::cerr << "SSL Primary CRT Context file= "
-                                      << sslPrimaryServerCRTFile.c_str()
-                                      << "\n";
-                            std::cerr << "SSL Primary Key Context file= "
-                                      << sslPrimaryServerKeyFile.c_str()
-                                      << "\n";
-
-                            isPrimaryCACERT = ensureOpensslKeyPresentAndValid(
-                                sslPrimaryCACERTFile);
-
-                            isPrimaryServerKey =
-                                ensureOpensslKeyPresentAndValid(
-                                    sslPrimaryServerKeyFile);
-
-                            isPrimaryServerCRT =
-                                ensureOpensslKeyPresentAndValid(
-                                    sslPrimaryServerCRTFile);
+                            return;
+                        }
+                        if (recipient)
+                        {
+                            std::size_t size = recipient.value().size();
 
-                            if (!isPrimaryCACERT)
+                            if (size > 4)
                             {
-                                std::cerr
-                                    << "Checking certs in inside checkfile exits "
-                                    << isPrimaryCACERT << "\n";
-                                asyncResp->res
-                                    .jsonValue["Actions"]["#SMTP.certificate"]
-                                              ["target"] =
-                                    "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
-                                messages::propertyValueEmpty(
-                                    asyncResp->res,
-                                    primaryCacertFileName +
-                                        "Certificate is missing",
-                                    sslPrimaryCACERTFile);
+                                messages::arraySizeTooLong(asyncResp->res,
+                                                           "Recipient", 4);
                                 return;
                             }
-                            else if (!isPrimaryServerKey)
-                            {
-                                std::cerr
-                                    << "Checking certs in inside checkfile exits "
-                                    << isPrimaryServerKey << "\n";
-                                asyncResp->res
-                                    .jsonValue["Actions"]["#SMTP.certificate"]
-                                              ["target"] =
-                                    "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
-                                messages::propertyValueEmpty(
-                                    asyncResp->res,
-                                    primaryServerKeyFileName +
-                                        "Certificate is missing",
-                                    sslPrimaryServerKeyFile);
-                            }
-                            else if (!isPrimaryServerCRT)
-                            {
-                                std::cerr
-                                    << "Checking certs in inside checkfile exits "
-                                    << isPrimaryServerCRT << "\n";
-                                asyncResp->res
-                                    .jsonValue["Actions"]["#SMTP.certificate"]
-                                              ["target"] =
-                                    "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
-                                messages::propertyValueEmpty(
-                                    asyncResp->res,
-                                    primaryServerCRTFileName +
-                                        "Certificate is missing",
-                                    sslPrimaryServerCRTFile);
-                            }
                             else
                             {
-                                setTlsEnable(
+                                setRecipient(
                                     asyncResp,
-                                    "xyz.openbmc_project.mail.alert.primary",
-                                    *tlsenable);
+                                    "xyz.openbmc_project.mail.alert.secondary",
+                                    *recipient);
                             }
                         }
-                        else
-                        {
-                            setTlsEnable(
-                                asyncResp,
-                                "xyz.openbmc_project.mail.alert.primary",
-                                *tlsenable);
-                        }
-                    }
-                    if (enable)
-                    {
-                        if (*enable)
-                        {
-                            setServiceEnable(
-                                asyncResp,
-                                "xyz.openbmc_project.mail.alert.primary",
-                                *enable);
-                        }
-                        else
+                        if (authentication)
                         {
-                            if (SecondaryConfiguration)
+                            if (*authentication)
                             {
-                                std::optional<bool> authentication;
-                                std::optional<bool> enable2;
-                                std::optional<std::string> host;
-                                std::optional<std::string> password;
-                                std::optional<uint16_t> port;
-                                std::optional<std::vector<std::string>>
-                                    recipient;
-                                std::optional<std::string> sender;
-                                std::optional<bool> tlsenable;
-                                std::optional<std::string> username;
-                                if (!json_util::readJson(
-                                        *SecondaryConfiguration, asyncResp->res,
-                                        "Authentication", authentication,
-                                        "Enable", enable, "Host", host,
-                                        "Password", password, "Port", port,
-                                        "Recipient", recipient, "Sender",
-                                        sender, "TLSEnable", tlsenable,
-                                        "UserName", username))
+                                if (username && password)
                                 {
-                                    return;
-                                }
-                                if (enable)
-                                {
-                                    if (*enable)
+                                    if (username == "" && password == "")
                                     {
-                                        messages::propertyValueConflict(
-                                            asyncResp->res,
-                                            "PrimaryConfiguration.Enable",
-                                            "SecondaryConfiguration.Enable");
+                                        messages::propertyValueEmpty(
+                                            asyncResp->res, *username,
+                                            "UserName and Password");
                                         return;
                                     }
-                                    else
+                                    else if (username == "")
                                     {
-                                        setServiceEnable(
-                                            asyncResp,
-                                            "xyz.openbmc_project.mail.alert.primary",
-                                            *enable);
-                                    }
-                                }
-                            }
-                            else
-                            {
-                                sdbusplus::asio::getProperty<bool>(
-                                    *crow::connections::systemBus,
-                                    "xyz.openbmc_project.mail",
-                                    "/xyz/openbmc_project/mail/alert",
-                                    "xyz.openbmc_project.mail.alert.secondary",
-                                    "Enable",
-                                    [asyncResp, &enable](
-                                        const boost::system::error_code& ec,
-                                        bool ServiceEnabled) {
-                                    if (ec)
-                                    {
-                                        BMCWEB_LOG_ERROR(
-                                            "D-BUS response error on SnmpTrapStatus Get{}",
-                                            ec);
-                                        messages::internalError(asyncResp->res);
+                                        messages::propertyValueEmpty(
+                                            asyncResp->res, *username,
+                                            "UserName");
                                         return;
                                     }
-                                    if (ServiceEnabled)
+                                    else if (password == "")
                                     {
-                                        messages::propertyValueConflict(
-                                            asyncResp->res,
-                                            "PrimaryConfiguration.Enable",
-                                            "SecondaryConfiguration.Enable");
+                                        messages::propertyValueEmpty(
+                                            asyncResp->res, *password,
+                                            "password");
                                         return;
                                     }
                                     else
                                     {
-                                        setServiceEnable(
+                                        setAuthentication(
                                             asyncResp,
-                                            "xyz.openbmc_project.mail.alert.primary",
-                                            *enable);
+                                            "xyz.openbmc_project.mail.alert.secondary",
+                                            *authentication);
                                     }
-                                });
+                                }
+                                else
+                                {
+                                    handleauthenticationpatch(
+                                        asyncResp,
+                                        "xyz.openbmc_project.mail.alert.secondary",
+                                        "Authentication", *authentication);
+                                }
+                            }
+                            else
+                            {
+                                setAuthentication(
+                                    asyncResp,
+                                    "xyz.openbmc_project.mail.alert.secondary",
+                                    *authentication);
                             }
                         }
-                    }
-                    if (host)
-                    {
-                        setHost(asyncResp,
-                                "xyz.openbmc_project.mail.alert.primary",
-                                *host);
-                    }
-                    if (sender)
-                    {
-                        setSender(asyncResp,
-                                  "xyz.openbmc_project.mail.alert.primary",
-                                  *sender);
-                    }
-                    if (port)
-                    {
-                        setport(asyncResp,
-                                "xyz.openbmc_project.mail.alert.primary",
-                                *port);
-                    }
-                }
-                if (SecondaryConfiguration)
-                {
-                    std::optional<bool> authentication;
-                    std::optional<bool> enable;
-                    std::optional<std::string> host;
-                    std::optional<std::string> password;
-                    std::optional<uint16_t> port;
-                    std::optional<std::vector<std::string>> recipient;
-                    std::optional<std::string> sender;
-                    std::optional<bool> tlsenable;
-                    std::optional<std::string> username;
-
-                    if (!json_util::readJson(
-                            *SecondaryConfiguration, asyncResp->res,
-                            "Authentication", authentication, "Enable", enable,
-                            "Host", host, "Password", password, "Port", port,
-                            "Recipient", recipient, "Sender", sender,
-                            "TLSEnable", tlsenable, "UserName", username))
-                    {
-                        return;
-                    }
-                    if (recipient)
-                    {
-                        std::size_t size = recipient.value().size();
-
-                        if (size > 4)
+                        if (username)
                         {
-                            messages::arraySizeTooLong(asyncResp->res,
-                                                       "Recipient", size);
-                            return;
+                            setUsername(
+                                asyncResp,
+                                "xyz.openbmc_project.mail.alert.secondary",
+                                *username);
                         }
-                        else
+                        if (password)
                         {
-                            setRecipient(
+                            setPassword(
                                 asyncResp,
                                 "xyz.openbmc_project.mail.alert.secondary",
-                                *recipient);
+                                *password);
                         }
-                    }
-                    if (authentication)
-                    {
-                        if (*authentication)
+                        if (tlsenable)
                         {
-                            if (username && password)
+                            std::cerr << "Checking tlsenable value ==>  "
+                                      << *tlsenable << "\n";
+                            if (*tlsenable)
                             {
-                                if (username == "" && password == "")
+                                bool isSecondrayCACERT = true;
+                                bool isSecondrayServerKey = true;
+                                bool isSecondrayServerCRT = true;
+
+                                /* Secondary SSL */
+
+                                std::cerr
+                                    << "SSL Secondary CACERT Context file= "
+                                    << sslSecondaryCACERTFile.c_str() << "\n";
+                                std::cerr << "SSL Secondary CRT Context file= "
+                                          << sslSecondaryServerCRTFile.c_str()
+                                          << "\n";
+                                std::cerr << "SSL Secondary Key Context file= "
+                                          << sslSecondaryServerKeyFile.c_str()
+                                          << "\n";
+
+                                isSecondrayCACERT =
+                                    ensureOpensslKeyPresentAndValid(
+                                        sslSecondaryCACERTFile);
+                                isSecondrayServerKey =
+                                    ensureOpensslKeyPresentAndValid(
+                                        sslSecondaryServerKeyFile);
+
+                                isSecondrayServerCRT =
+                                    ensureOpensslKeyPresentAndValid(
+                                        sslSecondaryServerCRTFile);
+
+                                if (!isSecondrayCACERT)
                                 {
+                                    std::cerr
+                                        << "Checking certs in inside checkfile exits "
+                                        << isSecondrayCACERT << "\n";
+                                    asyncResp->res
+                                        .jsonValue["Actions"]
+                                                  ["#SMTP.certificate"]
+                                                  ["target"] =
+                                        "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
                                     messages::propertyValueEmpty(
-                                        asyncResp->res, *username,
-                                        "UserName and Password");
+                                        asyncResp->res,
+                                        "SSL cacert.pem Certificate is not exits",
+                                        sslSecondaryCACERTFile);
                                     return;
                                 }
-                                else if (username == "")
+                                else if (!isSecondrayServerKey)
                                 {
+                                    std::cerr
+                                        << "Checking certs in inside checkfile exits "
+                                        << isSecondrayServerKey << "\n";
+                                    asyncResp->res
+                                        .jsonValue["Actions"]
+                                                  ["#SMTP.certificate"]
+                                                  ["target"] =
+                                        "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
                                     messages::propertyValueEmpty(
-                                        asyncResp->res, *username, "UserName");
-                                    return;
+                                        asyncResp->res,
+                                        "SSL Server.crt Certificate is not exits",
+                                        sslPrimaryServerKeyFile);
                                 }
-                                else if (password == "")
+                                else if (!isSecondrayServerCRT)
                                 {
+                                    std::cerr
+                                        << "Checking certs in inside checkfile exits "
+                                        << isSecondrayServerCRT << "\n";
+                                    asyncResp->res
+                                        .jsonValue["Actions"]
+                                                  ["#SMTP.certificate"]
+                                                  ["target"] =
+                                        "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
                                     messages::propertyValueEmpty(
-                                        asyncResp->res, *password, "password");
-                                    return;
+                                        asyncResp->res,
+                                        "SSL Server.Key Certificate is not exits",
+                                        sslSecondaryServerCRTFile);
                                 }
                                 else
                                 {
-                                    setAuthentication(
+                                    setTlsEnable(
                                         asyncResp,
                                         "xyz.openbmc_project.mail.alert.secondary",
-                                        *authentication);
+                                        *tlsenable);
                                 }
                             }
                             else
                             {
-                                handleauthenticationpatch(
+                                setTlsEnable(
                                     asyncResp,
                                     "xyz.openbmc_project.mail.alert.secondary",
-                                    "Authentication", *authentication);
+                                    *tlsenable);
                             }
                         }
-                        else
+                        if (enable)
                         {
-                            setAuthentication(
+                            setServiceEnable(
                                 asyncResp,
                                 "xyz.openbmc_project.mail.alert.secondary",
-                                *authentication);
+                                *enable);
                         }
-                    }
-                    if (username)
-                    {
-                        setUsername(asyncResp,
-                                    "xyz.openbmc_project.mail.alert.secondary",
-                                    *username);
-                    }
-                    if (password)
-                    {
-                        setPassword(asyncResp,
-                                    "xyz.openbmc_project.mail.alert.secondary",
-                                    *password);
-                    }
-                    if (tlsenable)
-                    {
-                        std::cerr << "Checking tlsenable value ==>  "
-                                  << *tlsenable << "\n";
-                        if (*tlsenable)
+                        if (host)
                         {
-                            bool isSecondrayCACERT = true;
-                            bool isSecondrayServerKey = true;
-                            bool isSecondrayServerCRT = true;
-
-                            /* Secondary SSL */
-
-                            std::cerr << "SSL Secondary CACERT Context file= "
-                                      << sslSecondaryCACERTFile.c_str() << "\n";
-                            std::cerr << "SSL Secondary CRT Context file= "
-                                      << sslSecondaryServerCRTFile.c_str()
-                                      << "\n";
-                            std::cerr << "SSL Secondary Key Context file= "
-                                      << sslSecondaryServerKeyFile.c_str()
-                                      << "\n";
-
-                            isSecondrayCACERT = ensureOpensslKeyPresentAndValid(
-                                sslSecondaryCACERTFile);
-                            isSecondrayServerKey =
-                                ensureOpensslKeyPresentAndValid(
-                                    sslSecondaryServerKeyFile);
-
-                            isSecondrayServerCRT =
-                                ensureOpensslKeyPresentAndValid(
-                                    sslSecondaryServerCRTFile);
-
-                            if (!isSecondrayCACERT)
-                            {
-                                std::cerr
-                                    << "Checking certs in inside checkfile exits "
-                                    << isSecondrayCACERT << "\n";
-                                asyncResp->res
-                                    .jsonValue["Actions"]["#SMTP.certificate"]
-                                              ["target"] =
-                                    "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
-                                messages::propertyValueEmpty(
-                                    asyncResp->res,
-                                    "SSL cacert.pem Certificate is not exits",
-                                    sslSecondaryCACERTFile);
-                                return;
-                            }
-                            else if (!isSecondrayServerKey)
-                            {
-                                std::cerr
-                                    << "Checking certs in inside checkfile exits "
-                                    << isSecondrayServerKey << "\n";
-                                asyncResp->res
-                                    .jsonValue["Actions"]["#SMTP.certificate"]
-                                              ["target"] =
-                                    "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
-                                messages::propertyValueEmpty(
-                                    asyncResp->res,
-                                    "SSL Server.crt Certificate is not exits",
-                                    sslPrimaryServerKeyFile);
-                            }
-                            else if (!isSecondrayServerCRT)
-                            {
-                                std::cerr
-                                    << "Checking certs in inside checkfile exits "
-                                    << isSecondrayServerCRT << "\n";
-                                asyncResp->res
-                                    .jsonValue["Actions"]["#SMTP.certificate"]
-                                              ["target"] =
-                                    "/redfish/v1/EventService/Actions/Oem/Ami/SMTP.SSLCertificateUpload";
-                                messages::propertyValueEmpty(
-                                    asyncResp->res,
-                                    "SSL Server.Key Certificate is not exits",
-                                    sslSecondaryServerCRTFile);
-                            }
-                            else
-                            {
-                                setTlsEnable(
-                                    asyncResp,
+                            setHost(asyncResp,
                                     "xyz.openbmc_project.mail.alert.secondary",
-                                    *tlsenable);
-                            }
+                                    *host);
                         }
-                        else
+                        if (sender)
                         {
-                            setTlsEnable(
+                            setSender(
                                 asyncResp,
                                 "xyz.openbmc_project.mail.alert.secondary",
-                                *tlsenable);
+                                *sender);
+                        }
+                        if (port)
+                        {
+                            setport(asyncResp,
+                                    "xyz.openbmc_project.mail.alert.secondary",
+                                    *port);
                         }
-                    }
-                    if (enable)
-                    {
-                        setServiceEnable(
-                            asyncResp,
-                            "xyz.openbmc_project.mail.alert.secondary",
-                            *enable);
-                    }
-                    if (host)
-                    {
-                        setHost(asyncResp,
-                                "xyz.openbmc_project.mail.alert.secondary",
-                                *host);
-                    }
-                    if (sender)
-                    {
-                        setSender(asyncResp,
-                                  "xyz.openbmc_project.mail.alert.secondary",
-                                  *sender);
-                    }
-                    if (port)
-                    {
-                        setport(asyncResp,
-                                "xyz.openbmc_project.mail.alert.secondary",
-                                *port);
                     }
                 }
             }
diff --git a/redfish-core/lib/pef_service.hpp b/redfish-core/lib/pef_service.hpp
index a75aefb1..ea4bb112 100644
--- a/redfish-core/lib/pef_service.hpp
+++ b/redfish-core/lib/pef_service.hpp
@@ -293,7 +293,8 @@ inline void requestRoutesPefService(App& app)
             return;
         }
         crow::connections::systemBus->async_method_call(
-            [subject, mailBuf, aResp](const boost::system::error_code ec,const std::uint16_t& response) {
+            [subject, mailBuf, aResp](const boost::system::error_code ec,
+                                      const std::uint16_t& response) {
             if (ec)
             {
                 BMCWEB_LOG_ERROR("SendMail: Can't get "
@@ -327,6 +328,11 @@ inline void requestRoutesPefService(App& app)
                         messages::internalError(aResp->res);
                         return;
                     }
+                    else if (response == 65534)
+                    {
+                        messages::insufficientPrivilege(aResp->res);
+                        return;
+                    }
                     messages::success(aResp->res);
                 });
             }
-- 
2.43.2

