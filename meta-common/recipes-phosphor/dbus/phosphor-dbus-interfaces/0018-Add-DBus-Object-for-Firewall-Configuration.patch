From 20331c73b7534fe8bae4cf6bf142de11165f1f1b Mon Sep 17 00:00:00 2001
From: Ethan Wei <ethanwei@ami.com>
Date: Thu, 14 Dec 2023 00:03:44 -0800
Subject: [PATCH] Add DBus Object for Firewall Configuration 	new file:  
 gen/xyz/openbmc_project/Network/FirewallConfiguration/meson.build 
 modified:   gen/xyz/openbmc_project/Network/meson.build 	new file:  
 yaml/xyz/openbmc_project/Network/FirewallConfiguration.interface.yaml

---
 .../Network/FirewallConfiguration/meson.build |  14 +++
 gen/xyz/openbmc_project/Network/meson.build   |  15 +++
 .../FirewallConfiguration.interface.yaml      | 108 ++++++++++++++++++
 3 files changed, 137 insertions(+)
 create mode 100644 gen/xyz/openbmc_project/Network/FirewallConfiguration/meson.build
 create mode 100644 yaml/xyz/openbmc_project/Network/FirewallConfiguration.interface.yaml

diff --git a/gen/xyz/openbmc_project/Network/FirewallConfiguration/meson.build b/gen/xyz/openbmc_project/Network/FirewallConfiguration/meson.build
new file mode 100644
index 0000000..1343df5
--- /dev/null
+++ b/gen/xyz/openbmc_project/Network/FirewallConfiguration/meson.build
@@ -0,0 +1,14 @@
+# Generated file; do not modify.
+generated_sources += custom_target(
+    'xyz/openbmc_project/Network/FirewallConfiguration__cpp'.underscorify(),
+    input: [ '../../../../../yaml/xyz/openbmc_project/Network/FirewallConfiguration.interface.yaml',  ],
+    output: [ 'server.cpp', 'server.hpp', 'client.hpp',  ],
+    depend_files: sdbusplusplus_depfiles,
+    command: [
+        sdbuspp_gen_meson_prog, '--command', 'cpp',
+        '--output', meson.current_build_dir(),
+        '--tool', sdbusplusplus_prog,
+        '--directory', meson.current_source_dir() / '../../../../../yaml',
+        'xyz/openbmc_project/Network/FirewallConfiguration',
+    ],
+)
\ No newline at end of file
diff --git a/gen/xyz/openbmc_project/Network/meson.build b/gen/xyz/openbmc_project/Network/meson.build
index b7e6641..eb7c63d 100644
--- a/gen/xyz/openbmc_project/Network/meson.build
+++ b/gen/xyz/openbmc_project/Network/meson.build
@@ -76,6 +76,21 @@ generated_others += custom_target(
     ],
 )
 
+subdir('FirewallConfiguration')
+generated_others += custom_target(
+    'xyz/openbmc_project/Network/FirewallConfiguration__markdown'.underscorify(),
+    input: [ '../../../../yaml/xyz/openbmc_project/Network/FirewallConfiguration.interface.yaml',  ],
+    output: [ 'FirewallConfiguration.md' ],
+    depend_files: sdbusplusplus_depfiles,
+    command: [
+        sdbuspp_gen_meson_prog, '--command', 'markdown',
+        '--output', meson.current_build_dir(),
+        '--tool', sdbusplusplus_prog,
+        '--directory', meson.current_source_dir() / '../../../../yaml',
+        'xyz/openbmc_project/Network/FirewallConfiguration',
+    ],
+)
+
 subdir('MACAddress')
 generated_others += custom_target(
     'xyz/openbmc_project/Network/MACAddress__markdown'.underscorify(),
diff --git a/yaml/xyz/openbmc_project/Network/FirewallConfiguration.interface.yaml b/yaml/xyz/openbmc_project/Network/FirewallConfiguration.interface.yaml
new file mode 100644
index 0000000..4ce2545
--- /dev/null
+++ b/yaml/xyz/openbmc_project/Network/FirewallConfiguration.interface.yaml
@@ -0,0 +1,108 @@
+description: >
+    This is manipulate firewall rules
+
+enumerations:
+      - name: Protocol
+        values:
+            - name: TCP
+              description: >
+                    Define the rules over TCP
+            - name: UDP
+              description: >
+                    Define the rules over UDP
+            - name: ICMP
+              description: >
+                    Define the rules over ICMP
+            - name: ALL
+              description: >
+                    Define the rules over TCP, UDP and ICMP
+            - name: UNSPECIFIED
+              description: >
+                    Define the rules without network protocol
+      - name: Target
+        values:
+            - name: ACCEPT
+              description: >
+                    Accept packets if the content fit the rule
+            - name: DROP
+              description: >
+                    Drop packets if the content fit the rule
+      - name: IP
+        values:
+            - name: IPV4
+            - name: IPV6
+            - name: BOTH
+
+methods:
+      - name: AddRule
+        description: >
+              Add the rule with incoming parameters
+        parameters:
+            - name: Target
+              type: enum[self.Target]
+            - name: Control
+              type: byte
+            - name: Protocol
+              type: enum[self.Protocol]
+            - name: StartIPAddress
+              type: string
+            - name: EndIPAddress
+              type: string
+            - name: StartPort
+              type: uint16
+            - name: EndPort
+              type: uint16
+            - name: MACAddress
+              type: string
+            - name: StartTime
+              type: string
+            - name: Stop
+              type: string
+        returns:
+            - name: result
+              type: int16
+      - name: DelRule
+        description: >
+              Delete the rule with incoming parameters
+        parameters:
+            - name: Target
+              type: enum[self.Target]
+            - name: Control
+              type: byte
+            - name: Protocol
+              type: enum[self.Protocol]
+            - name: StartIPAddress
+              type: string
+            - name: EndIPAddress
+              type: string
+            - name: StartPort
+              type: uint16
+            - name: EndPort
+              type: uint16
+            - name: MACAddress
+              type: string
+            - name: StartTime
+              type: string
+            - name: StopTime
+              type: string
+        returns:
+            - name: Result
+              type: int16
+      - name: FlushAll
+        description: >
+              Delete all the rules according to IPv4, IPv6 or both
+        parameters:
+            - name: IP
+              type: enum[self.IP]
+        returns:
+            - name: result
+              type: int16
+      - name: GetRules
+        description: >
+              Get all the rules
+        parameters:
+            - name: IP
+              type: enum[self.IP]
+        returns:
+            - name: Rules
+              type: array[struct[boolean, enum[self.Target], byte, enum[self.Protocol], string, string, uint16, uint16, string, string, string]]
\ No newline at end of file
-- 
2.25.1

