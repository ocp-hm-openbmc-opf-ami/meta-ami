From 8b3f0f0fb9b5ab83e464c9841dc20c0c2952714f Mon Sep 17 00:00:00 2001
From: pandiarajt <pandiarajt@ami.com>
Date: Thu, 29 Feb 2024 18:35:40 +0530
Subject: [PATCH 163/163] Added changes for snmp binding variable

---
 src/snmp_trap.cpp | 22 +++++++++++++++++-----
 1 file changed, 17 insertions(+), 5 deletions(-)

diff --git a/src/snmp_trap.cpp b/src/snmp_trap.cpp
index f7a4685..20793d9 100644
--- a/src/snmp_trap.cpp
+++ b/src/snmp_trap.cpp
@@ -1,5 +1,5 @@
 #include "snmp_trap.hpp"
-
+#include <iostream>
 #include <phosphor-logging/elog-errors.hpp>
 #include <phosphor-logging/elog.hpp>
 #include <phosphor-logging/lg2.hpp>
@@ -20,6 +20,17 @@ using InternalFailure =
 
 static constexpr auto entry = "xyz.openbmc_project.Logging.Entry";
 
+std::string timestampToFormattedString(std::time_t timestamp) {
+    std::tm localTime;
+    localtime_r(&timestamp, &localTime); // Convert timestamp to local time
+
+    char buffer[100];
+    std::strftime(buffer, sizeof(buffer), "%a %b %d %H:%M:%S %Z %Y", &localTime);
+
+    return buffer;
+}
+
+
 void ErrorTrap::trap(sdbusplus::message_t& msg) const
 {
     sdbusplus::message::object_path path;
@@ -34,11 +45,12 @@ void ErrorTrap::trap(sdbusplus::message_t& msg) const
     auto& propMap = it->second;
     auto errorID = std::get<uint32_t>(propMap.at("Id"));
     auto timestamp = std::get<uint64_t>(propMap.at("Timestamp"));
-    auto sev = std::get<Entry::Level>(propMap.at("Severity"));
-    auto isev = static_cast<uint8_t>(sev);
+    auto sev = std::get<std::string>(propMap.at("Severity"));
     auto message = std::get<std::string>(propMap.at("Message"));
     auto additionalData =
         std::get<std::vector<std::string>>(propMap.at("AdditionalData"));
+
+    std::string EventGenerateTime = timestampToFormattedString(timestamp);
     for (auto& s : additionalData)
     {
         message.append(" ");
@@ -46,14 +58,14 @@ void ErrorTrap::trap(sdbusplus::message_t& msg) const
     }
     try
     {
-        sendTrap<OBMCErrorNotification>(errorID, timestamp, isev, message);
+        sendTrap<OBMCErrorNotification>(errorID, EventGenerateTime, sev, message);
     }
     catch (const InternalFailure& e)
     {
         lg2::error(
             "Failed to send SNMP trap: {ERROR}, ERROR_ID = {EID}, TIMESTAMP = {TSP}, SEVERITY = {SEVERITY}, MESSAGE = {MSG}",
             "ERROR", e, "EID", errorID, "TSP", timestamp, "SEVERITY",
-            convertForMessage(sev), "MSG", message);
+             sev , "MSG", message);
     }
 }
 } // namespace monitoring
-- 
2.34.1

