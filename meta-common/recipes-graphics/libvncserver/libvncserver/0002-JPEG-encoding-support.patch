From 82ff1616a97509d400b6ef588c31a678e72b71e3 Mon Sep 17 00:00:00 2001
From: Dhineshkumar M <mdhineshkumar@ami.com>
Date: Tue, 12 Dec 2023 19:57:44 +0530
Subject: [PATCH 2/2] JPEG encoding support

New feature: Added new encoding JPEG(21) support in libvncserver for RealVNC & JViewer clients.

Signed-off-by: Dhineshkumar M <mdhineshkumar@ami.com>

%% original patch: 0002-JPEG-encoding-support.patch

Updated parallel session support for JPEG encoding client.

Signed-off-by: Mohammed Javith Akthar M <mohammedjavitham@ami.com>
---
 include/rfb/rfb.h            |  1 +
 include/rfb/rfbproto.h       |  1 +
 src/libvncserver/rfbserver.c | 16 +++++++++++-----
 src/libvncserver/stats.c     |  1 +
 src/libvncserver/tight.c     | 30 +++++++++++++++++-------------
 5 files changed, 31 insertions(+), 18 deletions(-)

diff --git a/include/rfb/rfb.h b/include/rfb/rfb.h
index ecbfe43d..bb264b17 100644
--- a/include/rfb/rfb.h
+++ b/include/rfb/rfb.h
@@ -707,6 +707,7 @@ typedef struct _rfbClientRec {
     int tightPngDstDataLen;
 #endif
 #endif
+    int tightEncodingSupport; /* RealVNC JPEG Support */
 } rfbClientRec, *rfbClientPtr;
 
 /**
diff --git a/include/rfb/rfbproto.h b/include/rfb/rfbproto.h
index ebcd303c..79e1fd48 100644
--- a/include/rfb/rfbproto.h
+++ b/include/rfb/rfbproto.h
@@ -459,6 +459,7 @@ typedef struct {
 #define rfbEncodingTRLE 15
 #define rfbEncodingZRLE 16
 #define rfbEncodingZYWRLE 17
+#define rfbEncodingJPEG 21 /* RealVNC JPEG Support */
 
 #define rfbEncodingH264               0x48323634
 
diff --git a/src/libvncserver/rfbserver.c b/src/libvncserver/rfbserver.c
index a80fd1ae..5cb36a4a 100644
--- a/src/libvncserver/rfbserver.c
+++ b/src/libvncserver/rfbserver.c
@@ -448,6 +448,7 @@ rfbNewTCPOrUDPClient(rfbScreenInfoPtr rfbScreen,
       cl->useExtDesktopSize = FALSE;
       cl->requestedDesktopSizeChange = 0;
       cl->lastDesktopSizeChangeError = 0;
+      cl->tightEncodingSupport = FALSE; /* RealVNC JPEG Support */
 
 #ifdef LIBVNCSERVER_HAVE_LIBZ
       cl->compStreamInited = FALSE;
@@ -1048,6 +1049,7 @@ rfbSendSupportedEncodings(rfbClientPtr cl)
 #endif
 #ifdef LIBVNCSERVER_HAVE_LIBJPEG
 	rfbEncodingTight,
+       rfbEncodingJPEG, /* RealVNC JPEG Support */
 #endif
 #ifdef LIBVNCSERVER_HAVE_LIBPNG
 	rfbEncodingTightPng,
@@ -2335,7 +2337,7 @@ rfbProcessClientNormalMessage(rfbClientPtr cl)
 #endif
 #endif
 
-
+        cl->tightEncodingSupport = FALSE; /* RealVNC JPEG Support */
         for (i = 0; i < msg.se.nEncodings; i++) {
             if ((n = rfbReadExact(cl, (char *)&enc, 4)) <= 0) {
                 if (n != 0)
@@ -2344,6 +2346,9 @@ rfbProcessClientNormalMessage(rfbClientPtr cl)
                 return;
             }
             enc = Swap32IfLE(enc);
+            /* RealVNC JPEG Support */
+            if(rfbEncodingTight == enc)
+                cl->tightEncodingSupport = TRUE;
 
             switch (enc) {
 
@@ -2361,6 +2366,7 @@ rfbProcessClientNormalMessage(rfbClientPtr cl)
             case rfbEncodingZYWRLE:
 #ifdef LIBVNCSERVER_HAVE_LIBJPEG
 	    case rfbEncodingTight:
+        case rfbEncodingJPEG: /* RealVNC JPEG Support */
 #endif
 #endif
 #ifdef LIBVNCSERVER_HAVE_LIBPNG
@@ -3388,6 +3394,9 @@ rfbSendFramebufferUpdate(rfbClientPtr cl,
 	}
 	sraRgnReleaseIterator(i); i=NULL;
 #ifdef LIBVNCSERVER_HAVE_LIBJPEG
+    /* RealVNC JPEG Support */
+    } else if (cl->preferredEncoding == rfbEncodingJPEG) {
+    nUpdateRegionRects = 0;
     } else if (cl->preferredEncoding == rfbEncodingTight) {
 	nUpdateRegionRects = 0;
 
@@ -3449,6 +3458,7 @@ rfbSendFramebufferUpdate(rfbClientPtr cl,
 #ifdef LIBVNCSERVER_HAVE_LIBJPEG
 	   /* Tight encoding counts the rectangles differently */
 	   && cl->preferredEncoding != rfbEncodingTight
+          && cl->preferredEncoding != rfbEncodingJPEG /* RealVNC JPEG Support */
 #endif
 #endif
 #ifdef LIBVNCSERVER_HAVE_LIBPNG
@@ -3575,7 +3585,6 @@ rfbSendFramebufferUpdate(rfbClientPtr cl,
 updateFailed:
 	result = FALSE;
     }
-
     if (!cl->enableCursorShapeUpdates) {
       rfbHideCursor(cl);
     }
@@ -3907,7 +3916,6 @@ rfbSendUpdateBuf(rfbClientPtr cl)
         rfbCloseClient(cl);
         return FALSE;
     }
-
     cl->ublen = 0;
     return TRUE;
 }
@@ -4169,5 +4177,3 @@ rfbProcessUDPInput(rfbScreenInfoPtr rfbScreen)
 	rfbDisconnectUDPSock(rfbScreen);
     }
 }
-
-
diff --git a/src/libvncserver/stats.c b/src/libvncserver/stats.c
index 8af04e3f..45de4faa 100644
--- a/src/libvncserver/stats.c
+++ b/src/libvncserver/stats.c
@@ -101,6 +101,7 @@ char *encodingName(uint32_t type, char *buf, int len) {
     case rfbEncodingHextile:            snprintf(buf, len, "hextile");     break;
     case rfbEncodingZlib:               snprintf(buf, len, "zlib");        break;
     case rfbEncodingTight:              snprintf(buf, len, "tight");       break;
+    case rfbEncodingJPEG:               snprintf(buf, len, "JPEG");        break; /* RealVNC JPEG Support */
     case rfbEncodingTightPng:           snprintf(buf, len, "tightPng");    break;
     case rfbEncodingZlibHex:            snprintf(buf, len, "zlibhex");     break;
     case rfbEncodingUltra:              snprintf(buf, len, "ultra");       break;
diff --git a/src/libvncserver/tight.c b/src/libvncserver/tight.c
index 2dcf1ab8..a0eb128f 100644
--- a/src/libvncserver/tight.c
+++ b/src/libvncserver/tight.c
@@ -737,8 +737,9 @@ rfbSendTightHeader(rfbClientPtr cl,
                 int h)
 {
     rfbFramebufferUpdateRectHeader rect;
-
-    if (cl->ublen + sz_rfbFramebufferUpdateRectHeader > UPDATE_BUF_SIZE) {
+    /* RealVNC JPEG Support */
+    int len = (cl->tightEncodingSupport ? sz_rfbFramebufferUpdateRectHeader : 12);
+    if (cl->ublen + len > UPDATE_BUF_SIZE) {
         if (!rfbSendUpdateBuf(cl))
             return FALSE;
     }
@@ -750,12 +751,12 @@ rfbSendTightHeader(rfbClientPtr cl,
     rect.encoding = Swap32IfLE(cl->tightEncoding);
 
     memcpy(&cl->updateBuf[cl->ublen], (char *)&rect,
-           sz_rfbFramebufferUpdateRectHeader);
-    cl->ublen += sz_rfbFramebufferUpdateRectHeader;
+           len);
+    cl->ublen += len;
 
     rfbStatRecordEncodingSent(cl, cl->tightEncoding,
-                              sz_rfbFramebufferUpdateRectHeader,
-                              sz_rfbFramebufferUpdateRectHeader
+                              len,
+                              len
                                   + w * (cl->format.bitsPerPixel / 8) * h);
 
     return TRUE;
@@ -1057,16 +1058,19 @@ rfbBool rfbSendCompressedDataTight(rfbClientPtr cl, char *buf,
 {
     int i, portionLen;
 
-    cl->updateBuf[cl->ublen++] = compressedLen & 0x7F;
-    rfbStatRecordEncodingSentAdd(cl, cl->tightEncoding, 1);
-    if (compressedLen > 0x7F) {
-        cl->updateBuf[cl->ublen-1] |= 0x80;
-        cl->updateBuf[cl->ublen++] = compressedLen >> 7 & 0x7F;
+    if (cl->tightEncodingSupport) /* RealVNC JPEG Support */
+    {
+        cl->updateBuf[cl->ublen++] = compressedLen & 0x7F;
         rfbStatRecordEncodingSentAdd(cl, cl->tightEncoding, 1);
-        if (compressedLen > 0x3FFF) {
+        if (compressedLen > 0x7F) {
             cl->updateBuf[cl->ublen-1] |= 0x80;
-            cl->updateBuf[cl->ublen++] = compressedLen >> 14 & 0xFF;
+            cl->updateBuf[cl->ublen++] = compressedLen >> 7 & 0x7F;
             rfbStatRecordEncodingSentAdd(cl, cl->tightEncoding, 1);
+            if (compressedLen > 0x3FFF) {
+                cl->updateBuf[cl->ublen-1] |= 0x80;
+                cl->updateBuf[cl->ublen++] = compressedLen >> 14 & 0xFF;
+                rfbStatRecordEncodingSentAdd(cl, cl->tightEncoding, 1);
+            }
         }
     }
 
-- 
2.34.1

