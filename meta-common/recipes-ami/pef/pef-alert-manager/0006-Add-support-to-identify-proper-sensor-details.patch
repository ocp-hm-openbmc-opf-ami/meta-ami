From bef59eda9e271206753955f36ee2d1f538dec179 Mon Sep 17 00:00:00 2001
From: vipinc <vipinc@ami.com>
Date: Tue, 14 Nov 2023 11:45:23 +0530
Subject: [PATCH 1/1] Add support to identify proper sensor details

When a SEL event is logged via Add SEL entry command, only if the
sensor is configured to the system, the sensorType will be properly
Described in Alert Description.This patch add support to properly
log any sensor event even if its not configured.

Tested in Ast2600EVB and Intel Archrecity Platform:
//before fix BMC log from Ast2600EVB
1. Triggger a Event for OS Critical Sensor
ipmitool raw 0x0a 0x44 0x00 0x00 0x02 0x00 0x00 0x00 0x00 0x41 0x0 0x04 0x20 0x0 0x6f 0x01 0xff 0xff
//SMTP Mail Alert data
Sensor Name : BMC_Temp
Sensor Type : temperature
Severity    :
Description : OSCriticalStop Sensor Run-time Critical Stop Event Detected
msgubuntu@smtp:~/Maildir/new$

//After Fix:
1. Triggger a Event for OS Critical Sensor
ipmitool raw 0x0a 0x44 0x00 0x00 0x02 0x00 0x00 0x00 0x00 0x41 0x0 0x04 0x20 0x0 0x6f 0x01 0xff 0xff
//SMTP Mail Alert data
Date: Sat, 11 Nov 2023 15:33:44 +0000
From: osp@ami.com
Message-Id: <1699716824.663037.313@intel-obmc>
To: msgubuntu@coreqa.com
Subject: Alert from intel-obmc
Sensor Name : Unknown
Sensor Type : os
Severity    : Information
Description : OSCriticalStop Sensor Run-time Critical Stop Event Detected

Jira link: https://oneami.atlassian.net/browse/OT-2021

Signed-off-by: vipinc <vipinc@ami.com>
---
 include/sdrutils.hpp | 49 ++++++++++++++++++++++++++++++++++++++++++++
 src/pef_action.cpp   | 34 +++++++-----------------------
 2 files changed, 56 insertions(+), 27 deletions(-)

diff --git a/include/sdrutils.hpp b/include/sdrutils.hpp
index 65be4e3..25ffc67 100644
--- a/include/sdrutils.hpp
+++ b/include/sdrutils.hpp
@@ -171,6 +171,15 @@ enum class SensorTypeCodes : uint8_t
     voltage = 0x2,
     current = 0x3,
     fan = 0x4,
+    processor = 0x07,
+    powersupply = 0x08,
+    powerunit = 0x09,
+    systemEvent = 0x12,
+    osBootStatus = 0x1F,
+    os = 0x20,
+    acpisystem = 0x22,
+    watchdog2 = 0x23,
+    battery = 0x29,
     other = 0xB,
 };
 
@@ -180,6 +189,15 @@ const static boost::container::flat_map<const char*, SensorTypeCodes, CmpStr>
                  {"current", SensorTypeCodes::current},
                  {"fan_tach", SensorTypeCodes::fan},
                  {"fan_pwm", SensorTypeCodes::fan},
+                 {"cpu", SensorTypeCodes::processor},
+                 {"powersupply", SensorTypeCodes::powersupply},
+                 {"powerunit", SensorTypeCodes::powerunit},
+                 {"system_event", SensorTypeCodes::systemEvent},
+                 {"os_boot_status", SensorTypeCodes::osBootStatus},
+                 {"os", SensorTypeCodes::os},
+                 {"acpisystem", SensorTypeCodes::acpisystem},
+                 {"watchdog", SensorTypeCodes::watchdog2},
+                 {"battery", SensorTypeCodes::battery},
                  {"power", SensorTypeCodes::other}}};
 
 inline static std::string getSensorTypeStringFromPath(const std::string& path)
@@ -259,3 +277,34 @@ inline static std::string getPathFromSensorNumber(uint8_t sensorNum)
         return std::string();
     }
 }
+
+inline static std::string retrieveSensorTypeFromPath(std::string& path,
+                                                     const uint8_t sensorType)
+{
+    uint8_t typeFromPath = getSensorTypeFromPath(path);
+    if (typeFromPath != sensorType)
+    {
+        path.clear(); // Assume the sensor's D-Bus object is not availalbe, if
+                      // the sensor type is not matching
+
+        for (const auto& itr : sensorTypes)
+        {
+            if (static_cast<uint8_t>(itr.second) == sensorType)
+            {
+                return itr.first;
+            }
+        }
+        return "Unknown";
+    }
+    return getSensorTypeStringFromPath(path);
+}
+
+inline static std::string getSensorNameFromPath(const std::string& path)
+{
+    if (!path.empty())
+    {
+        std::size_t found = path.find_last_of("/\\");
+        return path.substr(found + 1);
+    }
+    return "Unknown";
+}
diff --git a/src/pef_action.cpp b/src/pef_action.cpp
index d05e3f7..e4b27f4 100644
--- a/src/pef_action.cpp
+++ b/src/pef_action.cpp
@@ -110,23 +110,13 @@ static bool checkSampleEvent(struct EventMsgData* eveMsgData)
 
 static uint16_t sendSNMPAlert(struct EventMsgData* eventMsg)
 {
-    const std::string sensorPath = getPathFromSensorNumber(eventMsg->sensorNum);
-    std::string sensorType = getSensorTypeStringFromPath(sensorPath.c_str());
-    std::string sensorName;
+    std::string sensorPath = getPathFromSensorNumber(eventMsg->sensorNum);
+    const std::string sensorType =
+        retrieveSensorTypeFromPath(sensorPath, eventMsg->sensorType);
+    const std::string sensorName = getSensorNameFromPath(sensorPath);
     std::string severity;
     std::string direction = "Asserted";
     uint8_t sensorEventType = (eventMsg->eventType & EVENT_TYPE);
-    std::size_t found = sensorPath.find_last_of("/\\");
-    sensorName = sensorPath.substr(found + 1);
-    if (sensorName.empty())
-    {
-        sensorName = "unknown sensorName";
-    }
-    if (sensorType.empty())
-    {
-        sensorType = "unkown sensorType";
-    }
-
     uint8_t eventData = (eventMsg->eventData[0] & EVENT_STATE);
     bool assert = (eventMsg->eventType & EVENT_DIRECTION) ? false : true;
     if (sensorEventType != static_cast<uint8_t>(EventTypeCode::sensor_specific))
@@ -199,21 +189,11 @@ static uint16_t sendSmtpAlert(std::string rec, struct EventMsgData* eveMsg,
                               uint8_t eveLog)
 {
     std::string sensorPath = getPathFromSensorNumber(eveMsg->sensorNum);
-    std::string sensorType = getSensorTypeStringFromPath(sensorPath.c_str());
-    std::string sensorName;
+    const std::string sensorType =
+        retrieveSensorTypeFromPath(sensorPath, eveMsg->sensorType);
+    const std::string sensorName = getSensorNameFromPath(sensorPath);
     std::string severity;
     uint8_t sensorEveType = (eveMsg->eventType & 0x7f);
-    std::size_t found = sensorPath.find_last_of("/\\");
-    sensorName = sensorPath.substr(found + 1);
-    if (sensorName.empty())
-    {
-        sensorName = "unknown sensorName";
-    }
-    if (sensorType.empty())
-    {
-        sensorType = "unKnown sensorType";
-    }
-
     uint8_t evnDat = (eveMsg->eventData[0] & 0x0F);
     bool assert = (eveMsg->eventType & 0x80) ? false : true;
     if (sensorEveType != static_cast<uint8_t>(EventTypeCode::sensor_specific))
-- 
2.25.1

