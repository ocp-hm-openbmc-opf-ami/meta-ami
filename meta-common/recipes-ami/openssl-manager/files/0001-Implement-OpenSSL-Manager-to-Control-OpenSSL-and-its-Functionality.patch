From c48ac0150bf9c27591bd62d68756485d7c076e19 Mon Sep 17 00:00:00 2001
From: Ethan Wei <ethanwei@ami.com>
Date: Thu, 21 Mar 2024 17:47:18 -0700
Subject: [PATCH] Implement OpenSSL Manager to Control OpenSSL and its
 Functionality 	new file:   gen/meson.build 	new file:  
 gen/regenerate-meson 	new file:   gen/run-ci 	new file:  
 gen/xyz/meson.build 	new file:  
 gen/xyz/openbmc_project/OpenSSL/Manager/meson.build 	new file:  
 gen/xyz/openbmc_project/OpenSSL/meson.build 	new file:  
 gen/xyz/openbmc_project/meson.build 	new file:   meson.build 	new
 file:   meson_options.txt 	new file:   src/config_parser.cpp 	new
 file:   src/config_parser.hpp 	new file:   src/meson.build 	new file:  
 src/openssl-manager-main.cpp 	new file:   src/openssl-manager.cpp 	new
 file:   src/openssl-manager.hpp 	new file:  
 subprojects/googletest.wrap 	new file:  
 subprojects/phosphor-dbus-interfaces.wrap 	new file:  
 subprojects/phosphor-logging.wrap 	new file:   subprojects/sdbusplus.wrap
 	new file:   subprojects/sdeventplus.wrap 	new file:  
 subprojects/stdplus.wrap 	new file:  
 xyz.openbmc_project.OpenSSL.service.in 	new file:  
 yaml/xyz/openbmc_project/OpenSSL/Manager.interface.yaml

---
 gen/meson.build                               |  15 +
 gen/regenerate-meson                          |   4 +
 gen/run-ci                                    |  15 +
 gen/xyz/meson.build                           |   2 +
 .../OpenSSL/Manager/meson.build               |  14 +
 gen/xyz/openbmc_project/OpenSSL/meson.build   |   2 +
 gen/xyz/openbmc_project/meson.build           |   2 +
 meson.build                                   |  77 ++++
 meson_options.txt                             |   3 +
 src/config_parser.cpp                         | 367 ++++++++++++++++++
 src/config_parser.hpp                         | 216 +++++++++++
 src/meson.build                               |  46 +++
 src/openssl-manager-main.cpp                  |  33 ++
 src/openssl-manager.cpp                       |  87 +++++
 src/openssl-manager.hpp                       |  38 ++
 subprojects/googletest.wrap                   |   3 +
 subprojects/phosphor-dbus-interfaces.wrap     |   6 +
 subprojects/phosphor-logging.wrap             |   6 +
 subprojects/sdbusplus.wrap                    |   7 +
 subprojects/sdeventplus.wrap                  |   6 +
 subprojects/stdplus.wrap                      |   8 +
 xyz.openbmc_project.OpenSSL.service.in        |  12 +
 .../OpenSSL/Manager.interface.yaml            |  11 +
 23 files changed, 980 insertions(+)
 create mode 100644 gen/meson.build
 create mode 100755 gen/regenerate-meson
 create mode 100755 gen/run-ci
 create mode 100644 gen/xyz/meson.build
 create mode 100644 gen/xyz/openbmc_project/OpenSSL/Manager/meson.build
 create mode 100644 gen/xyz/openbmc_project/OpenSSL/meson.build
 create mode 100644 gen/xyz/openbmc_project/meson.build
 create mode 100644 meson.build
 create mode 100644 meson_options.txt
 create mode 100644 src/config_parser.cpp
 create mode 100644 src/config_parser.hpp
 create mode 100644 src/meson.build
 create mode 100644 src/openssl-manager-main.cpp
 create mode 100644 src/openssl-manager.cpp
 create mode 100644 src/openssl-manager.hpp
 create mode 100644 subprojects/googletest.wrap
 create mode 100644 subprojects/phosphor-dbus-interfaces.wrap
 create mode 100644 subprojects/phosphor-logging.wrap
 create mode 100644 subprojects/sdbusplus.wrap
 create mode 100644 subprojects/sdeventplus.wrap
 create mode 100644 subprojects/stdplus.wrap
 create mode 100644 xyz.openbmc_project.OpenSSL.service.in
 create mode 100644 yaml/xyz/openbmc_project/OpenSSL/Manager.interface.yaml

diff --git a/gen/meson.build b/gen/meson.build
new file mode 100644
index 0000000..b550c79
--- /dev/null
+++ b/gen/meson.build
@@ -0,0 +1,15 @@
+# Generated file; do not modify.
+sdbuspp_gen_meson_ver = run_command(
+    sdbuspp_gen_meson_prog,
+    '--version',
+    check: true,
+).stdout().strip().split('\n')[0]
+
+if sdbuspp_gen_meson_ver != 'sdbus++-gen-meson version 7'
+    warning('Generated meson files from wrong version of sdbus++-gen-meson.')
+    warning(
+        'Expected "sdbus++-gen-meson version 7", got:',
+        sdbuspp_gen_meson_ver
+    )
+endif
+
diff --git a/gen/regenerate-meson b/gen/regenerate-meson
new file mode 100755
index 0000000..e2a02c4
--- /dev/null
+++ b/gen/regenerate-meson
@@ -0,0 +1,4 @@
+#!/bin/bash
+cd "$(dirname "$0")" || exit
+export PATH="$PWD/../subprojects/sdbusplus/tools:$PATH"
+exec sdbus++-gen-meson --command meson --directory ../yaml --output .
diff --git a/gen/run-ci b/gen/run-ci
new file mode 100755
index 0000000..874b3a3
--- /dev/null
+++ b/gen/run-ci
@@ -0,0 +1,15 @@
+#!/bin/bash
+cd "$(dirname "$0")" || exit
+./regenerate-meson || exit
+rc=0
+git --no-pager diff --exit-code -- . || rc=$?
+untracked="$(git ls-files --others --exclude-standard -- .)" || rc=$?
+if [ -n "$untracked" ]; then
+    echo "Untracked files:" >&2
+    echo "$untracked" >&2
+    rc=1
+fi
+if (( rc != 0 )); then
+    echo "Generated meson files differ from expected values" >&2
+    exit 1
+fi
diff --git a/gen/xyz/meson.build b/gen/xyz/meson.build
new file mode 100644
index 0000000..de735be
--- /dev/null
+++ b/gen/xyz/meson.build
@@ -0,0 +1,2 @@
+# Generated file; do not modify.
+subdir('openbmc_project')
\ No newline at end of file
diff --git a/gen/xyz/openbmc_project/OpenSSL/Manager/meson.build b/gen/xyz/openbmc_project/OpenSSL/Manager/meson.build
new file mode 100644
index 0000000..abc2b88
--- /dev/null
+++ b/gen/xyz/openbmc_project/OpenSSL/Manager/meson.build
@@ -0,0 +1,14 @@
+# Generated file; do not modify.
+generated_sources += custom_target(
+    'xyz/openbmc_project/OpenSSL/Manager__cpp'.underscorify(),
+    input: [ '../../../../../yaml/xyz/openbmc_project/OpenSSL/Manager.interface.yaml',  ],
+    output: [ 'common.hpp', 'server.cpp', 'server.hpp', 'aserver.hpp', 'client.hpp',  ],
+    depend_files: sdbusplusplus_depfiles,
+    command: [
+        sdbuspp_gen_meson_prog, '--command', 'cpp',
+        '--output', meson.current_build_dir(),
+        '--tool', sdbusplusplus_prog,
+        '--directory', meson.current_source_dir() / '../../../../../yaml',
+        'xyz/openbmc_project/OpenSSL/Manager',
+    ],
+)
\ No newline at end of file
diff --git a/gen/xyz/openbmc_project/OpenSSL/meson.build b/gen/xyz/openbmc_project/OpenSSL/meson.build
new file mode 100644
index 0000000..74528ab
--- /dev/null
+++ b/gen/xyz/openbmc_project/OpenSSL/meson.build
@@ -0,0 +1,2 @@
+# Generated file; do not modify.
+subdir('Manager')
\ No newline at end of file
diff --git a/gen/xyz/openbmc_project/meson.build b/gen/xyz/openbmc_project/meson.build
new file mode 100644
index 0000000..b0629fa
--- /dev/null
+++ b/gen/xyz/openbmc_project/meson.build
@@ -0,0 +1,2 @@
+# Generated file; do not modify.
+subdir('OpenSSL')
\ No newline at end of file
diff --git a/meson.build b/meson.build
new file mode 100644
index 0000000..d3d939e
--- /dev/null
+++ b/meson.build
@@ -0,0 +1,77 @@
+project(
+  'openssl-manager',
+  'cpp',
+  version: '0.1',
+  meson_version: '>=0.58.0',
+  default_options: [
+    'warning_level=3',
+    'cpp_std=c++20',
+  ])
+
+default_busname = 'xyz.openbmc_project.OpenSSL'
+
+conf_data = configuration_data()
+conf_data.set10('AMI_OPENSSL_FIPS_SUPPORT', get_option('support-openssl-fips'))
+conf_data.set10('AMI_DEAULT_ENABLE_OPENSSL_FIPS', get_option('default-enable-openssl-fips'))
+
+
+sdbusplus_dep = dependency('sdbusplus')
+sdbusplusplus_prog = find_program('sdbus++', native: true)
+sdbuspp_gen_meson_prog = find_program('sdbus++-gen-meson', native: true)
+sdbusplusplus_depfiles = files()
+if sdbusplus_dep.type_name() == 'internal'
+  sdbusplusplus_depfiles = subproject('sdbusplus').get_variable('sdbusplusplus_depfiles')
+endif
+
+generated_sources = []
+generated_others = []
+yaml_sources = []
+subdir('gen')
+subdir('gen/xyz')
+openssl_dbus_includes = include_directories('gen')
+
+phosphor_dbus_interfaces_dep = dependency('phosphor-dbus-interfaces')
+
+openssl_dbus_deps = [
+  phosphor_dbus_interfaces_dep,
+  sdbusplus_dep,
+]
+
+openssl_dbus_lib = static_library(
+  'openssl_dbus',
+  generated_sources,
+  implicit_include_directories: false,
+  include_directories: openssl_dbus_includes,
+  dependencies: openssl_dbus_deps)
+
+generated_files_headers = []
+foreach s : generated_sources
+    foreach f : s.to_list()
+        p = f.full_path()
+        message(p)
+        if p.endswith('.hpp')
+            generated_files_headers += f
+        endif
+    endforeach
+endforeach
+
+
+
+openssl_dbus_dep = declare_dependency(
+  sources: generated_files_headers,
+  include_directories: openssl_dbus_includes,
+  link_with: openssl_dbus_lib,
+  dependencies: openssl_dbus_deps)
+
+subdir('src')
+
+configure_file(
+  input: 'xyz.openbmc_project.OpenSSL.service.in',
+  output: 'xyz.openbmc_project.OpenSSL.service',
+  configuration: {
+    'SYSTEMD_TARGET': 'multi-user.target',
+    'DEFAULT_BUSNAME': default_busname,
+  },
+  install: true,
+  install_dir: dependency('systemd').get_variable(
+    pkgconfig: 'systemdsystemunitdir'))
diff --git a/meson_options.txt b/meson_options.txt
new file mode 100644
index 0000000..9582b77
--- /dev/null
+++ b/meson_options.txt
@@ -0,0 +1,3 @@
+option('tests', type: 'feature', description: 'Build tests')
+option('support-openssl-fips', type: 'boolean', description: 'Support OpenSSL FIPS or not')
+option('default-enable-openssl-fips', type: 'boolean', description: 'Enable OpenSSL FIPS mode by default or not')
diff --git a/src/config_parser.cpp b/src/config_parser.cpp
new file mode 100644
index 0000000..32e24e4
--- /dev/null
+++ b/src/config_parser.cpp
@@ -0,0 +1,367 @@
+#include "config_parser.hpp"
+
+#include <stdplus/exception.hpp>
+#include <stdplus/fd/atomic.hpp>
+#include <stdplus/fd/create.hpp>
+#include <stdplus/fd/fmt.hpp>
+#include <stdplus/fd/line.hpp>
+#include <stdplus/str/cat.hpp>
+
+#include <format>
+#include <functional>
+#include <iterator>
+#include <stdexcept>
+#include <string>
+#include <utility>
+#include <charconv>
+
+namespace config
+{
+
+using std::literals::string_view_literals::operator""sv;
+
+bool icaseeq(std::string_view in, std::string_view expected) noexcept
+{
+    return std::equal(in.begin(), in.end(), expected.begin(), expected.end(),
+                      [](auto a, auto b) { return tolower(a) == b; });
+}
+
+std::optional<bool> parseBool(std::string_view in) noexcept
+{
+    if (in == "1"sv || icaseeq(in, "yes"sv) || icaseeq(in, "y"sv) ||
+        icaseeq(in, "true"sv) || icaseeq(in, "t"sv) || icaseeq(in, "on"sv))
+    {
+        return true;
+    }
+    if (in == "0"sv || icaseeq(in, "no"sv) || icaseeq(in, "n"sv) ||
+        icaseeq(in, "false"sv) || icaseeq(in, "f"sv) || icaseeq(in, "off"sv))
+    {
+        return false;
+    }
+    return std::nullopt;
+}
+
+std::optional<int> parseInt(std::string_view in) noexcept {
+    int retVal = 0;
+    auto [ptr, ec] = std::from_chars(in.data(), in.data() + in.size(), retVal);
+    if (ec != std::errc{}) {
+        return std::nullopt;
+    }
+
+    return retVal;
+}
+
+fs::path pathForIntfConf(const fs::path& dir, std::string_view intf)
+{
+    return dir / stdplus::strCat("00-bmc-"sv, intf, ".network"sv);
+}
+
+fs::path pathForIntfDev(const fs::path& dir, std::string_view intf)
+{
+    return dir / stdplus::strCat(intf, ".netdev"sv);
+}
+
+fs::path pathForIntfInfo(const fs::path& dir, std::string_view intf)
+{
+    return dir / intf;
+}
+
+const std::string*
+    SectionMap::getLastValueString(std::string_view section,
+                                   std::string_view key) const noexcept
+{
+    auto sit = find(section);
+    if (sit == end())
+    {
+        return nullptr;
+    }
+    for (auto it = sit->second.rbegin(); it != sit->second.rend(); ++it)
+    {
+        auto kit = it->find(key);
+        if (kit == it->end() || kit->second.empty())
+        {
+            continue;
+        }
+        return &kit->second.back().get();
+    }
+    return nullptr;
+}
+
+std::tuple<ReturnCode, KeyValueMapstr>
+    Parser::getSectionstr(const std::string& section)
+{
+    auto it = sections.find(section);
+    if (it == sections.end())
+    {
+        KeyValueMapstr keyValues;
+        return std::make_tuple(ReturnCode::SECTION_NOT_FOUND,
+                               std::move(keyValues));
+    }
+
+    return std::make_tuple(ReturnCode::SUCCESS, it->second);
+}
+
+
+std::tuple<ReturnCode, ValueListstr> Parser::getValues(const std::string& section,
+                                                    const std::string& key)
+{
+    ValueListstr values;
+    KeyValueMapstr keyValues{};
+    auto rc = ReturnCode::SUCCESS;
+
+   std::tie(rc, keyValues) = getSectionstr(section);
+    if (rc != ReturnCode::SUCCESS)
+    {
+        return std::make_tuple(rc, std::move(values));
+    }
+
+   auto it = keyValues.find(key);
+    if (it == keyValues.end())
+    {
+        return std::make_tuple(ReturnCode::KEY_NOT_FOUND, std::move(values));
+    }
+
+   for (; it != keyValues.end() && key == it->first; it++)
+    {
+       values.push_back(it->second);
+    }
+
+   return std::make_tuple(ReturnCode::SUCCESS, std::move(values));
+}
+
+std::vector<std::string> SectionMap::getValueStrings(std::string_view section,
+                                                     std::string_view key) const
+{
+    return getValues(section, key,
+                     [](const Value& v) { return std::string(v); });
+}
+
+void KeyCheck::operator()(std::string_view s)
+{
+    for (auto c : s)
+    {
+        if (c == '\n' || c == '=')
+        {
+            throw std::invalid_argument(
+                stdplus::strCat("Invalid Config Key: "sv, s));
+        }
+    }
+}
+
+void SectionCheck::operator()(std::string_view s)
+{
+    for (auto c : s)
+    {
+        if (c == '\n' || c == ']')
+        {
+            throw std::invalid_argument(
+                stdplus::strCat("Invalid Config Section: "sv, s));
+        }
+    }
+}
+
+void ValueCheck::operator()(std::string_view s)
+{
+    for (auto c : s)
+    {
+        if (c == '\n')
+        {
+            throw std::invalid_argument(
+                stdplus::strCat("Invalid Config Value: "sv, s));
+        }
+    }
+}
+
+Parser::Parser(const fs::path& filename)
+{
+    setFile(filename);
+}
+
+constexpr bool isspace(char c) noexcept
+{
+    return c == ' ' || c == '\t';
+}
+
+constexpr bool iscomment(char c) noexcept
+{
+    return c == '#' || c == ';';
+}
+
+static void removePadding(std::string_view& str) noexcept
+{
+    size_t idx = str.size();
+    for (; idx > 0 && isspace(str[idx - 1]); idx--)
+        ;
+    str.remove_suffix(str.size() - idx);
+
+    idx = 0;
+    for (; idx < str.size() && isspace(str[idx]); idx++)
+        ;
+    str.remove_prefix(idx);
+}
+
+struct Parse
+{
+    std::reference_wrapper<const fs::path> filename;
+    SectionMap map;
+    KeyValuesMap* section;
+    std::vector<std::string> warnings;
+    size_t lineno;
+
+    inline Parse(const fs::path& filename) :
+        filename(filename), section(nullptr), lineno(0)
+    {}
+
+    void pumpSection(std::string_view line)
+    {
+        auto cpos = line.find(']');
+        if (cpos == line.npos)
+        {
+            warnings.emplace_back(std::format("{}:{}: Section missing ]",
+                                              filename.get().native(), lineno));
+        }
+        else
+        {
+            for (auto c : line.substr(cpos + 1))
+            {
+                if (!isspace(c))
+                {
+                    warnings.emplace_back(
+                        std::format("{}:{}: Characters outside section name",
+                                    filename.get().native(), lineno));
+                    break;
+                }
+            }
+        }
+        auto s = line.substr(0, cpos);
+        auto it = map.find(s);
+        if (it == map.end())
+        {
+            std::tie(it, std::ignore) = map.emplace(
+                Section(Section::unchecked(), s), KeyValuesMapList{});
+        }
+        section = &it->second.emplace_back();
+    }
+
+    void pumpKV(std::string_view line)
+    {
+        auto epos = line.find('=');
+        std::vector<std::string> new_warnings;
+        if (epos == line.npos)
+        {
+            new_warnings.emplace_back(std::format(
+                "{}:{}: KV missing `=`", filename.get().native(), lineno));
+        }
+        auto k = line.substr(0, epos);
+        removePadding(k);
+        if (section == nullptr)
+        {
+            new_warnings.emplace_back(
+                std::format("{}:{}: Key `{}` missing section",
+                            filename.get().native(), lineno, k));
+        }
+        if (!new_warnings.empty())
+        {
+            warnings.insert(warnings.end(),
+                            std::make_move_iterator(new_warnings.begin()),
+                            std::make_move_iterator(new_warnings.end()));
+            return;
+        }
+        auto v = line.substr(epos + 1);
+        removePadding(v);
+
+        auto it = section->find(k);
+        if (it == section->end())
+        {
+            std::tie(it, std::ignore) =
+                section->emplace(Key(Key::unchecked(), k), ValueList{});
+        }
+        it->second.emplace_back(Value::unchecked(), v);
+    }
+
+    void pump(std::string_view line)
+    {
+        lineno++;
+        for (size_t i = 0; i < line.size(); ++i)
+        {
+            auto c = line[i];
+            if (iscomment(c))
+            {
+                return;
+            }
+            else if (c == '[')
+            {
+                return pumpSection(line.substr(i + 1));
+            }
+            else if (!isspace(c))
+            {
+                return pumpKV(line.substr(i));
+            }
+        }
+    }
+};
+
+void Parser::setFile(const fs::path& filename)
+{
+    Parse parse(filename);
+
+    bool fileExists = true;
+    try
+    {
+        auto fd = stdplus::fd::open(filename.c_str(),
+                                    stdplus::fd::OpenAccess::ReadOnly);
+        stdplus::fd::LineReader reader(fd);
+        while (true)
+        {
+            parse.pump(*reader.readLine());
+        }
+    }
+    catch (const stdplus::exception::Eof&)
+    {}
+    catch (const std::system_error& e)
+    {
+        fileExists = false;
+        // TODO: Pass exceptions once callers can handle them
+        parse.warnings.emplace_back(
+            std::format("{}: Open error: {}", filename.native(), e.what()));
+    }
+
+    this->map = std::move(parse.map);
+    this->fileExists = fileExists;
+    this->filename = filename;
+    this->warnings = std::move(parse.warnings);
+}
+
+static void writeFileInt(const SectionMap& map, const fs::path& filename)
+{
+    stdplus::fd::AtomicWriter writer(filename, 0644);
+    stdplus::fd::FormatBuffer out(writer);
+    for (const auto& [section, maps] : map)
+    {
+        for (const auto& map : maps)
+        {
+            out.appends("["sv, section.get(), "]\n"sv);
+            for (const auto& [key, vals] : map)
+            {
+                for (const auto& val : vals)
+                {
+                    out.appends(key.get(), "="sv, val.get(), "\n"sv);
+                }
+            }
+        }
+    }
+    out.flush();
+    writer.commit();
+}
+
+void Parser::writeFile() const
+{
+    writeFileInt(map, filename);
+}
+
+void Parser::writeFile(const fs::path& filename)
+{
+    writeFileInt(map, filename);
+    this->filename = filename;
+}
+} // namespace config
\ No newline at end of file
diff --git a/src/config_parser.hpp b/src/config_parser.hpp
new file mode 100644
index 0000000..3d88b04
--- /dev/null
+++ b/src/config_parser.hpp
@@ -0,0 +1,216 @@
+#pragma once
+
+#include <filesystem>
+#include <functional>
+#include <optional>
+#include <string>
+#include <string_view>
+#include <unordered_map>
+#include <vector>
+#include <fstream>
+#include <map>
+
+
+namespace config
+{
+
+using Sectionstr= std::string;
+using KeyValueMapstr = std::multimap<std::string, std::string>;
+using ValueListstr = std::vector<std::string>;
+
+/** @brief Compare in (case insensitive) vs expected (sensitive) */
+bool icaseeq(std::string_view in, std::string_view expected) noexcept;
+/** @brief Turns a systemd bool string into a c++ bool */
+std::optional<bool> parseBool(std::string_view in) noexcept;
+std::optional<int> parseInt(std::string_view in) noexcept;
+
+namespace fs = std::filesystem;
+
+enum class ReturnCode
+{
+    SUCCESS = 0x0,
+    SECTION_NOT_FOUND = 0x1,
+    KEY_NOT_FOUND = 0x2,
+};
+
+fs::path pathForIntfConf(const fs::path& dir, std::string_view intf);
+fs::path pathForIntfDev(const fs::path& dir, std::string_view intf);
+fs::path pathForIntfInfo(const fs::path& dir, std::string_view intf);
+
+template <typename T, typename Check>
+class Checked
+{
+  public:
+    struct unchecked
+    {};
+
+    template <typename... Args>
+    constexpr Checked(Args&&... args) : t(conCheck(std::forward<Args>(args)...))
+    {}
+
+    template <typename... Args>
+    constexpr Checked(unchecked, Args&&... args) :
+        t(std::forward<Args>(args)...)
+    {}
+
+    constexpr const T& get() const noexcept
+    {
+        return t;
+    }
+
+    constexpr operator const T&() const noexcept
+    {
+        return t;
+    }
+
+    template <typename T2, typename Check2>
+    constexpr bool operator==(const Checked<T2, Check2>& rhs) const noexcept
+    {
+        static_assert(std::is_same_v<Check2, Check>);
+        return t == rhs.t;
+    }
+
+    constexpr bool operator==(const auto& rhs) const noexcept
+    {
+        return t == rhs;
+    }
+
+  private:
+    T t;
+
+    template <typename... Args>
+    static constexpr T conCheck(Args&&... args)
+    {
+        T t(std::forward<Args>(args)...);
+        Check{}(t);
+        return t;
+    }
+};
+
+struct KeyCheck
+{
+    void operator()(std::string_view s);
+};
+struct SectionCheck
+{
+    void operator()(std::string_view s);
+};
+struct ValueCheck
+{
+    void operator()(std::string_view s);
+};
+
+struct string_hash : public std::hash<std::string_view>
+{
+    using is_transparent = void;
+
+    template <typename T>
+    inline size_t operator()(const Checked<std::string, T>& t) const
+    {
+        return static_cast<const std::hash<std::string_view>&>(*this)(t.get());
+    }
+    template <typename T>
+    inline size_t operator()(const T& t) const
+    {
+        return static_cast<const std::hash<std::string_view>&>(*this)(t);
+    }
+};
+
+using Key = Checked<std::string, KeyCheck>;
+using Section = Checked<std::string, SectionCheck>;
+using Value = Checked<std::string, ValueCheck>;
+using ValueList = std::vector<Value>;
+using KeyValuesMap =
+    std::unordered_map<Key, ValueList, string_hash, std::equal_to<>>;
+using KeyValuesMapList = std::vector<KeyValuesMap>;
+using SectionMapInt =
+    std::unordered_map<Section, KeyValuesMapList, string_hash, std::equal_to<>>;
+
+class SectionMap : public SectionMapInt
+{
+  public:
+    const std::string* getLastValueString(std::string_view section,
+                                          std::string_view key) const noexcept;
+    inline auto getValues(std::string_view section, std::string_view key,
+                          auto&& conv) const
+    {
+        std::vector<std::invoke_result_t<decltype(conv), const Value&>> values;
+        auto sit = find(section);
+        if (sit == end())
+        {
+            return values;
+        }
+        for (const auto& secv : sit->second)
+        {
+            auto kit = secv.find(key);
+            if (kit == secv.end())
+            {
+                continue;
+            }
+            for (auto v : kit->second)
+            {
+                values.push_back(conv(v));
+            }
+        }
+        return values;
+    }
+    std::vector<std::string> getValueStrings(std::string_view section,
+                                             std::string_view key) const;
+};
+
+class Parser
+{
+  public:
+    SectionMap map;
+
+    Parser() = default;
+
+    /** @brief Constructor
+     *  @param[in] filename - Absolute path of the file which will be parsed.
+     */
+    Parser(const fs::path& filename);
+
+    /** @brief Determine if the loaded file exists */
+    inline bool getFileExists() const noexcept
+    {
+        return fileExists;
+    }
+
+    /** @brief Determine if there were warnings parsing the file
+     *  @return The number of parsing issues in the file
+     */
+
+    std::tuple<ReturnCode, ValueListstr> getValues(const std::string& section,
+                                                const std::string& key);
+    inline const std::vector<std::string>& getWarnings() const noexcept
+    {
+        return warnings;
+    }
+
+    /** @brief Get the filename last parsed successfully
+     *  @return file path
+     */
+    inline const fs::path& getFilename() const noexcept
+    {
+        return filename;
+    }
+
+    /** @brief Set the file name and parse it.
+     *  @param[in] filename - Absolute path of the file.
+     */
+    void setFile(const fs::path& filename);
+
+    /** @brief Write the current config to a file */
+    void writeFile() const;
+    void writeFile(const fs::path& filename);
+
+  private:
+    bool fileExists = false;
+    fs::path filename;
+    std::vector<std::string> warnings;
+
+    std::tuple<ReturnCode, KeyValueMapstr> getSectionstr(const std::string& section);
+    std::unordered_map<Sectionstr, KeyValueMapstr> sections;
+};
+
+} // namespace config
diff --git a/src/meson.build b/src/meson.build
new file mode 100644
index 0000000..4fe6a6c
--- /dev/null
+++ b/src/meson.build
@@ -0,0 +1,46 @@
+src_includes = include_directories('.')
+
+stdplus_dep = dependency('stdplus')
+
+openssl_deps = [
+  phosphor_dbus_interfaces_dep,
+  dependency('phosphor-logging'),
+  openssl_dbus_dep,
+  sdbusplus_dep,
+  stdplus_dep,
+]
+
+conf_header = configure_file(
+  output: 'config.h',
+  configuration: conf_data)
+
+openssl_lib = static_library(
+  'openssl-managerd',
+  conf_header,
+  'openssl-manager.cpp',
+  implicit_include_directories: false,
+  include_directories: src_includes,
+  dependencies: openssl_deps)
+
+openssl_config = declare_dependency(
+  sources: conf_header,
+  dependencies: openssl_deps,
+  include_directories: src_includes,
+  link_with: openssl_lib)
+
+executable(
+  'openssl-manager',
+  'openssl-manager-main.cpp',
+  'openssl-manager.cpp',
+  'config_parser.cpp',
+  implicit_include_directories: false,
+  include_directories: src_includes,
+  dependencies: [
+    openssl_deps,
+    openssl_config,
+  ],
+  install: true,
+  install_dir: get_option('bindir'))
+
+
+
diff --git a/src/openssl-manager-main.cpp b/src/openssl-manager-main.cpp
new file mode 100644
index 0000000..7adcbcf
--- /dev/null
+++ b/src/openssl-manager-main.cpp
@@ -0,0 +1,33 @@
+
+#include <phosphor-logging/lg2.hpp>
+#include <sdbusplus/bus.hpp>
+#include <sdbusplus/server/manager.hpp>
+#include <sdeventplus/clock.hpp>
+#include <sdeventplus/event.hpp>
+#include <sdeventplus/source/signal.hpp>
+#include <sdeventplus/utility/sdbus.hpp>
+#include <sdeventplus/utility/timer.hpp>
+#include <stdplus/pinned.hpp>
+#include <stdplus/print.hpp>
+#include <stdplus/signal.hpp>
+
+#include <phosphor-logging/elog-errors.hpp>
+#include <phosphor-logging/lg2.hpp>
+
+
+#include "openssl-manager.hpp"
+using namespace phosphor::logging;
+
+
+int main() {
+	auto bus = sdbusplus::bus::new_default();
+	constexpr auto path = "/xyz/openbmc_project/OpenSSL";
+	bus.request_name("xyz.openbmc_project.OpenSSL");
+
+
+	Manager s(bus, path);
+	bus.process_loop(); /* loop forever */
+
+	return -1;
+}
+
diff --git a/src/openssl-manager.cpp b/src/openssl-manager.cpp
new file mode 100644
index 0000000..0d05bee
--- /dev/null
+++ b/src/openssl-manager.cpp
@@ -0,0 +1,87 @@
+#include <string>
+
+#include "openssl-manager.hpp"
+
+#include <phosphor-logging/elog-errors.hpp>
+#include <phosphor-logging/lg2.hpp>
+#include <fmt/compile.h>
+#include <fmt/format.h>
+#include <filesystem>
+
+#include "config.h"
+#include "config_parser.hpp"
+
+
+using namespace phosphor::logging;
+using NotAllowed = sdbusplus::xyz::openbmc_project::Common::Error::NotAllowed;
+using NotAllowedArgument = xyz::openbmc_project::Common::NotAllowed;
+
+
+constexpr int REBOOT_DELAY=5;
+constexpr auto FIPS_CNF = "/usr/lib/ssl-3/fipsmodule.cnf";
+constexpr auto OPENSSL_CONFIG = "/usr/lib/ssl-3/openssl.conf";
+
+Manager::Manager(sdbusplus::bus_t& bus, const char* path) :
+    ManagerIntf(bus, path)
+{
+    if (AMI_OPENSSL_FIPS_SUPPORT) {
+        std::filesystem::path path(OPENSSL_CONFIG);
+        config::Parser parser(path);
+        std::filesystem::path fips(FIPS_CNF);
+        if (std::filesystem::exists(path)) {
+            auto str1 = parser.map.getLastValueString("FIPS", "FIPSEnable");
+            ManagerIntf::fips((!str1->empty() && *str1 == "true") ? true : false);
+        } // if
+        else if (AMI_DEAULT_ENABLE_OPENSSL_FIPS) {
+            ManagerIntf::fips(true);
+            if (!std::filesystem::exists(fips)) {
+                int ret = std::system(fmt::format("openssl_fips_swich.sh {}", "init_on",REBOOT_DELAY).c_str());
+                if (ret != 0) {
+                    log<level::ERR>(fmt::format("command return value = {}\n", std::to_string(ret)).c_str());
+                }
+            } // if
+            writeConfiguration();
+        } // else if
+        else {
+            ManagerIntf::fips(false);
+            writeConfiguration();
+        } // else
+    } // if
+    else {
+        ManagerIntf::fips(false);
+        writeConfiguration();
+    } // else
+}
+
+
+bool Manager::fips(bool value) {
+    if (!AMI_OPENSSL_FIPS_SUPPORT) {
+        log<level::ERR>("Not support in current state.\n");
+        elog<NotAllowed>(NotAllowedArgument::REASON("Not support in current state.\n"));
+    }
+
+    if (value == ManagerIntf::fips()) {
+        log<level::INFO>("Same configuration.\n");
+        return value;
+    } // if
+
+    
+    int ret = std::system(fmt::format("openssl_fips_swich.sh {} {}", value ? "on" : "off", REBOOT_DELAY).c_str());
+    if (ret != 0) {
+        log<level::ERR>("Not able to switch FIPS Mode\n");
+        elog<NotAllowed>(NotAllowedArgument::REASON("Not able to switch FIPS Mode\n"));
+    }
+    ManagerIntf::fips(value);
+    writeConfiguration();
+    return value;
+}
+
+void Manager::writeConfiguration() {
+    config::Parser config;
+    
+    config.map["FIPS"].emplace_back()["FIPSEnable"].emplace_back(ManagerIntf::fips() ? "true" : "false");
+
+    auto path(OPENSSL_CONFIG);
+    config.writeFile(path);
+    log<level::INFO>(fmt::format("Wrote openssl configuration file: {}", path).c_str());
+}
\ No newline at end of file
diff --git a/src/openssl-manager.hpp b/src/openssl-manager.hpp
new file mode 100644
index 0000000..756c754
--- /dev/null
+++ b/src/openssl-manager.hpp
@@ -0,0 +1,38 @@
+#include <string>
+
+#include <xyz/openbmc_project/OpenSSL/Manager/server.hpp>
+
+using ManagerIntf = sdbusplus::server::object_t<sdbusplus::xyz::openbmc_project::OpenSSL::server::Manager>;
+
+class Manager : ManagerIntf {
+
+    public:
+        /* Define all of the basic class operations:
+         *     Not allowed:
+         *         - Default constructor to avoid nullptrs.
+         *         - Copy operations due to internal unique_ptr.
+         *         - Move operations due to 'this' being registered as the
+         *           'context' with sdbus.
+         *     Allowed:
+         *         - Destructor.
+         */
+        Manager() = delete;
+        Manager(const Manager&) = delete;
+        Manager& operator=(const Manager&) = delete;
+        Manager(Manager&&) = delete;
+        Manager& operator=(Manager&&) = delete;
+
+        /** @brief Constructor to initialize the object
+         *  @param[in] bus - Bus to attach to.
+         *  @param[in] path - Path to attach at.
+         */
+        Manager(sdbusplus::bus_t& bus, const char* path);
+
+        /** Set value of FIPS */
+        bool fips(bool value) override;
+
+        void writeConfiguration();
+
+        /** Get value of FIPS */
+        using ManagerIntf::fips;
+};
diff --git a/subprojects/googletest.wrap b/subprojects/googletest.wrap
new file mode 100644
index 0000000..56da9ef
--- /dev/null
+++ b/subprojects/googletest.wrap
@@ -0,0 +1,3 @@
+[wrap-git]
+url = https://github.com/google/googletest
+revision = HEAD
diff --git a/subprojects/phosphor-dbus-interfaces.wrap b/subprojects/phosphor-dbus-interfaces.wrap
new file mode 100644
index 0000000..346aa0c
--- /dev/null
+++ b/subprojects/phosphor-dbus-interfaces.wrap
@@ -0,0 +1,6 @@
+[wrap-git]
+url = https://github.com/openbmc/phosphor-dbus-interfaces.git
+revision = HEAD
+
+[provide]
+phosphor-dbus-interfaces = phosphor_dbus_interfaces_dep
diff --git a/subprojects/phosphor-logging.wrap b/subprojects/phosphor-logging.wrap
new file mode 100644
index 0000000..71eee8b
--- /dev/null
+++ b/subprojects/phosphor-logging.wrap
@@ -0,0 +1,6 @@
+[wrap-git]
+url = https://github.com/openbmc/phosphor-logging.git
+revision = HEAD
+
+[provide]
+phosphor-logging = phosphor_logging_dep
diff --git a/subprojects/sdbusplus.wrap b/subprojects/sdbusplus.wrap
new file mode 100644
index 0000000..edd9a31
--- /dev/null
+++ b/subprojects/sdbusplus.wrap
@@ -0,0 +1,7 @@
+[wrap-git]
+url = https://github.com/openbmc/sdbusplus.git
+revision = HEAD
+
+[provide]
+sdbusplus = sdbusplus_dep
+program_names = sdbus++, sdbus++-gen-meson
diff --git a/subprojects/sdeventplus.wrap b/subprojects/sdeventplus.wrap
new file mode 100644
index 0000000..f871ac0
--- /dev/null
+++ b/subprojects/sdeventplus.wrap
@@ -0,0 +1,6 @@
+[wrap-git]
+url = https://github.com/openbmc/sdeventplus.git
+revision = HEAD
+
+[provide]
+sdeventplus = sdeventplus_dep
diff --git a/subprojects/stdplus.wrap b/subprojects/stdplus.wrap
new file mode 100644
index 0000000..d49e9a1
--- /dev/null
+++ b/subprojects/stdplus.wrap
@@ -0,0 +1,8 @@
+[wrap-git]
+url = https://github.com/openbmc/stdplus
+revision = HEAD
+
+[provide]
+stdplus = stdplus_dep
+stdplus-gtest = stdplus_gtest_dep
+program_names = run_with_tmp
diff --git a/xyz.openbmc_project.OpenSSL.service.in b/xyz.openbmc_project.OpenSSL.service.in
new file mode 100644
index 0000000..db7b320
--- /dev/null
+++ b/xyz.openbmc_project.OpenSSL.service.in
@@ -0,0 +1,12 @@
+[Unit]
+Description=AMI OpenSSL Manager
+After=systemd-networkd.service
+
+[Service]
+ExecStart=/usr/bin/openssl-manager
+Restart=always
+Type=dbus
+BusName=xyz.openbmc_project.OpenSSL
+
+[Install]
+WantedBy=@SYSTEMD_TARGET@
diff --git a/yaml/xyz/openbmc_project/OpenSSL/Manager.interface.yaml b/yaml/xyz/openbmc_project/OpenSSL/Manager.interface.yaml
new file mode 100644
index 0000000..1f52028
--- /dev/null
+++ b/yaml/xyz/openbmc_project/OpenSSL/Manager.interface.yaml
@@ -0,0 +1,11 @@
+description: >
+  This defines an OpenSSL interface.
+
+properties:
+  - name: FIPS
+    type: boolean
+    default: false
+    description: >
+      This property controls if OpenSSL-FIPS mode is enabled.
+    errors:
+          - xyz.openbmc_project.Common.Error.NotAllowed
\ No newline at end of file
-- 
2.25.1

