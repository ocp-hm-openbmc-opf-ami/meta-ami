From 1ef57fb37c21d9aca69136f472014ba39bba32ec Mon Sep 17 00:00:00 2001
From: eddyhan <eddyhan@ami.com>
Date: Wed, 27 Oct 2021 11:20:30 +0800
Subject: [PATCH] mctp-wrapper add function


diff --git a/mctpw.cpp b/mctpw.cpp
old mode 100644
new mode 100755
index 33febf7..db65653
--- a/mctpw.cpp
+++ b/mctpw.cpp
@@ -40,7 +40,7 @@ using DictType = boost::container::flat_map<T1, T2>;
 using ServiceHandleType = std::pair<mctpw_binding_type_t, std::string>;
 using MctpPropertiesVariantType =
     std::variant<uint16_t, int16_t, int32_t, uint32_t, bool, std::string,
-                 uint8_t, std::vector<uint8_t>>;
+                 uint8_t, std::vector<uint8_t>, std::vector<uint16_t>>;
 
 static std::shared_ptr<sdbusplus::bus::bus> mctpwBus;
 
@@ -770,12 +770,6 @@ static void do_send_message_payload(boost::asio::yield_context yield,
         std::vector<uint8_t> payload_vector;
 
         payload_vector.push_back(static_cast<uint8_t>(ctx->type));
-        payload_vector.push_back(static_cast<uint8_t>(ctx->vendor_id));
-        payload_vector.push_back(static_cast<uint8_t>(ctx->vendor_id >> 8));
-        payload_vector.push_back(
-            static_cast<uint8_t>(ctx->vendor_message_type));
-        payload_vector.push_back(
-            static_cast<uint8_t>(ctx->vendor_message_type >> 8));
 
         for (size_t n = 0; n < payload_length; n++)
         {
@@ -866,12 +860,6 @@ int mctpw_send_message(void* client_context, mctpw_eid_t dst_eid,
         std::vector<uint8_t> payload_vector;
 
         payload_vector.push_back(static_cast<uint8_t>(ctx->type));
-        payload_vector.push_back(static_cast<uint8_t>(ctx->vendor_id));
-        payload_vector.push_back(static_cast<uint8_t>(ctx->vendor_id >> 8));
-        payload_vector.push_back(
-            static_cast<uint8_t>(ctx->vendor_message_type));
-        payload_vector.push_back(
-            static_cast<uint8_t>(ctx->vendor_message_type >> 8));
 
         for (size_t n = 0; n < payload_length; n++)
         {
@@ -909,12 +897,6 @@ static void do_send_receive_atomic_message(
         std::vector<uint8_t> payload_vector, response_vector;
 
         payload_vector.push_back(static_cast<uint8_t>(ctx->type));
-        payload_vector.push_back(static_cast<uint8_t>(ctx->vendor_id));
-        payload_vector.push_back(static_cast<uint8_t>(ctx->vendor_id >> 8));
-        payload_vector.push_back(
-            static_cast<uint8_t>(ctx->vendor_message_type));
-        payload_vector.push_back(
-            static_cast<uint8_t>(ctx->vendor_message_type >> 8));
 
         for (size_t n = 0; n < payload_length; n++)
             payload_vector.push_back(payload[n]);
@@ -1007,12 +989,6 @@ int mctpw_send_receive_atomic_message(void* client_context, mctpw_eid_t dst_eid,
         std::vector<uint8_t> payload_vector, response_vector;
 
         payload_vector.push_back(static_cast<uint8_t>(ctx->type));
-        payload_vector.push_back(static_cast<uint8_t>(ctx->vendor_id));
-        payload_vector.push_back(static_cast<uint8_t>(ctx->vendor_id >> 8));
-        payload_vector.push_back(
-            static_cast<uint8_t>(ctx->vendor_message_type));
-        payload_vector.push_back(
-            static_cast<uint8_t>(ctx->vendor_message_type >> 8));
 
         for (unsigned n = 0; n < request_payload_length; n++)
             payload_vector.push_back(request_payload[n]);
@@ -1047,3 +1023,266 @@ int mctpw_send_receive_atomic_message(void* client_context, mctpw_eid_t dst_eid,
     }
     return -EIO;
 }
+int mctpw_get_endpoint_BMCSlaveAddresss(void* client_context,
+                                  uint8_t *address)
+{
+    if (!client_context || !address)
+    {         
+        return -EINVAL;
+    }
+
+    try
+    {
+        clientContext* ctx = static_cast<clientContext*>(client_context);
+        /*
+         *  response format:
+         *  <DICT<STRING,VARIANT> objpath interfaces_and_properties
+         */
+        *address=0; 
+        DictType<std::string, MctpPropertiesVariantType> props;
+
+        call_method(static_cast<sdbusplus::bus::bus&>(*(ctx->connection)),
+                    ctx->service_h->second.c_str(), "/xyz/openbmc_project/mctp",
+                    "org.freedesktop.DBus.Properties", "GetAll", props,
+                    "xyz.openbmc_project.MCTP.Binding.SMBus");
+ 
+        *address = std::get<uint8_t>(props.at("BmcSlaveAddress"));
+        // todo: uuid, vendor_type and vendor_type_count
+    }
+    catch (std::exception& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
+        return -EINVAL;
+    }
+    catch (...)
+    {
+        return -EINVAL;
+    }
+    return 0;
+}
+
+int mctpw_get_endpoint_BMCI2CBus(void* client_context,
+                                  uint8_t *bus)
+{
+    if (!client_context || !bus)
+    {         
+        return -EINVAL;
+    }
+
+    try
+    {
+        clientContext* ctx = static_cast<clientContext*>(client_context);
+        /*
+         *  response format:
+         *  <DICT<STRING,VARIANT> objpath interfaces_and_properties
+         */
+        std::string buspath;
+        std::string token;
+
+        DictType<std::string, MctpPropertiesVariantType> props;
+        
+        call_method(static_cast<sdbusplus::bus::bus&>(*(ctx->connection)),
+                    ctx->service_h->second.c_str(), "/xyz/openbmc_project/mctp",
+                    "org.freedesktop.DBus.Properties", "GetAll", props,
+                    "xyz.openbmc_project.MCTP.Binding.SMBus");
+
+        buspath = std::get<std::string>(props.at("BusPath"));     
+        token=buspath.substr(buspath.rfind("-") + 1);  
+        *bus=static_cast<uint8_t>(std::stoi(token));
+        // todo: uuid, vendor_type and vendor_type_count
+    }
+    catch (std::exception& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
+        return -EINVAL;
+    }
+    catch (...)
+    {
+        return -EINVAL;
+    }
+    return 0;
+}
+uint32_t Crc32cLookUpTable[256] =
+{
+	0x00000000L, 0xF26B8303L, 0xE13B70F7L, 0x1350F3F4L,
+	0xC79A971FL, 0x35F1141CL, 0x26A1E7E8L, 0xD4CA64EBL,
+	0x8AD958CFL, 0x78B2DBCCL, 0x6BE22838L, 0x9989AB3BL,
+	0x4D43CFD0L, 0xBF284CD3L, 0xAC78BF27L, 0x5E133C24L,
+	0x105EC76FL, 0xE235446CL, 0xF165B798L, 0x030E349BL,
+	0xD7C45070L, 0x25AFD373L, 0x36FF2087L, 0xC494A384L,
+	0x9A879FA0L, 0x68EC1CA3L, 0x7BBCEF57L, 0x89D76C54L,
+	0x5D1D08BFL, 0xAF768BBCL, 0xBC267848L, 0x4E4DFB4BL,
+	0x20BD8EDEL, 0xD2D60DDDL, 0xC186FE29L, 0x33ED7D2AL,
+	0xE72719C1L, 0x154C9AC2L, 0x061C6936L, 0xF477EA35L,
+	0xAA64D611L, 0x580F5512L, 0x4B5FA6E6L, 0xB93425E5L,
+	0x6DFE410EL, 0x9F95C20DL, 0x8CC531F9L, 0x7EAEB2FAL,
+	0x30E349B1L, 0xC288CAB2L, 0xD1D83946L, 0x23B3BA45L,
+	0xF779DEAEL, 0x05125DADL, 0x1642AE59L, 0xE4292D5AL,
+	0xBA3A117EL, 0x4851927DL, 0x5B016189L, 0xA96AE28AL,
+	0x7DA08661L, 0x8FCB0562L, 0x9C9BF696L, 0x6EF07595L,
+	0x417B1DBCL, 0xB3109EBFL, 0xA0406D4BL, 0x522BEE48L,
+	0x86E18AA3L, 0x748A09A0L, 0x67DAFA54L, 0x95B17957L,
+	0xCBA24573L, 0x39C9C670L, 0x2A993584L, 0xD8F2B687L,
+	0x0C38D26CL, 0xFE53516FL, 0xED03A29BL, 0x1F682198L,
+	0x5125DAD3L, 0xA34E59D0L, 0xB01EAA24L, 0x42752927L,
+	0x96BF4DCCL, 0x64D4CECFL, 0x77843D3BL, 0x85EFBE38L,
+	0xDBFC821CL, 0x2997011FL, 0x3AC7F2EBL, 0xC8AC71E8L,
+	0x1C661503L, 0xEE0D9600L, 0xFD5D65F4L, 0x0F36E6F7L,
+	0x61C69362L, 0x93AD1061L, 0x80FDE395L, 0x72966096L,
+	0xA65C047DL, 0x5437877EL, 0x4767748AL, 0xB50CF789L,
+	0xEB1FCBADL, 0x197448AEL, 0x0A24BB5AL, 0xF84F3859L,
+	0x2C855CB2L, 0xDEEEDFB1L, 0xCDBE2C45L, 0x3FD5AF46L,
+	0x7198540DL, 0x83F3D70EL, 0x90A324FAL, 0x62C8A7F9L,
+	0xB602C312L, 0x44694011L, 0x5739B3E5L, 0xA55230E6L,
+	0xFB410CC2L, 0x092A8FC1L, 0x1A7A7C35L, 0xE811FF36L,
+	0x3CDB9BDDL, 0xCEB018DEL, 0xDDE0EB2AL, 0x2F8B6829L,
+	0x82F63B78L, 0x709DB87BL, 0x63CD4B8FL, 0x91A6C88CL,
+	0x456CAC67L, 0xB7072F64L, 0xA457DC90L, 0x563C5F93L,
+	0x082F63B7L, 0xFA44E0B4L, 0xE9141340L, 0x1B7F9043L,
+	0xCFB5F4A8L, 0x3DDE77ABL, 0x2E8E845FL, 0xDCE5075CL,
+	0x92A8FC17L, 0x60C37F14L, 0x73938CE0L, 0x81F80FE3L,
+	0x55326B08L, 0xA759E80BL, 0xB4091BFFL, 0x466298FCL,
+	0x1871A4D8L, 0xEA1A27DBL, 0xF94AD42FL, 0x0B21572CL,
+	0xDFEB33C7L, 0x2D80B0C4L, 0x3ED04330L, 0xCCBBC033L,
+	0xA24BB5A6L, 0x502036A5L, 0x4370C551L, 0xB11B4652L,
+	0x65D122B9L, 0x97BAA1BAL, 0x84EA524EL, 0x7681D14DL,
+	0x2892ED69L, 0xDAF96E6AL, 0xC9A99D9EL, 0x3BC21E9DL,
+	0xEF087A76L, 0x1D63F975L, 0x0E330A81L, 0xFC588982L,
+	0xB21572C9L, 0x407EF1CAL, 0x532E023EL, 0xA145813DL,
+	0x758FE5D6L, 0x87E466D5L, 0x94B49521L, 0x66DF1622L,
+	0x38CC2A06L, 0xCAA7A905L, 0xD9F75AF1L, 0x2B9CD9F2L,
+	0xFF56BD19L, 0x0D3D3E1AL, 0x1E6DCDEEL, 0xEC064EEDL,
+	0xC38D26C4L, 0x31E6A5C7L, 0x22B65633L, 0xD0DDD530L,
+	0x0417B1DBL, 0xF67C32D8L, 0xE52CC12CL, 0x1747422FL,
+	0x49547E0BL, 0xBB3FFD08L, 0xA86F0EFCL, 0x5A048DFFL,
+	0x8ECEE914L, 0x7CA56A17L, 0x6FF599E3L, 0x9D9E1AE0L,
+	0xD3D3E1ABL, 0x21B862A8L, 0x32E8915CL, 0xC083125FL,
+	0x144976B4L, 0xE622F5B7L, 0xF5720643L, 0x07198540L,
+	0x590AB964L, 0xAB613A67L, 0xB831C993L, 0x4A5A4A90L,
+	0x9E902E7BL, 0x6CFBAD78L, 0x7FAB5E8CL, 0x8DC0DD8FL,
+	0xE330A81AL, 0x115B2B19L, 0x020BD8EDL, 0xF0605BEEL,
+	0x24AA3F05L, 0xD6C1BC06L, 0xC5914FF2L, 0x37FACCF1L,
+	0x69E9F0D5L, 0x9B8273D6L, 0x88D28022L, 0x7AB90321L,
+	0xAE7367CAL, 0x5C18E4C9L, 0x4F48173DL, 0xBD23943EL,
+	0xF36E6F75L, 0x0105EC76L, 0x12551F82L, 0xE03E9C81L,
+	0x34F4F86AL, 0xC69F7B69L, 0xD5CF889DL, 0x27A40B9EL,
+	0x79B737BAL, 0x8BDCB4B9L, 0x988C474DL, 0x6AE7C44EL,
+	0xBE2DA0A5L, 0x4C4623A6L, 0x5F16D052L, 0xAD7D5351L
+};
+
+uint32_t CalculateCRC32C(std::vector<uint8_t>Buffer)
+{
+    unsigned long crc = 0xffffffff;
+    uint32_t Size=Buffer.size();
+    uint32_t i;
+    i=0;
+    while (Size-- > 0) {
+        crc = (crc>>8) ^ Crc32cLookUpTable[(crc ^ (Buffer[i])) & 0xFF];
+        i++;
+    }
+    return crc^0xffffffff;
+}
+int mctpw_send_receive_atomic_message_withcrc32(void* client_context, mctpw_eid_t dst_eid,
+                                      uint8_t* request_payload,
+                                      unsigned request_payload_length,
+                                      uint8_t* response_payload,
+                                      unsigned* response_payload_length,
+                                      unsigned timeout)
+{
+    if (!client_context || !request_payload || !response_payload ||
+        !response_payload_length)
+    {
+        return -EINVAL;
+    }
+
+    if (request_payload_length == 0)
+    {
+        return 0;
+    }
+    try
+    {
+        clientContext* ctx = static_cast<clientContext*>(client_context);
+        std::vector<uint8_t> payload_vector, response_vector;
+        uint32_t crc32;
+
+        payload_vector.push_back(static_cast<uint8_t>((ctx->type | 0x80)));
+        for (unsigned n = 0; n < request_payload_length; n++)
+        {
+            payload_vector.push_back(request_payload[n]);
+        }
+        crc32=CalculateCRC32C(payload_vector); 
+        payload_vector.push_back(static_cast<uint8_t> (crc32 & 0x000000ff));  
+        payload_vector.push_back(static_cast<uint8_t> ((crc32 & 0x0000ff00)>>8));  
+        payload_vector.push_back(static_cast<uint8_t> ((crc32 & 0x00ff0000)>>16));   
+        payload_vector.push_back(static_cast<uint8_t> ((crc32 & 0xff000000)>>24)); 
+
+        call_method(static_cast<sdbusplus::bus::bus&>(*(ctx->connection)),
+                    ctx->service_h->second.c_str(), "/xyz/openbmc_project/mctp",
+                    "xyz.openbmc_project.MCTP.Base",
+                    "SendReceiveMctpMessagePayload", response_vector, dst_eid,
+                    payload_vector, static_cast<uint16_t>(timeout));
+
+        if (response_vector.size() && *response_payload_length)
+        {
+            unsigned n = 0;
+            for (auto& i : response_vector)
+            {
+                response_payload[n++] = i;
+                if (n >= *response_payload_length)
+                    break;
+            }
+            *response_payload_length = n;
+        }
+        return 0;
+    }
+    catch (std::exception& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
+        return -EINVAL;
+    }
+    catch (...)
+    {
+        return -EINVAL;
+    }
+    return -EIO;
+}
+
+int mctpw_get_endpoint_VDM(void* client_context, mctpw_eid_t eid,
+                                  uint16_t* VendorID,uint16_t *VendorDefined)
+{
+    if (!client_context || !VendorID || !VendorDefined)
+    {
+        return -EINVAL;
+    }
+
+    try
+    {
+        clientContext* ctx = static_cast<clientContext*>(client_context);
+        /*
+         *  response format:
+         *  <DICT<STRING,VARIANT> objpath interfaces_and_properties
+         */
+        DictType<std::string, MctpPropertiesVariantType> props;
+        std::string object =
+            "/xyz/openbmc_project/mctp/device/" + std::to_string(eid);
+
+        call_method(static_cast<sdbusplus::bus::bus&>(*(ctx->connection)),
+                    ctx->service_h->second.c_str(), object.c_str(),
+                    "org.freedesktop.DBus.Properties", "GetAll", props,
+                    "xyz.openbmc_project.MCTP.PCIVendorDefined");
+
+        *VendorDefined  = (std::get<std::vector<uint16_t>>(props.at("MessageTypeProperty"))).at(0);
+        *VendorID       = static_cast<uint16_t>(std::stoi(std::get<std::string>(props.at("VendorID")), 0, 16));
+        
+    }
+    catch (std::exception& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
+        return -EINVAL;
+    }
+    catch (...)
+    {
+        return -EINVAL;
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/mctpw.h b/mctpw.h
index 1385b85..5f76fb6 100644
--- a/mctpw.h
+++ b/mctpw.h
@@ -288,7 +288,16 @@ void mctpw_process(void* client_context);
  * @see mctpw_unregister_client()
  */
 ssize_t mctpw_process_one(void* client_context);
-
+int mctpw_get_endpoint_BMCSlaveAddresss(void* client_context, uint8_t *address);
+int mctpw_get_endpoint_BMCI2CBus(void* client_context, uint8_t *bus);
+int mctpw_send_receive_atomic_message_withcrc32(void* client_context, mctpw_eid_t dst_eid,
+                                      uint8_t* request_payload,
+                                      unsigned request_payload_length,
+                                      uint8_t* response_payload,
+                                      unsigned* response_payload_length,
+                                      unsigned timeout);
+int mctpw_get_endpoint_VDM(void* client_context, mctpw_eid_t eid,
+                                  uint16_t* VendID,uint16_t *DeviceID);                                      
 #ifdef __cplusplus
 }
 #endif
-- 
2.7.4

