--- a/modules/pam_cracklib/pam_cracklib.c	2017-11-16 05:11:56.000000000 -0500
+++ b/modules/pam_cracklib/pam_cracklib.c	2021-12-20 16:12:27.708638811 -0500
@@ -97,6 +97,9 @@
 	int max_repeat;
 	int max_sequence;
         int max_class_repeat;
+        int max_alpha_sequence;
+        int max_alpha_repeat;
+        int multiple_alpha;
 	int reject_user;
         int gecos_check;
         int enforce_for_root;
@@ -196,6 +199,18 @@
 	     if (!*(opt->cracklib_dictpath)) {
 		 opt->cracklib_dictpath = CRACKLIB_DICTS;
 	     }
+	 } else if (!strncmp(*argv,"maxalphasequence=",17)) {
+	   opt->max_alpha_sequence = strtol(*argv+17,&ep,10);
+	   if (!ep)
+	     opt->max_alpha_sequence = 0;
+	 } else if (!strncmp(*argv,"maxalpharepeat=",15)) {
+	   opt->max_alpha_repeat = strtol(*argv+15,&ep,10);
+	   if (!ep)
+	     opt->max_alpha_repeat = 0;
+	 } else if (!strncmp(*argv,"multiplealpha=",14)) {
+	   opt->multiple_alpha = strtol(*argv+14,&ep,10);
+	   if (!ep)
+	     opt->multiple_alpha = 0;
 	 } else {
 	     pam_syslog(pamh,LOG_ERR,"pam_parse: unknown option; %s",*argv);
 	 }
@@ -600,6 +615,131 @@
     return 0;
 }
 
+/*
+ * alphasequence - checks for consecutive alphabet characters, case insensitive
+ */
+static int alphasequence(struct cracklib_options *opt, const char *new)
+{
+    char lower=0,upper=0;
+    int i=0,sequp = 1,seqdown = 1;
+    
+    if (opt->max_alpha_sequence == 0)
+      return 0;
+    if (new[0] == '\0')
+      return 0;
+
+    for (i = 1; new[i]; i++) {
+      // get last character upper and lower case, skip if not alpha
+      if(islower(new[i-1])) {
+	lower = new[i-1];
+	upper = new[i-1]-0x20;
+      }
+      else if(isupper(new[i-1])) {
+	lower = new[i-1]+0x20;
+	upper = new[i-1];
+      }
+      else {
+	sequp = 1;
+	seqdown = 1;
+	continue;
+      }
+      // check if new character is not alpha
+      if(!isalpha(new[i])) {
+	sequp = 1;
+	seqdown = 1;
+	continue;
+      }
+      // check sequence up or down
+      if ((new[i] == lower+1) || (new[i] == upper+1)) {
+	++sequp;
+	if (sequp >= opt->max_alpha_sequence)
+	  return 1;
+	seqdown = 1;
+      }
+      else if ((new[i] == lower-1) || (new[i] == upper-1)) {
+	++seqdown;
+	if (seqdown >= opt->max_alpha_sequence)
+	  return 1;
+	sequp = 1;
+      }
+      else {
+	sequp = 1;
+	seqdown = 1;
+      }	
+    }
+    return 0;
+}
+
+/*
+ * alpharepeat - checks for repeating alphabet repeating, case insensitive
+ */
+static int alpharepeat(struct cracklib_options *opt, const char *new)
+{
+  int i=0,repeat = 0;
+  
+  if (opt->max_alpha_repeat == 0)
+    return 0;
+  if (new[0] == '\0')
+    return 0;
+  
+  for (i = 0; new[i]; i++) {
+    // get last character upper and lower case, skip if not alpha
+    if(islower(new[i])) {
+      ++repeat;
+      if (repeat > opt->max_alpha_repeat)
+	return 1;
+    }
+    else if(isupper(new[i])) {
+      ++repeat;
+      if (repeat > opt->max_alpha_repeat)
+	return 1;
+    }
+    else {
+      repeat = 0;
+      continue;
+    }
+  }
+  return 0;
+}
+
+/*
+ * multiplealpha - checks if there are multiples of the same alpha character, case insensitive
+ */
+static int multiplealpha(struct cracklib_options *opt, const char *new)
+{
+  int i=0,j=0,count=1;
+  char lower=0,upper=0;
+  
+  if(opt->multiple_alpha == 0)
+    return 0;  
+  if(new[0] == '\0')
+    return 0;
+  
+  for(i = 0; new[i]; i++) {
+    // get last character upper and lower case, skip if not alpha
+    if(islower(new[i])) {
+      lower = new[i];
+      upper = new[i]-0x20;
+    }
+    else if(isupper(new[i])) { //new is uppercase
+      lower = new[i]+0x20;
+      upper = new[i];
+    }
+    else {
+      continue;
+    }
+    count = 0;
+    for(j=0;new[j];j++) {
+      if (new[j] == lower || new[j] == upper) {
+	++count;
+	if (count > opt->multiple_alpha)
+	  return 1;
+      }
+    }
+  }
+  return 0;
+}
+
 static const char *password_check(pam_handle_t *pamh, struct cracklib_options *opt,
 				  const char *old, const char *new,
 				  const char *user)
@@ -657,6 +797,15 @@
 	if (!msg && sequence(opt, new))
 	        msg = _("contains too long of a monotonic character sequence");
 
+	if (!msg && alpharepeat(opt, new))
+	        msg = _("contains too many alphabet characters in sequence");
+
+	if (!msg && multiplealpha(opt, new))
+	        msg = _("contains too many of the same alphabet character");
+
+	if (!msg && alphasequence(opt, new))
+	        msg = _("contains too many same characters consecutively");
+	
 	if (!msg && (usercheck(opt, newmono, usermono) || gecoscheck(pamh, opt, newmono, user)))
 	        msg = _("contains the user name in some form");
 
