diff -Naur A/include/sel_logger.hpp B/include/sel_logger.hpp
--- A/include/sel_logger.hpp	2022-07-27 15:45:19.989750812 +0530
+++ B/include/sel_logger.hpp	2022-07-27 15:44:59.629752712 +0530
@@ -15,13 +15,22 @@
 */
 
 #pragma once
+#include <chrono>
 #include <filesystem>
 
+using namespace std::literals::chrono_literals;
+constexpr std::chrono::microseconds DBUS_TIMEOUT = 5s;
+
 static constexpr char const* ipmiSelObject = "xyz.openbmc_project.Logging.IPMI";
 static constexpr char const* ipmiSelPath = "/xyz/openbmc_project/Logging/IPMI";
 static constexpr char const* ipmiSelAddInterface =
     "xyz.openbmc_project.Logging.IPMI";
 
+constexpr static const char* pefService = "xyz.openbmc_project.pef.alerting";
+constexpr static const char* pefObjPath = "/xyz/openbmc_project/pef/alerting";
+constexpr static const char* pefIface = "xyz.openbmc_project.pef.pefTask";
+constexpr static const char* pefTaskMethod = "doPefTask";
+
 // ID string generated using journalctl to include in the MESSAGE_ID field for
 // SEL entries.  Helps with filtering SEL entries in the journal.
 static constexpr char const* selMessageId = "b370836ccf2f4850ac5bee185b77893a";
diff -Naur A/include/threshold_alarm_event_monitor.hpp B/include/threshold_alarm_event_monitor.hpp
--- A/include/threshold_alarm_event_monitor.hpp	2022-07-27 15:45:19.989750812 +0530
+++ B/include/threshold_alarm_event_monitor.hpp	2022-07-27 15:44:59.629752712 +0530
@@ -237,12 +237,12 @@
                            threshold + " threshold going " + direction +
                            ". Reading=" + std::to_string(assertValue) +
                            " Threshold=" + std::to_string(thresholdVal) + ".");
+    selAddSystemRecord(
+        journalMsg, std::string(msg.get_path()), eventData, assert, selBMCGenID,
+        "REDFISH_MESSAGE_ID=%s", redfishMessageID.c_str(),
+        "REDFISH_MESSAGE_ARGS=%.*s,%.2f,%.2f", sensorName.length(),
+        sensorName.data(), assertValue, thresholdVal);
 
-    selAddSystemRecord(journalMsg, std::string(msg.get_path()), eventData,
-                       assert, selBMCGenID, "REDFISH_MESSAGE_ID=%s",
-                       redfishMessageID.c_str(),
-                       "REDFISH_MESSAGE_ARGS=%.*s,%f,%f", sensorName.length(),
-                       sensorName.data(), assertValue, thresholdVal);
 }
 
 inline static void startThresholdAlarmMonitor(
diff -Naur A/include/threshold_event_monitor.hpp B/include/threshold_event_monitor.hpp
--- A/include/threshold_event_monitor.hpp	2022-07-27 15:45:19.989750812 +0530
+++ B/include/threshold_event_monitor.hpp	2022-07-27 15:44:59.629752712 +0530
@@ -270,8 +270,8 @@
         selAddSystemRecord(
             journalMsg, std::string(msg.get_path()), eventData, assert,
             selBMCGenID, "REDFISH_MESSAGE_ID=%s", redfishMessageID.c_str(),
-            "REDFISH_MESSAGE_ARGS=%.*s,%f,%f", sensorName.length(),
-            sensorName.data(), assertValue, thresholdVal);
+                        "REDFISH_MESSAGE_ARGS=%.*s,%.2f,%.2f", sensorName.length(),
+	    sensorName.data(), assertValue, thresholdVal);
     };
     sdbusplus::bus::match_t thresholdAssertMatcher(
         static_cast<sdbusplus::bus_t&>(*conn),
diff -Naur A/src/sel_logger.cpp B/src/sel_logger.cpp
--- A/src/sel_logger.cpp	2022-07-27 15:45:19.989750812 +0530
+++ B/src/sel_logger.cpp	2022-07-27 15:44:59.629752712 +0530
@@ -19,6 +19,7 @@
 #include <boost/asio/io_service.hpp>
 #include <boost/container/flat_map.hpp>
 #include <boost/container/flat_set.hpp>
+#include <intel-ipmi-oem/sdrutils.hpp>
 #include <pulse_event_monitor.hpp>
 #include <sdbusplus/asio/object_server.hpp>
 #include <sel_logger.hpp>
@@ -218,6 +219,29 @@
                     "IPMI_SEL_SENSOR_PATH=%s", path.c_str(),
                     "IPMI_SEL_EVENT_DIR=%x", assert, "IPMI_SEL_DATA=%s",
                     selDataStr.c_str(), std::forward<T>(metadata)..., NULL);
+    // Do PEF Action
+    uint8_t sentype = getSensorTypeFromPath(path);
+    uint8_t senNum = getSensorNumberFromPath(path);
+    uint8_t evtype = getSensorEventTypeFromPath(path);
+
+    evtype |= assert ? 0x00 : 0x80;
+
+    std::chrono::microseconds timeout = DBUS_TIMEOUT;
+    boost::asio::io_service io;
+    auto conn = std::make_shared<sdbusplus::asio::connection>(io);
+    auto startPefTask =
+        conn->new_method_call(pefService, pefObjPath, pefIface, pefTaskMethod);
+    startPefTask.append(static_cast<uint16_t>(recordId), sentype, senNum,
+                        evtype, selData[0], selData[1], selData[2],
+                        static_cast<uint16_t>(genId), message.c_str());
+    try
+    {
+        conn->call(startPefTask, timeout.count());
+    }
+    catch (sdbusplus::exception_t&)
+    {
+        std::cerr << "Failed to call doPefTask\n";
+    }
     return recordId;
 #endif
 }
